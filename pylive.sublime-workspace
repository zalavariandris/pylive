{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"out",
				"outletGraphicsObject"
			],
			[
				"outl",
				"outletGraphicsObject"
			],
			[
				"P",
				"PenStyle"
			],
			[
				"Networ",
				"NetrowkXGraphEditor"
			],
			[
				"NotImpl",
				"NotImplementedError"
			],
			[
				"child",
				"childrenBoundingRect"
			],
			[
				"oute",
				"outletAt"
			],
			[
				"Qpoin",
				"QPointF"
			],
			[
				"Outlet",
				"OutletGraphicsObject"
			],
			[
				"setAcc",
				"setAcceptHoverEvents"
			],
			[
				"item",
				"itemAt"
			],
			[
				"ungrab",
				"ungrabMouse"
			],
			[
				"Link",
				"LinkGraphicsObject"
			],
			[
				"NotIm",
				"NotImplementedError"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"outlet",
				"outletGraphicsObject"
			],
			[
				"mapFro",
				"mapFromScene"
			],
			[
				"Inlet",
				"InletGraphicsObject"
			],
			[
				"GraphicsSceneMou",
				"GraphicsSceneMousePress"
			],
			[
				"scene",
				"_scene"
			],
			[
				"GraphicsN",
				"GraphicsNodeItem"
			],
			[
				"NXGraphScen",
				"NXGraphSceneMouseTool"
			],
			[
				"make",
				"make_fillet_path"
			],
			[
				"ar",
				"arcMoveTo"
			],
			[
				"mapFrom",
				"mapFromParent"
			],
			[
				"arcTo",
				"arcMoveTo"
			],
			[
				"_in",
				"_inlet_graphics_objects"
			],
			[
				"_inl",
				"_inlet_graphics_objects"
			],
			[
				"nx_grp",
				"nx_graph_graphics_items"
			],
			[
				"Gra",
				"GraphicsPortItem"
			],
			[
				"Graphics",
				"GraphicsVertexItem"
			],
			[
				"graph",
				"graphscene"
			],
			[
				"onNode",
				"onNodeDeleted"
			],
			[
				"onC",
				"onNodeCreated"
			],
			[
				"node",
				"nodesAdded"
			],
			[
				"onLink",
				"onLinkDeleted"
			],
			[
				"edge",
				"edgesAdded"
			],
			[
				"inde",
				"ItemIndexMethod"
			],
			[
				"add",
				"addNode"
			],
			[
				"update",
				"updateAttachedNodes"
			],
			[
				"getN",
				"getNodeProperty"
			],
			[
				"Nx",
				"NXGraphModel"
			],
			[
				"Connection",
				"ConnectionType"
			],
			[
				"Node",
				"NodeGraphicsObject"
			],
			[
				"Item",
				"ItemScenePositionHasChanged"
			],
			[
				"Vertex",
				"VertexElement"
			],
			[
				"Fla",
				"GraphicsItemFlag"
			],
			[
				"setAcce",
				"setAcceptHoverEvents"
			],
			[
				"gr",
				"createItemGroup"
			],
			[
				"GraphicsO",
				"GraphicsPortItem"
			],
			[
				"setL",
				"setLine"
			],
			[
				"QFo",
				"QFont"
			],
			[
				"create",
				"createAttributeEditor"
			],
			[
				"mous",
				"mouseMoveEvent"
			],
			[
				"Mous",
				"MouseButtonPress"
			],
			[
				"T",
				"Type"
			],
			[
				"ins",
				"installEventFilter"
			],
			[
				"_a",
				"_attribute_to_widget_map"
			],
			[
				"parent",
				"parentItem"
			],
			[
				"QFileO",
				"QFileDialog"
			],
			[
				"edge_",
				"_edge_to_widget_map"
			],
			[
				"_widget_to",
				"_widget_to_node_map"
			],
			[
				"up",
				"updateEdgePosition"
			],
			[
				"setAccep",
				"setAcceptHoverEvents"
			],
			[
				"Att",
				"AttributeError"
			],
			[
				"hei",
				"height"
			],
			[
				"setB",
				"setBrush"
			],
			[
				"chil",
				"childrenBoundingRect"
			],
			[
				"NXGra",
				"NXGraphView"
			],
			[
				"_wi",
				"_widget_to_node_map"
			],
			[
				"nodes",
				"nodesPropertiesChanged"
			],
			[
				"setP",
				"setParentItem"
			],
			[
				"_widg",
				"_widget_to_node_map"
			],
			[
				"remove",
				"removeEdge"
			],
			[
				"hover",
				"hoverMoveEvent"
			],
			[
				"isEnd",
				"_isEndHighlighted"
			],
			[
				"widget_t",
				"_widget_to_edge_map"
			],
			[
				"shape",
				"shape_bbox"
			],
			[
				"Connect",
				"ConnectionEvent"
			],
			[
				"model",
				"_model"
			],
			[
				"widget_",
				"_widget_to_node_map"
			],
			[
				"QGraphicsS",
				"QGraphicsScene"
			],
			[
				"pyl",
				"pylive"
			],
			[
				"ConnectionL",
				"ConnectionLeaveType"
			],
			[
				"setSiz",
				"setSizePolicy"
			],
			[
				"se",
				"setAlignment"
			],
			[
				"main",
				"main_layout"
			],
			[
				"header",
				"header_widget"
			],
			[
				"outlet_",
				"outlet_row"
			],
			[
				"QGraphicsLi",
				"QGraphicsLinearLayout"
			],
			[
				"inlet_r",
				"inlet_row_layout"
			],
			[
				"QGraphicsLine",
				"QGraphicsLinearLayout"
			],
			[
				"QGraph",
				"QGraphicsLayout"
			],
			[
				"Q",
				"QGraphicsLinearLayout"
			],
			[
				"size",
				"sizeHint"
			],
			[
				"inlet",
				"inlet_layout"
			],
			[
				"inle",
				"inlet_layout"
			],
			[
				"GraphicsMou",
				"GraphicsSceneMousePress"
			],
			[
				"sceneEven",
				"sceneEventFilter"
			],
			[
				"instal",
				"installSceneEventFilter"
			],
			[
				"NodeW",
				"NodeWidget2"
			],
			[
				"Arrow",
				"QGraphicsArrowItem"
			],
			[
				"_node",
				"_node_edges"
			],
			[
				"trigg",
				"triggered"
			],
			[
				"tri",
				"triggered"
			],
			[
				"setS",
				"setStyle"
			],
			[
				"QMenu",
				"QMenuBar"
			],
			[
				"text",
				"textChanged"
			],
			[
				"_edg",
				"_edge_targets"
			],
			[
				"nx",
				"nx_inspector_view"
			],
			[
				"ce",
				"cellWidget"
			],
			[
				"itemA",
				"itemAt"
			],
			[
				"QTableW",
				"QTableWidgetItem"
			],
			[
				"QTable",
				"QTableWidgetItem"
			],
			[
				"on_",
				"on_item_changed"
			],
			[
				"clear",
				"clearContents"
			],
			[
				"QAbleW",
				"QTableWidgetItem"
			],
			[
				"setVer",
				"setVerticalHeaderItem"
			],
			[
				"inser",
				"insertRow"
			],
			[
				"set",
				"setText"
			],
			[
				"upda",
				"updateView"
			],
			[
				"patch_",
				"patch_list"
			],
			[
				"dic",
				"dict_diff"
			],
			[
				"begin",
				"beginInsertRows"
			],
			[
				"nodelist",
				"nodelistview"
			],
			[
				"nodel",
				"nodelist"
			],
			[
				"QStan",
				"QStandardItemModel"
			],
			[
				"attri",
				"attribute_list"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pylive/NetworkXGraphEditor/nx_network_scene.py",
			"settings":
			{
				"buffer_size": 16231,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1373,
					1,
					"cut",
					null,
					"AQAAACw8AAAAAAAALDwAAAAAAADVAQAAZGVmIG1vdmUoCiAgICAgICAgc2VsZiwKICAgICAgICBzb3VyY2VfZ3JhcGhpY3NfaXRlbTogUUdyYXBoaWNzSXRlbSwKICAgICAgICB0YXJnZXRfZ3JhcGhpY3NfaXRlbTogUUdyYXBoaWNzSXRlbSwKICAgICk6CiAgICAgICAgbGluZSA9IG1ha2VMaW5lQmV0d2VlblNoYXBlcyhzb3VyY2VfZ3JhcGhpY3NfaXRlbSwgdGFyZ2V0X2dyYXBoaWNzX2l0ZW0pCiAgICAgICAgbGVuZ3RoID0gbGluZS5sZW5ndGgoKQogICAgICAgIGlmIGxlbmd0aCA+IDA6CiAgICAgICAgICAgIG9mZnNldCA9IG1pbig4LCBsZW5ndGggLyAyKQogICAgICAgICAgICBsaW5lID0gUUxpbmVGKAogICAgICAgICAgICAgICAgbGluZS5wb2ludEF0KG9mZnNldCAvIGxlbmd0aCksCiAgICAgICAgICAgICAgICBsaW5lLnBvaW50QXQoKGxlbmd0aCAtIG9mZnNldCkgLyBsZW5ndGgpLAogICAgICAgICAgICApCgogICAgICAgIHNlbGYuc2V0TGluZShsaW5lKQ",
					"AQAAAAAAAAABAAAAAT4AAAAAAAAsPAAAAAAAAAAAAAAAAPC/"
				],
				[
					1376,
					2,
					"left_delete",
					null,
					"AgAAACw8AAAAAAAALDwAAAAAAAABAAAACig8AAAAAAAAKDwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAALTwAAAAAAAAtPAAAAAAAAAAAAAAAAPC/"
				],
				[
					1378,
					1,
					"left_delete",
					null,
					"AQAAACc8AAAAAAAAJzwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAKDwAAAAAAAAoPAAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"cut",
					null,
					"AQAAAJ0CAAAAAAAAnQIAAAAAAAAyAAAAZnJvbSBweWxpdmUudXRpbHMuZ2VvIGltcG9ydCBtYWtlTGluZUJldHdlZW5TaGFwZXM",
					"AQAAAAAAAAABAAAAzwIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1391,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1395,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1402,
					1,
					"insert",
					{
						"characters": "\ndraft."
					},
					"CQAAAMEsAAAAAAAAwiwAAAAAAAAAAAAAwiwAAAAAAADKLAAAAAAAAAAAAADKLAAAAAAAAM4sAAAAAAAAAAAAAM4sAAAAAAAAzywAAAAAAAAAAAAAzywAAAAAAADQLAAAAAAAAAAAAADQLAAAAAAAANEsAAAAAAAAAAAAANEsAAAAAAAA0iwAAAAAAAAAAAAA0iwAAAAAAADTLAAAAAAAAAAAAADTLAAAAAAAANQsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwSwAAAAAAADBLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1403,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BAAAANQsAAAAAAAA1SwAAAAAAAAAAAAA1SwAAAAAAADWLAAAAAAAAAAAAADWLAAAAAAAANcsAAAAAAAAAAAAANcsAAAAAAAA2CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1CwAAAAAAADULAAAAAAAAAAAAAAAAPC/"
				],
				[
					1404,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANgsAAAAAAAA2iwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2CwAAAAAAADYLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1405,
					1,
					"insert",
					{
						"characters": "self,"
					},
					"BQAAANksAAAAAAAA2iwAAAAAAAAAAAAA2iwAAAAAAADbLAAAAAAAAAAAAADbLAAAAAAAANwsAAAAAAAAAAAAANwsAAAAAAAA3SwAAAAAAAAAAAAA3SwAAAAAAADeLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2SwAAAAAAADZLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1406,
					1,
					"insert",
					{
						"characters": " inlet"
					},
					"BgAAAN4sAAAAAAAA3ywAAAAAAAAAAAAA3ywAAAAAAADgLAAAAAAAAAAAAADgLAAAAAAAAOEsAAAAAAAAAAAAAOEsAAAAAAAA4iwAAAAAAAAAAAAA4iwAAAAAAADjLAAAAAAAAAAAAADjLAAAAAAAAOQsAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3iwAAAAAAADeLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1411,
					2,
					"left_delete",
					null,
					"AgAAAOYsAAAAAAAA5iwAAAAAAAA9AAAAICAgICAgICAgICAgZHJhZnQuc2V0TGluZShtYWtlTGluZUJldHdlZW5TaGFwZXMoc2VsZiwgaW5sZXQpKeUsAAAAAAAA5SwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAIy0AAAAAAADmLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1415,
					1,
					"left_delete",
					null,
					"AQAAAA4tAAAAAAAADi0AAAAAAAAWAAAAbWFrZUxpbmVCZXR3ZWVuU2hhcGVzKA",
					"AQAAAAAAAAABAAAADi0AAAAAAAAkLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1418,
					1,
					"left_delete",
					null,
					"AQAAACUtAAAAAAAAJS0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAJi0AAAAAAAAmLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1427,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BQAAAAYtAAAAAAAABy0AAAAAAAAAAAAABy0AAAAAAAAHLQAAAAAAAAcAAABzZXRMaW5lBy0AAAAAAAAILQAAAAAAAAAAAAAILQAAAAAAAAktAAAAAAAAAAAAAAktAAAAAAAACi0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABi0AAAAAAAANLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1428,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAACi0AAAAAAAAKLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1432,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAEiwAAAAAAAASLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1442,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BQAAAPsxAAAAAAAA/DEAAAAAAAAAAAAA/DEAAAAAAAD8MQAAAAAAAB0AAABzZXRMaW5lKG1ha2VMaW5lQmV0d2VlblNoYXBlc/wxAAAAAAAA/TEAAAAAAAAAAAAA/TEAAAAAAAD+MQAAAAAAAAAAAAD+MQAAAAAAAP8xAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGDIAAAAAAAD7MQAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BQAAAC8yAAAAAAAAMDIAAAAAAAAAAAAAMDIAAAAAAAAwMgAAAAAAAB0AAABzZXRMaW5lKG1ha2VMaW5lQmV0d2VlblNoYXBlczAyAAAAAAAAMTIAAAAAAAAAAAAAMTIAAAAAAAAyMgAAAAAAAAAAAAAyMgAAAAAAADMyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATDIAAAAAAAAvMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1451,
					1,
					"left_delete",
					null,
					"AQAAAA0yAAAAAAAADTIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAADjIAAAAAAAAOMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1454,
					1,
					"right_delete",
					null,
					"AQAAAEoyAAAAAAAASjIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAASjIAAAAAAABKMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1464,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAZz8AAAAAAABnPwAAIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgVGhlIE5ldHdvcmsgU2NlbmUgIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMKIyBBICdWaWV3JyB0byByZXByZXNlbnQgYSBuZXR3b3JrIG9mIG5vZGVzLCBjb25uZWN0ZWQgYnkgaW5sZXRzIGFuZCBvdXRsZXRzCiMKCiMgSW4gUVQgTW9kZWxWaWV3IHRlcm1pbm9sb2d5IHRoaXMgaXMgYSAnVmlldycuCiMgSXQgaXMgcmVzcG9uc2libGUgdG8gcHJlc2VudCAoYW5kIHBvdGVudGlhbGx5IGVkaXQpIHRoZSBOWEdyYXBoTW9kZWwKIyBHcmFwaFNjZW5lICdpbnRlcm5hbHknIHVzZXMgc3ViY2xhc3NlcyBvZiBHcmFwaFNoYXBlcyB0aGF0IGFyZSBhbHNvICd2aWV3cycuCiMgdGhlc2Ugd2lkZ2V0cyBhcmUgcmVzcG9uc2libGUgdG8gcmVmZXJlbmNlIHRoZSBncmFwaHNjZW5lLAojIGFuZCB0aGUgcmVwcmVzZW50ZWQgbm9kZXMsIGVkZ2UgYW5kIHBvcnRzLgojCiMgVE9ETzogbW92ZSB0aGUgbW9kZWwgZWRpdGluZyBjYXBhYmlsaXRpZXMKIyBmcm9tIHRoZSB3aWRnZXRzIHRvIGEgZGVsZWdhdGUsIG9yIHRoZSBncmFwaHNlbmUgaXRzZWxmCgoKZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKCkNvbm5lY3Rpb25FbnRlclR5cGUgPSBRRXZlbnQuVHlwZShRRXZlbnQucmVnaXN0ZXJFdmVudFR5cGUoKSkKQ29ubmVjdGlvbkxlYXZlVHlwZSA9IFFFdmVudC5UeXBlKFFFdmVudC5yZWdpc3RlckV2ZW50VHlwZSgpKQpDb25uZWN0aW9uTW92ZVR5cGUgPSBRRXZlbnQuVHlwZShRRXZlbnQucmVnaXN0ZXJFdmVudFR5cGUoKSkKQ29ubmVjdGlvbkRyb3BUeXBlID0gUUV2ZW50LlR5cGUoUUV2ZW50LnJlZ2lzdGVyRXZlbnRUeXBlKCkpCgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IG5ldHdvcmt4IGFzIG54CgoKIyMjIyMjIyMjIyMjIyMjIyMjCiMgR1JBUEhJQ1MgSVRFTVMgIwojIyMjIyMjIyMjIyMjIyMjIyMKCmZyb20gcHlsaXZlLk5ldHdvcmtYR3JhcGhFZGl0b3IubnhfZ3JhcGhfc2hhcGVzIGltcG9ydCAoCiAgICBOb2RlU2hhcGUsCiAgICBMaW5rU2hhcGUsCiAgICBQb3J0U2hhcGUsCikKCgojIyMjIyMjIyMjIyMjIwojIEdSQVBIU0NFTkUgIwojIyMjIyMjIyMjIyMjIwoKZnJvbSBweWxpdmUuTmV0d29ya1hHcmFwaEVkaXRvci5ueF9ncmFwaF9tb2RlbCBpbXBvcnQgTlhHcmFwaE1vZGVsCgpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKCnR5cGUgTm9kZUlkID0gSGFzaGFibGUKCgpAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQpjbGFzcyBPdXRsZXRJZDoKICAgIG5vZGVJZDogTm9kZUlkCiAgICBuYW1lOiBzdHIKCgpAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQpjbGFzcyBJbmxldElkOgogICAgbm9kZUlkOiBOb2RlSWQKICAgIG5hbWU6IHN0cgoKCnR5cGUgTGlua0lkID0gdHVwbGVbTm9kZUlkLCBOb2RlSWQsIHR1cGxlW3N0ciwgc3RyXV0KCgpjbGFzcyBOWEdyYXBoU2NlbmUoUUdyYXBoaWNzU2NlbmUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG1vZGVsOiBOWEdyYXBoTW9kZWwpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQogICAgICAgIHNlbGYuX21vZGVsID0gbW9kZWwKICAgICAgICBzZWxmLl9ub2RlX2dyYXBoaWNzX29iamVjdHM6IGRpY3RbTm9kZUlkLCBOb2RlR3JhcGhpY3NPYmplY3RdID0gZGljdCgpCiAgICAgICAgc2VsZi5faW5sZXRfZ3JhcGhpY3Nfb2JqZWN0czogZGljdFsKICAgICAgICAgICAgSW5sZXRJZCwgSW5sZXRHcmFwaGljc09iamVjdAogICAgICAgIF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl9vdXRsZXRfZ3JhcGhpY3Nfb2JqZWN0czogZGljdFsKICAgICAgICAgICAgT3V0bGV0SWQsIE91dGxldEdyYXBoaWNzT2JqZWN0CiAgICAgICAgXSA9IGRpY3QoKQogICAgICAgIHNlbGYuX2xpbmtfZ3JhcGhpY3Nfb2JqZWN0czogZGljdFtMaW5rSWQsIExpbmtHcmFwaGljc09iamVjdF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl9kcmFmdF9saW5rOiBMaW5rR3JhcGhpY3NPYmplY3QgfCBOb25lID0gTm9uZQoKICAgICAgICBzZWxmLnNldEl0ZW1JbmRleE1ldGhvZChRR3JhcGhpY3NTY2VuZS5JdGVtSW5kZXhNZXRob2QuTm9JbmRleCkKCiAgICAgICAgc2VsZi5fbW9kZWwubm9kZXNBZGRlZC5jb25uZWN0KAogICAgICAgICAgICBsYW1iZGEgbm9kZXM6IFtzZWxmLm9uTm9kZUNyZWF0ZWQobikgZm9yIG4gaW4gbm9kZXNdCiAgICAgICAgKQogICAgICAgIHNlbGYuX21vZGVsLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5jb25uZWN0KAogICAgICAgICAgICBsYW1iZGEgbm9kZXM6IFtzZWxmLm9uTm9kZURlbGV0ZWQobikgZm9yIG4gaW4gbm9kZXNdCiAgICAgICAgKQogICAgICAgIHNlbGYuX21vZGVsLmVkZ2VzQWRkZWQuY29ubmVjdCgKICAgICAgICAgICAgbGFtYmRhIGVkZ2VzOiBbc2VsZi5vbkxpbmtDcmVhdGVkKGUpIGZvciBlIGluIGVkZ2VzXQogICAgICAgICkKICAgICAgICBzZWxmLl9tb2RlbC5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuY29ubmVjdCgKICAgICAgICAgICAgbGFtYmRhIGVkZ2VzOiBbc2VsZi5vbkxpbmtEZWxldGVkKGUpIGZvciBlIGluIGVkZ2VzXQogICAgICAgICkKCiAgICAgICAgc2VsZi50cmF2ZXJzZUdyYXBoQW5kUG9wdWxhdGVHcmFwaGljc09iamVjdHMoKQogICAgICAgIHNlbGYuZHJhZnQ6IExpbmtTaGFwZSB8IE5vbmUgPSBOb25lICAjIHRvZG8gdXNlIHRoZSB3aWRnZXQgaXRzZWxmCiAgICAgICAgc2VsZi5sYXlvdXQoKQoKICAgIGRlZiB0cmF2ZXJzZUdyYXBoQW5kUG9wdWxhdGVHcmFwaGljc09iamVjdHMoc2VsZik6CiAgICAgICAgYWxsTm9kZUlkczogbGlzdFtOb2RlSWRdID0gc2VsZi5fbW9kZWwubm9kZXMoKQoKICAgICAgICAjIEZpcnN0IGNyZWF0ZSBhbGwgdGhlIG5vZGVzLgogICAgICAgIGZvciBub2RlSWQgaW4gYWxsTm9kZUlkczoKICAgICAgICAgICAgc2VsZi5vbk5vZGVDcmVhdGVkKG5vZGVJZCkKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5fbW9kZWwuZWRnZXMoKToKICAgICAgICAgICAgdSwgdiwgKG8sIGkpID0gZQogICAgICAgICAgICBhc3NlcnQgdSBpbiBzZWxmLl9ub2RlX2dyYXBoaWNzX29iamVjdHMKICAgICAgICAgICAgYXNzZXJ0IHYgaW4gc2VsZi5fbm9kZV9ncmFwaGljc19vYmplY3RzCiAgICAgICAgICAgIGFzc2VydCAoCiAgICAgICAgICAgICAgICBPdXRsZXRJZCh1LCBvKSBpbiBzZWxmLl9vdXRsZXRfZ3JhcGhpY3Nfb2JqZWN0cwogICAgICAgICAgICApLCBmIk5vZGUgJ3t1fScgaGFzIG5vIG91dGxldCAne299JyEiCiAgICAgICAgICAgIGFzc2VydCAoCiAgICAgICAgICAgICAgICBJbmxldElkKHYsIGkpIGluIHNlbGYuX2lubGV0X2dyYXBoaWNzX29iamVjdHMKICAgICAgICAgICAgKSwgZiJOb2RlICd7dn0nIGhhcyBubyBpbmxldCAne2l9JyEiCgogICAgICAgICAgICBsaW5rID0gTGlua0dyYXBoaWNzT2JqZWN0KCh1LCB2LCAobywgaSkpKQogICAgICAgICAgICBzZWxmLl9saW5rX2dyYXBoaWNzX29iamVjdHNbKHUsIHYsIChvLCBpKSldID0gbGluawogICAgICAgICAgICBzZWxmLmFkZEl0ZW0obGluaykKCiAgICAgICAgICAgIGxpbmsubW92ZSgKICAgICAgICAgICAgICAgIHNlbGYub3V0bGV0R3JhcGhpY3NPYmplY3QoT3V0bGV0SWQodSwgbykpLAogICAgICAgICAgICAgICAgc2VsZi5pbmxldEdyYXBoaWNzT2JqZWN0KElubGV0SWQodiwgaSkpLAogICAgICAgICAgICApCgogICAgZGVmIGxpbmtHcmFwaGljc09iamVjdChzZWxmLCBlOiBMaW5rSWQpIC0+ICJMaW5rR3JhcGhpY3NPYmplY3QiOgogICAgICAgIHJldHVybiBzZWxmLl9saW5rX2dyYXBoaWNzX29iamVjdHNbZV0KCiAgICBkZWYgbm9kZUdyYXBoaWNzT2JqZWN0KHNlbGYsIG46IE5vZGVJZCkgLT4gIk5vZGVHcmFwaGljc09iamVjdCI6CiAgICAgICAgcmV0dXJuIHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0c1tuXQoKICAgIGRlZiBpbmxldEdyYXBoaWNzT2JqZWN0KHNlbGYsIGk6IElubGV0SWQpIC0+ICJJbmxldEdyYXBoaWNzT2JqZWN0IjoKICAgICAgICByZXR1cm4gc2VsZi5faW5sZXRfZ3JhcGhpY3Nfb2JqZWN0c1tpXQoKICAgIGRlZiBvdXRsZXRHcmFwaGljc09iamVjdChzZWxmLCBvOiBPdXRsZXRJZCkgLT4gIk91dGxldEdyYXBoaWNzT2JqZWN0IjoKICAgICAgICByZXR1cm4gc2VsZi5fb3V0bGV0X2dyYXBoaWNzX29iamVjdHNbb10KCiAgICBkZWYgdXBkYXRlQXR0YWNoZWROb2RlcyhzZWxmLCBlOiBMaW5rSWQsIGtpbmQ6IExpdGVyYWxbImluIiwgIm91dCJdKToKICAgICAgICB1LCB2LCBrID0gZQogICAgICAgIG1hdGNoIGtpbmQ6CiAgICAgICAgICAgIGNhc2UgImluIjoKICAgICAgICAgICAgICAgIGlmIG5vZGUgOj0gc2VsZi5fbm9kZV9ncmFwaGljc19vYmplY3RzLmdldCh1LCBOb25lKToKICAgICAgICAgICAgICAgICAgICBub2RlLnVwZGF0ZSgpCiAgICAgICAgICAgIGNhc2UgIm91dCI6CiAgICAgICAgICAgICAgICBpZiBub2RlIDo9IHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0cy5nZXQodiwgTm9uZSk6CiAgICAgICAgICAgICAgICAgICAgbm9kZS51cGRhdGUoKQoKICAgIGRlZiBpc0xpbmtlZChzZWxmLCBwb3J0OiBJbmxldElkIHwgT3V0bGV0SWQpIC0+IGJvb2w6CiAgICAgICAgbWF0Y2ggcG9ydDoKICAgICAgICAgICAgY2FzZSBJbmxldElkKCk6CiAgICAgICAgICAgICAgICBmb3IgdSwgdiwgKG8sIGkpIGluIHNlbGYuX21vZGVsLmluRWRnZXMocG9ydC5ub2RlSWQpOgogICAgICAgICAgICAgICAgICAgIGlmIGkgPT0gcG9ydC5uYW1lOgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBjYXNlIE91dGxldElkKCk6CiAgICAgICAgICAgICAgICBmb3IgdSwgdiwgKG8sIGkpIGluIHNlbGYuX21vZGVsLm91dEVkZ2VzKHBvcnQubm9kZUlkKToKICAgICAgICAgICAgICAgICAgICBpZiBvID09IHBvcnQubmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIyMgSGFuZGxlIE1vZGVsIFNpZ25hbHMgPj4+CiAgICBkZWYgb25MaW5rRGVsZXRlZChzZWxmLCBlOiBMaW5rSWQpOgogICAgICAgIHNlbGYucmVtb3ZlSXRlbShzZWxmLmxpbmtHcmFwaGljc09iamVjdChlKSkKICAgICAgICBpZiBlIGluIHNlbGYuX2xpbmtfZ3JhcGhpY3Nfb2JqZWN0czoKICAgICAgICAgICAgZGVsIHNlbGYuX2xpbmtfZ3JhcGhpY3Nfb2JqZWN0c1tlXQoKICAgICAgICBzZWxmLnVwZGF0ZUF0dGFjaGVkTm9kZXMoZSwgImluIikKICAgICAgICBzZWxmLnVwZGF0ZUF0dGFjaGVkTm9kZXMoZSwgIm91dCIpCgogICAgZGVmIG9uTGlua0NyZWF0ZWQoc2VsZiwgZTogTGlua0lkKToKICAgICAgICBsaW5rID0gTGlua0dyYXBoaWNzT2JqZWN0KGUpCiAgICAgICAgc2VsZi5fbGlua19ncmFwaGljc19vYmplY3RzW2VdID0gbGluawogICAgICAgIHNlbGYuYWRkSXRlbShzZWxmLmxpbmtHcmFwaGljc09iamVjdChlKSkKICAgICAgICBzZWxmLnVwZGF0ZUF0dGFjaGVkTm9kZXMoZSwgImluIikKICAgICAgICBzZWxmLnVwZGF0ZUF0dGFjaGVkTm9kZXMoZSwgIm91dCIpCgogICAgICAgIHUsIHYsIChvLCBpKSA9IGUKICAgICAgICBsaW5rLm1vdmUoCiAgICAgICAgICAgIHNlbGYub3V0bGV0R3JhcGhpY3NPYmplY3QoT3V0bGV0SWQodSwgbykpLAogICAgICAgICAgICBzZWxmLmlubGV0R3JhcGhpY3NPYmplY3QoSW5sZXRJZCh2LCBpKSksCiAgICAgICAgKQoKICAgIGRlZiBtYWtlRHJhZnRMaW5rKHNlbGYpOgogICAgICAgIHNlbGYuZHJhZnQgPSBMaW5rU2hhcGUoKQogICAgICAgIHNlbGYuZHJhZnQuc2V0QWNjZXB0ZWRNb3VzZUJ1dHRvbnMoUXQuTW91c2VCdXR0b24uTm9CdXR0b24pCiAgICAgICAgc2VsZi5kcmFmdC5zZXRBY2NlcHRIb3ZlckV2ZW50cyhGYWxzZSkKICAgICAgICBzZWxmLmRyYWZ0LnNldEVuYWJsZWQoRmFsc2UpCiAgICAgICAgc2VsZi5kcmFmdC5zZXRBY3RpdmUoRmFsc2UpCiAgICAgICAgc2VsZi5hZGRJdGVtKHNlbGYuZHJhZnQpCgogICAgZGVmIHJlc2V0RHJhZnRMaW5rKHNlbGYpOgogICAgICAgIGFzc2VydCBzZWxmLmRyYWZ0IGlzIG5vdCBOb25lCiAgICAgICAgc2VsZi5yZW1vdmVJdGVtKHNlbGYuZHJhZnQpCiAgICAgICAgc2VsZi5kcmFmdCA9IE5vbmUKCiAgICBkZWYgb25Ob2RlQ3JlYXRlZChzZWxmLCBuOiBOb2RlSWQpOgogICAgICAgIGlubGV0X25hbWVzID0gKAogICAgICAgICAgICBzZWxmLl9tb2RlbC5nZXROb2RlUHJvcGVydHkobiwgImlubGV0cyIpCiAgICAgICAgICAgIGlmIHNlbGYuX21vZGVsLmhhc05vZGVQcm9wZXJ0eShuLCAiaW5sZXRzIikKICAgICAgICAgICAgZWxzZSBbXQogICAgICAgICkKCiAgICAgICAgaW5sZXRzID0gW10KICAgICAgICBpZiBzZWxmLl9tb2RlbC5oYXNOb2RlUHJvcGVydHkobiwgImlubGV0cyIpOgogICAgICAgICAgICBpbmxldE5hbWVzID0gc2VsZi5fbW9kZWwuZ2V0Tm9kZVByb3BlcnR5KG4sICJpbmxldHMiKQogICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShpbmxldE5hbWVzLCBsaXN0KSBhbmQgYWxsKAogICAgICAgICAgICAgICAgaXNpbnN0YW5jZShfLCBzdHIpIGZvciBfIGluIGlubGV0TmFtZXMKICAgICAgICAgICAgKQogICAgICAgICAgICBmb3IgaW5sZXROYW1lIGluIGlubGV0TmFtZXM6CiAgICAgICAgICAgICAgICBpbmxldF9ncmFwaGljc19vYmplY3QgPSBJbmxldEdyYXBoaWNzT2JqZWN0KAogICAgICAgICAgICAgICAgICAgIElubGV0SWQobiwgaW5sZXROYW1lKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgc2VsZi5faW5sZXRfZ3JhcGhpY3Nfb2JqZWN0c1sKICAgICAgICAgICAgICAgICAgICBJbmxldElkKG4sIGlubGV0TmFtZSkKICAgICAgICAgICAgICAgIF0gPSBpbmxldF9ncmFwaGljc19vYmplY3QKICAgICAgICAgICAgICAgIGlubGV0cy5hcHBlbmQoaW5sZXRfZ3JhcGhpY3Nfb2JqZWN0KQoKICAgICAgICBvdXRsZXRzID0gW10KICAgICAgICBpZiBzZWxmLl9tb2RlbC5oYXNOb2RlUHJvcGVydHkobiwgIm91dGxldHMiKToKICAgICAgICAgICAgb3V0bGV0TmFtZXMgPSBzZWxmLl9tb2RlbC5nZXROb2RlUHJvcGVydHkobiwgIm91dGxldHMiKQogICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShvdXRsZXROYW1lcywgbGlzdCkgYW5kIGFsbCgKICAgICAgICAgICAgICAgIGlzaW5zdGFuY2UoXywgc3RyKSBmb3IgXyBpbiBvdXRsZXROYW1lcwogICAgICAgICAgICApCiAgICAgICAgICAgIGZvciBvdXRsZXROYW1lIGluIG91dGxldE5hbWVzOgogICAgICAgICAgICAgICAgb3V0bGV0X2dyYXBoaWNzX29iamVjdCA9IE91dGxldEdyYXBoaWNzT2JqZWN0KAogICAgICAgICAgICAgICAgICAgIE91dGxldElkKG4sIG91dGxldE5hbWUpCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBzZWxmLl9vdXRsZXRfZ3JhcGhpY3Nfb2JqZWN0c1sKICAgICAgICAgICAgICAgICAgICBPdXRsZXRJZChuLCBvdXRsZXROYW1lKQogICAgICAgICAgICAgICAgXSA9IG91dGxldF9ncmFwaGljc19vYmplY3QKICAgICAgICAgICAgICAgIG91dGxldHMuYXBwZW5kKG91dGxldF9ncmFwaGljc19vYmplY3QpCgogICAgICAgIHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0c1tuXSA9IE5vZGVHcmFwaGljc09iamVjdCgKICAgICAgICAgICAgbiwgaW5sZXRzPWlubGV0cywgb3V0bGV0cz1vdXRsZXRzCiAgICAgICAgKQoKICAgICAgICBzZWxmLmFkZEl0ZW0oc2VsZi5ub2RlR3JhcGhpY3NPYmplY3QobikpCgogICAgZGVmIG9uTm9kZURlbGV0ZWQoc2VsZiwgbjogTm9kZUlkKToKICAgICAgICBpZiBuIGluIHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0czoKICAgICAgICAgICAgbm9kZV9ncmFwaGljc19vYmplY3QgPSBzZWxmLl9ub2RlX2dyYXBoaWNzX29iamVjdHNbbl0KICAgICAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigpCgogICAgZGVmIG9uTW9kZWxSZXNldChzZWxmKToKICAgICAgICBzZWxmLl9saW5rX2dyYXBoaWNzX29iamVjdHMuY2xlYXIoKQogICAgICAgIHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0cy5jbGVhcigpCiAgICAgICAgc2VsZi5jbGVhcigpCgogICAgICAgIHNlbGYudHJhdmVyc2VHcmFwaEFuZFBvcHVsYXRlR3JhcGhpY3NPYmplY3RzKCkKCiAgICAjIyMgPDw8IEhhbmRsZSBNb2RlbCBTaWduYWxzCiAgICBkZWYgX2ZpbmRHcmFwaEl0ZW1BdChzZWxmLCBrbGFzcywgcG9zaXRpb246IFFQb2ludEYpOgogICAgICAgICMgZmluZCBvdXRsZXQgdW5kZXIgbW91c2UKICAgICAgICBmb3IgaXRlbSBpbiBzZWxmLml0ZW1zKHBvc2l0aW9uLCBkZXZpY2VUcmFuc2Zvcm09UVRyYW5zZm9ybSgpKToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVtLCBrbGFzcyk6CiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbQoKICAgIGRlZiBvdXRsZXRBdChzZWxmLCBwb3NpdGlvbjogUVBvaW50RikgLT4gIk91dGxldEdyYXBoaWNzT2JqZWN0IjoKICAgICAgICByZXR1cm4gY2FzdCgKICAgICAgICAgICAgT3V0bGV0R3JhcGhpY3NPYmplY3QsCiAgICAgICAgICAgIHNlbGYuX2ZpbmRHcmFwaEl0ZW1BdChPdXRsZXRHcmFwaGljc09iamVjdCwgcG9zaXRpb24pLAogICAgICAgICkKCiAgICBkZWYgaW5sZXRBdChzZWxmLCBwb3NpdGlvbjogUVBvaW50RikgLT4gIklubGV0R3JhcGhpY3NPYmplY3QiOgogICAgICAgIHJldHVybiBjYXN0KAogICAgICAgICAgICBJbmxldEdyYXBoaWNzT2JqZWN0LAogICAgICAgICAgICBzZWxmLl9maW5kR3JhcGhJdGVtQXQoSW5sZXRHcmFwaGljc09iamVjdCwgcG9zaXRpb24pLAogICAgICAgICkKCiAgICBkZWYgbm9kZUF0KHNlbGYsIHBvc2l0aW9uOiBRUG9pbnRGKSAtPiAiTm9kZUdyYXBoaWNzT2JqZWN0IjoKICAgICAgICByZXR1cm4gY2FzdCgKICAgICAgICAgICAgTm9kZUdyYXBoaWNzT2JqZWN0LAogICAgICAgICAgICBzZWxmLl9maW5kR3JhcGhJdGVtQXQoTm9kZUdyYXBoaWNzT2JqZWN0LCBwb3NpdGlvbiksCiAgICAgICAgKQoKICAgIGRlZiBsaW5rQXQoc2VsZiwgcG9zaXRpb246IFFQb2ludEYpIC0+ICJMaW5rR3JhcGhpY3NPYmplY3QiOgogICAgICAgIHJldHVybiBjYXN0KAogICAgICAgICAgICBMaW5rR3JhcGhpY3NPYmplY3QsCiAgICAgICAgICAgIHNlbGYuX2ZpbmRHcmFwaEl0ZW1BdChMaW5rR3JhcGhpY3NPYmplY3QsIHBvc2l0aW9uKSwKICAgICAgICApCgogICAgZGVmIGxheW91dChzZWxmKToKICAgICAgICBkZWYgaGllYXJjaGljYWxfbGF5b3V0X3dpdGhfZ3JhbmRhbGYoRywgc2NhbGU9MSk6CiAgICAgICAgICAgIGltcG9ydCBncmFuZGFsZgogICAgICAgICAgICBmcm9tIGdyYW5kYWxmLmxheW91dHMgaW1wb3J0IFN1Z2l5YW1hTGF5b3V0CgogICAgICAgICAgICBnID0gZ3JhbmRhbGYudXRpbHMuY29udmVydF9uZXh0d29ya3hfZ3JhcGhfdG9fZ3JhbmRhbGYoRykKCiAgICAgICAgICAgIGNsYXNzIGRlZmF1bHR2aWV3KG9iamVjdCk6ICAjIHNlZSBSRUFETUUgb2YgZ3JhbmRhbGYncyBnaXRodWIKICAgICAgICAgICAgICAgIHcsIGggPSBzY2FsZSwgc2NhbGUKCiAgICAgICAgICAgIGZvciB2IGluIGcuQ1swXS5zVjoKICAgICAgICAgICAgICAgIHYudmlldyA9IGRlZmF1bHR2aWV3KCkKICAgICAgICAgICAgc3VnID0gU3VnaXlhbWFMYXlvdXQoZy5DWzBdKQogICAgICAgICAgICBzdWcuaW5pdF9hbGwoKSAgIyByb290cz1bVlswXV0pCiAgICAgICAgICAgIHN1Zy5kcmF3KCkKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHYuZGF0YTogKHYudmlldy54eVswXSwgdi52aWV3Lnh5WzFdKSBmb3IgdiBpbiBnLkNbMF0uc1YKICAgICAgICAgICAgfSAgIyBFeHRyYWN0cyB0aGUgcG9zaXRpb25zCgogICAgICAgIGRlZiBoaWVhcmNoaWNhbF9sYXlvdXRfd2l0aF9ueChHLCBzY2FsZT0xMDApOgogICAgICAgICAgICBmb3IgbGF5ZXIsIG5vZGVzIGluIGVudW1lcmF0ZSgKICAgICAgICAgICAgICAgIHJldmVyc2VkKHR1cGxlKG54LnRvcG9sb2dpY2FsX2dlbmVyYXRpb25zKEcpKSkKICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICMgYG11bHRpcGFydGl0ZV9sYXlvdXRgIGV4cGVjdHMgdGhlIGxheWVyIGFzIGEgbm9kZSBhdHRyaWJ1dGUsIHNvIGFkZCB0aGUKICAgICAgICAgICAgICAgICMgbnVtZXJpYyBsYXllciB2YWx1ZSBhcyBhIG5vZGUgYXR0cmlidXRlCiAgICAgICAgICAgICAgICBmb3Igbm9kZSBpbiBub2RlczoKICAgICAgICAgICAgICAgICAgICBHLm5vZGVzW25vZGVdWyJsYXllciJdID0gLWxheWVyCgogICAgICAgICAgICAjIENvbXB1dGUgdGhlIG11bHRpcGFydGl0ZV9sYXlvdXQgdXNpbmcgdGhlICJsYXllciIgbm9kZSBhdHRyaWJ1dGUKICAgICAgICAgICAgcG9zID0gbngubXVsdGlwYXJ0aXRlX2xheW91dCgKICAgICAgICAgICAgICAgIEcsIHN1YnNldF9rZXk9ImxheWVyIiwgYWxpZ249Imhvcml6b250YWwiCiAgICAgICAgICAgICkKICAgICAgICAgICAgZm9yIG4sIHAgaW4gcG9zLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBwb3Nbbl0gPSBwWzBdICogc2NhbGUsIHBbMV0gKiBzY2FsZQogICAgICAgICAgICByZXR1cm4gcG9zCgogICAgICAgIHBvcyA9IGhpZWFyY2hpY2FsX2xheW91dF93aXRoX254KHNlbGYuX21vZGVsLkcsIHNjYWxlPTEwMCkKICAgICAgICBmb3IgTiwgKHgsIHkpIGluIHBvcy5pdGVtcygpOgogICAgICAgICAgICB3aWRnZXQgPSBzZWxmLm5vZGVHcmFwaGljc09iamVjdChOKQogICAgICAgICAgICB3aWRnZXQuc2V0UG9zKHgsIHkpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgQWN0aXZlIEdyYXBoaWNzIE9iamVjdHMgIwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpjbGFzcyBPdXRsZXRHcmFwaGljc09iamVjdChQb3J0U2hhcGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG86IE91dGxldElkKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGxhYmVsPWYie28ubmFtZX0iKQogICAgICAgIHNlbGYuX28gPSBvCgogICAgZGVmIGdyYXBoc2NlbmUoc2VsZikgLT4gIk5YR3JhcGhTY2VuZSI6CiAgICAgICAgcmV0dXJuIGNhc3QoTlhHcmFwaFNjZW5lLCBzZWxmLnNjZW5lKCkpCgogICAgZGVmIG1vdXNlUHJlc3NFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLm1ha2VEcmFmdExpbmsoKQogICAgICAgIHNlbGYuZ3JhYk1vdXNlKCkKCiAgICBkZWYgbW91c2VNb3ZlRXZlbnQoc2VsZiwgZXZlbnQ6IFFHcmFwaGljc1NjZW5lTW91c2VFdmVudCkgLT4gTm9uZToKICAgICAgICBkcmFmdCA9IHNlbGYuZ3JhcGhzY2VuZSgpLmRyYWZ0CiAgICAgICAgYXNzZXJ0IGRyYWZ0IGlzIG5vdCBOb25lCgogICAgICAgIGlmIGlubGV0IDo9IHNlbGYuZ3JhcGhzY2VuZSgpLmlubGV0QXQoZXZlbnQuc2NlbmVQb3MoKSk6CiAgICAgICAgICAgIGRyYWZ0Lm1vdmUoc2VsZiwgaW5sZXQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZHJhZnQubW92ZShzZWxmLCBldmVudC5zY2VuZVBvcygpKQogICAgICAgIHJldHVybiBzdXBlcigpLm1vdXNlTW92ZUV2ZW50KGV2ZW50KQoKICAgIGRlZiBtb3VzZVJlbGVhc2VFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYudW5ncmFiTW91c2UoKQogICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLnJlc2V0RHJhZnRMaW5rKCkKCiAgICAgICAgaWYgaW5sZXQgOj0gc2VsZi5ncmFwaHNjZW5lKCkuaW5sZXRBdChldmVudC5zY2VuZVBvcygpKToKICAgICAgICAgICAgc2NlbmUgPSBzZWxmLmdyYXBoc2NlbmUoKQogICAgICAgICAgICBzY2VuZS5fbW9kZWwuYWRkRWRnZSgKICAgICAgICAgICAgICAgIHNlbGYuX28ubm9kZUlkLCBpbmxldC5faS5ub2RlSWQsIChzZWxmLl9vLm5hbWUsIGlubGV0Ll9pLm5hbWUpCiAgICAgICAgICAgICkKCiAgICAgICAgcmV0dXJuIHN1cGVyKCkubW91c2VSZWxlYXNlRXZlbnQoZXZlbnQpCgogICAgZGVmIGJydXNoKHNlbGYpOgogICAgICAgIGJydXNoID0gc3VwZXIoKS5icnVzaCgpCiAgICAgICAgaWYgc2VsZi5ncmFwaHNjZW5lKCkuaXNMaW5rZWQoc2VsZi5fbyk6CiAgICAgICAgICAgIGJydXNoID0gc2VsZi5wYWxldHRlKCkudGV4dCgpCgogICAgICAgIHJldHVybiBicnVzaAoKCmNsYXNzIElubGV0R3JhcGhpY3NPYmplY3QoUG9ydFNoYXBlKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpOiBJbmxldElkKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGxhYmVsPWYie2kubmFtZX0iKQogICAgICAgIHNlbGYuX2kgPSBpCgogICAgZGVmIGdyYXBoc2NlbmUoc2VsZikgLT4gIk5YR3JhcGhTY2VuZSI6CiAgICAgICAgcmV0dXJuIGNhc3QoTlhHcmFwaFNjZW5lLCBzZWxmLnNjZW5lKCkpCgogICAgZGVmIG1vdXNlUHJlc3NFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLm1ha2VEcmFmdExpbmsoKQogICAgICAgIHNlbGYuZ3JhYk1vdXNlKCkKCiAgICBkZWYgbW91c2VNb3ZlRXZlbnQoc2VsZiwgZXZlbnQ6IFFHcmFwaGljc1NjZW5lTW91c2VFdmVudCkgLT4gTm9uZToKICAgICAgICBkcmFmdCA9IHNlbGYuZ3JhcGhzY2VuZSgpLmRyYWZ0CiAgICAgICAgYXNzZXJ0IGRyYWZ0IGlzIG5vdCBOb25lCgogICAgICAgIGlmIG91dGxldCA6PSBzZWxmLmdyYXBoc2NlbmUoKS5vdXRsZXRBdChldmVudC5zY2VuZVBvcygpKToKICAgICAgICAgICAgZHJhZnQubW92ZShvdXRsZXQsIHNlbGYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZHJhZnQubW92ZShldmVudC5zY2VuZVBvcygpLCBzZWxmKQogICAgICAgIHJldHVybiBzdXBlcigpLm1vdXNlTW92ZUV2ZW50KGV2ZW50KQoKICAgIGRlZiBtb3VzZVJlbGVhc2VFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KSAtPiBOb25lOgogICAgICAgIHNlbGYudW5ncmFiTW91c2UoKQogICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLnJlc2V0RHJhZnRMaW5rKCkKCiAgICAgICAgaWYgb3V0bGV0IDo9IHNlbGYuZ3JhcGhzY2VuZSgpLm91dGxldEF0KGV2ZW50LnNjZW5lUG9zKCkpOgogICAgICAgICAgICBzZWxmLmdyYXBoc2NlbmUoKS5fbW9kZWwuYWRkRWRnZSgKICAgICAgICAgICAgICAgIG91dGxldC5fby5ub2RlSWQsIHNlbGYuX2kubm9kZUlkLCAob3V0bGV0Ll9vLm5hbWUsIHNlbGYuX2kubmFtZSkKICAgICAgICAgICAgKQoKICAgICAgICByZXR1cm4gc3VwZXIoKS5tb3VzZVJlbGVhc2VFdmVudChldmVudCkKCiAgICBkZWYgYnJ1c2goc2VsZik6CiAgICAgICAgYnJ1c2ggPSBzdXBlcigpLmJydXNoKCkKICAgICAgICBpZiBzZWxmLmdyYXBoc2NlbmUoKS5pc0xpbmtlZChzZWxmLl9pKToKICAgICAgICAgICAgYnJ1c2ggPSBzZWxmLnBhbGV0dGUoKS50ZXh0KCkKCiAgICAgICAgcmV0dXJuIGJydXNoCgoKY2xhc3MgTm9kZUdyYXBoaWNzT2JqZWN0KE5vZGVTaGFwZSk6CiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBuOiBOb2RlSWQsCiAgICAgICAgaW5sZXRzOiBsaXN0W0lubGV0R3JhcGhpY3NPYmplY3RdLAogICAgICAgIG91dGxldHM6IGxpc3RbT3V0bGV0R3JhcGhpY3NPYmplY3RdLAogICAgICAgIHBhcmVudDogUUdyYXBoaWNzSXRlbSB8IE5vbmUgPSBOb25lLAogICAgKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKAogICAgICAgICAgICB0aXRsZT1mIid7bn0nIiwKICAgICAgICAgICAgaW5sZXRzPWlubGV0cywKICAgICAgICAgICAgb3V0bGV0cz1vdXRsZXRzLAogICAgICAgICAgICBwYXJlbnQ9cGFyZW50LAogICAgICAgICkKICAgICAgICBzZWxmLl9uID0gbgogICAgICAgIHNlbGYuc2V0QWNjZXB0SG92ZXJFdmVudHMoRmFsc2UpCgogICAgZGVmIGl0ZW1DaGFuZ2UoCiAgICAgICAgc2VsZiwgY2hhbmdlOiBRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUNoYW5nZSwgdmFsdWU6IEFueQogICAgKSAtPiBBbnk6CiAgICAgICAgaWYgKAogICAgICAgICAgICBjaGFuZ2UKICAgICAgICAgICAgPT0gUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1DaGFuZ2UuSXRlbVNjZW5lUG9zaXRpb25IYXNDaGFuZ2VkCiAgICAgICAgKToKICAgICAgICAgICAgc2VsZi5tb3ZlTGlua3MoKQogICAgICAgIHJldHVybiBzdXBlcigpLml0ZW1DaGFuZ2UoY2hhbmdlLCB2YWx1ZSkKCiAgICBkZWYgZ3JhcGhzY2VuZShzZWxmKSAtPiAiTlhHcmFwaFNjZW5lIjoKICAgICAgICByZXR1cm4gY2FzdChOWEdyYXBoU2NlbmUsIHNlbGYuc2NlbmUoKSkKCiAgICBkZWYgbW92ZUxpbmtzKHNlbGYpOgogICAgICAgICIiInJlc3BvbnNpYmxlIHRvIHVwZGF0ZSBjb25uZWN0ZWQgbGluayBwb3NpdGlvbiIiIgogICAgICAgIG1vZGVsID0gc2VsZi5ncmFwaHNjZW5lKCkuX21vZGVsCiAgICAgICAgYWxsX2VkZ2VzID0gbW9kZWwuaW5FZGdlcyhzZWxmLl9uKSArIG1vZGVsLm91dEVkZ2VzKHNlbGYuX24pCiAgICAgICAgZm9yIGUgaW4gYWxsX2VkZ2VzOgogICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShlWzJdLCB0dXBsZSkgYW5kIGxlbihlWzJdKSA9PSAyCiAgICAgICAgICAgIHUsIHYsIChvLCBpKSA9IGUKICAgICAgICAgICAgc2VsZi5ncmFwaHNjZW5lKCkKICAgICAgICAgICAgb3V0bGV0ID0gc2VsZi5ncmFwaHNjZW5lKCkub3V0bGV0R3JhcGhpY3NPYmplY3QoT3V0bGV0SWQodSwgbykpCiAgICAgICAgICAgIGlubGV0ID0gc2VsZi5ncmFwaHNjZW5lKCkuaW5sZXRHcmFwaGljc09iamVjdChJbmxldElkKHYsIGkpKQogICAgICAgICAgICBlZGdlID0gc2VsZi5ncmFwaHNjZW5lKCkubGlua0dyYXBoaWNzT2JqZWN0KGUpCiAgICAgICAgICAgIGVkZ2UubW92ZShvdXRsZXQsIGlubGV0KQoKCmNsYXNzIExpbmtHcmFwaGljc09iamVjdChMaW5rU2hhcGUpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGU6IExpbmtJZCwgcGFyZW50OiBRR3JhcGhpY3NJdGVtIHwgTm9uZSA9IE5vbmUpOgogICAgICAgIHUsIHYsIChvLCBpKSA9IGUKICAgICAgICBzdXBlcigpLl9faW5pdF9fKGxhYmVsPWYie299LT57aX0iLCBwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuX2UgPSBlCiAgICAgICAgc2VsZi5zZXRaVmFsdWUoLTEpCgogICAgZGVmIGdyYXBoc2NlbmUoc2VsZikgLT4gIk5YR3JhcGhTY2VuZSI6CiAgICAgICAgcmV0dXJuIGNhc3QoTlhHcmFwaFNjZW5lLCBzZWxmLnNjZW5lKCkpCgogICAgZGVmIGJvdW5kaW5nUmVjdChzZWxmKSAtPiBRUmVjdEY6CiAgICAgICAgcmV0dXJuIHN1cGVyKCkuYm91bmRpbmdSZWN0KCkuYWRqdXN0ZWQoLTUwLCAtNTAsIDUwLCA1MCkKCgojIyMjIyMjIyMjIwojIEVYQU1QTEUgIwojIyMjIyMjIyMjIwppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgaW1wb3J0IHN5cwoKICAgIGFwcCA9IFFBcHBsaWNhdGlvbihzeXMuYXJndikKCiAgICAjIHNldHVwIG1haW4gd2luZG93CiAgICB2aWV3ID0gUUdyYXBoaWNzVmlldygpCiAgICB2aWV3LnNldFdpbmRvd1RpdGxlKCJOWEdyYXBoU2NlbmUiKQogICAgdmlldy5zZXRSZW5kZXJIaW50KFFQYWludGVyLlJlbmRlckhpbnQuQW50aWFsaWFzaW5nLCBUcnVlKQogICAgdmlldy5zZXRSZW5kZXJIaW50KFFQYWludGVyLlJlbmRlckhpbnQuVGV4dEFudGlhbGlhc2luZywgVHJ1ZSkKICAgIHZpZXcuc2V0UmVuZGVySGludChRUGFpbnRlci5SZW5kZXJIaW50LlNtb290aFBpeG1hcFRyYW5zZm9ybSwgVHJ1ZSkKCiAgICAjIGNyZWF0ZSBncmFwaCBzY2VuZQogICAgZ3JhcGggPSBOWEdyYXBoTW9kZWwoKQogICAgZ3JhcGguYWRkTm9kZSgiTjEiLCBvdXRsZXRzPVsib3V0Il0pCiAgICBncmFwaC5hZGROb2RlKCJOMiIsIGlubGV0cz1bImluIl0pCiAgICBncmFwaC5hZGROb2RlKCJOMyIsIGlubGV0cz1bImluIl0sIG91dGxldHM9WyJvdXQiXSkKICAgIGdyYXBoLmFkZEVkZ2UoIk4xIiwgIk4yIiwgKCJvdXQiLCAiaW4iKSkKICAgIGdyYXBoc2NlbmUgPSBOWEdyYXBoU2NlbmUoZ3JhcGgpCiAgICBncmFwaHNjZW5lLnNldFNjZW5lUmVjdChRUmVjdEYoLTQwMCwgLTQwMCwgODAwLCA4MDApKQogICAgdmlldy5zZXRTY2VuZShncmFwaHNjZW5lKQoKICAgICMgZ3JhcGhzY2VuZS5hZGRJdGVtKEdyYXBoaWNzVmVydGV4SXRlbSgiSFdFTExPIikpCgogICAgIyBzaG93IHdpbmRvdwogICAgdmlldy5zaG93KCkKICAgIHN5cy5leGl0KGFwcC5leGVjKCkpCg",
					"AQAAAAAAAAABAAAAAjMAAAAAAAAFMwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/NetworkXGraphEditor/nx_graph_model.py",
			"settings":
			{
				"buffer_size": 4437,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFALAAAAAAAAUQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAsAAAAAAABQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABTCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQsAAAAAAABRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ":Hash"
					},
					"BQAAAFMLAAAAAAAAVAsAAAAAAAAAAAAAVAsAAAAAAABVCwAAAAAAAAAAAABVCwAAAAAAAFYLAAAAAAAAAAAAAFYLAAAAAAAAVwsAAAAAAAAAAAAAVwsAAAAAAABYCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAFQLAAAAAAAAVAsAAAAAAAAEAAAASGFzaFQLAAAAAAAAXAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAsAAAAAAABYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "|None"
					},
					"BQAAAFwLAAAAAAAAXQsAAAAAAAAAAAAAXQsAAAAAAABeCwAAAAAAAAAAAABeCwAAAAAAAF8LAAAAAAAAAAAAAF8LAAAAAAAAYAsAAAAAAAAAAAAAYAsAAAAAAABhCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYLAAAAAAAAyAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgsAAAAAAADGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAMcLAAAAAAAAyAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwsAAAAAAADHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAehEAAAAAAABhEQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46SGFzaGFibGUsIG5hbWUsIC8pLT5ib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoc2VsZiwgbjpIYXNoYWJsZXxOb25lKSAtPiBsaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuZWRnZXMobildCgogICAgZGVmIGluRWRnZXMoc2VsZiwgbjogSGFzaGFibGUpIC0+IGxpc3RbdHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgICIiInJldHJ1biBpbmNvbWluZyBlZGdlcyB0byB0aGUgbm9kZSIiIgogICAgICAgIHJldHVybiBbKHUsIHYsIGspIGZvciB1LCB2LCBrIGluIHNlbGYuRy5pbl9lZGdlcyhuLCBrZXlzPVRydWUpXQoKICAgIGRlZiBvdXRFZGdlcygKICAgICAgICBzZWxmLCBuOiBIYXNoYWJsZQogICAgKSAtPiBsaXN0W3R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICAiIiJyZXRydW4gaW5jb21pbmcgZWRnZXMgdG8gdGhlIG5vZGUiIiIKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcub3V0X2VkZ2VzKG4sIGtleXM9VHJ1ZSldCgogICAgZGVmIGFkZEVkZ2UoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSB8IE5vbmUgPSBOb25lLCAvLCAqKnByb3BzCiAgICApIC0+IE5vbmU6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgaywgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgcmVtb3ZlRWRnZShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2LCBrKQogICAgICAgIHNlbGYuZWRnZXNSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHNldEVkZ2VQcm9wZXJ0aWVzKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIC8sICoqcHJvcHMKICAgICk6CiAgICAgICAgbnguc2V0X2VkZ2VfYXR0cmlidXRlcyhzZWxmLkcsIHsodSwgdiwgayk6IHByb3BzfSkKICAgICAgICBzZWxmLmVkZ2VzUHJvcGVydGllc0NoYW5nZWQuZW1pdChbKHUsIHYsIGspXSwgbGlzdChwcm9wcy5rZXlzKCkpKQoKICAgIGRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgcHJvcCwgLyk6CiAgICAgICAgcmV0dXJuIHNlbGYuRy5lZGdlc1t1LCB2LCBrXVtwcm9wXQoKICAgIGRlZiBpc0VkZ2VBbGxvd2VkKHNlbGYsIHU6SGFzaGFibGUsIHY6SGFzaGFibGUsIGs6SGFzaGFibGUpLT5ib29sOgogICAgICAgIGlmIHUgPT0gdjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUK",
					"AQAAAAAAAAABAAAAyAsAAAAAAADICwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "=None"
					},
					"BQAAAHALAAAAAAAAcQsAAAAAAAAAAAAAcQsAAAAAAAByCwAAAAAAAAAAAAByCwAAAAAAAHMLAAAAAAAAAAAAAHMLAAAAAAAAdAsAAAAAAAAAAAAAdAsAAAAAAAB1CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAsAAAAAAABwCwAAAAAAAAAAAAAAwG1A"
				],
				[
					65,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAgREAAAAAAAB/EQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKSAtPiBib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUgfCBOb25lPU5vbmUKICAgICkgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzKG4pXQoKICAgIGRlZiBpbkVkZ2VzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICAiIiJyZXRydW4gaW5jb21pbmcgZWRnZXMgdG8gdGhlIG5vZGUiIiIKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuaW5fZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgb3V0RWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUKICAgICkgLT4gbGlzdFt0dXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgIiIicmV0cnVuIGluY29taW5nIGVkZ2VzIHRvIHRoZSBub2RlIiIiCiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLm91dF9lZGdlcyhuLCBrZXlzPVRydWUpXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKSAtPiBOb25lOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgc2VsZi5HLmFkZF9lZGdlKHUsIHYsIGssICoqcHJvcHMpCiAgICAgICAgc2VsZi5lZGdlc0FkZGVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHJlbW92ZUVkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdiwgaykKICAgICAgICBzZWxmLmVkZ2VzUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcygKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCAvLCAqKnByb3BzCiAgICApOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYsIGspOiBwcm9wc30pCiAgICAgICAgc2VsZi5lZGdlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoWyh1LCB2LCBrKV0sIGxpc3QocHJvcHMua2V5cygpKSkKCiAgICBkZWYgZ2V0RWRnZVByb3BlcnR5KHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdiwga11bcHJvcF0KCiAgICBkZWYgaXNFZGdlQWxsb3dlZChzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlKSAtPiBib29sOgogICAgICAgIGlmIHUgPT0gdjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUK",
					"AQAAAAAAAAABAAAAdQsAAAAAAAB1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOMLAAAAAAAA5AsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wsAAAAAAADjCwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": " keys=T"
					},
					"BwAAAOQLAAAAAAAA5QsAAAAAAAAAAAAA5QsAAAAAAADmCwAAAAAAAAAAAADmCwAAAAAAAOcLAAAAAAAAAAAAAOcLAAAAAAAA6AsAAAAAAAAAAAAA6AsAAAAAAADpCwAAAAAAAAAAAADpCwAAAAAAAOoLAAAAAAAAAAAAAOoLAAAAAAAA6wsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AsAAAAAAADkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "rue"
					},
					"AwAAAOsLAAAAAAAA7AsAAAAAAAAAAAAA7AsAAAAAAADtCwAAAAAAAAAAAADtCwAAAAAAAO4LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wsAAAAAAADrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAjBEAAAAAAACMEQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKSAtPiBib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUgfCBOb25lID0gTm9uZQogICAgKSAtPiBsaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgaW5FZGdlcyhzZWxmLCBuOiBIYXNoYWJsZSkgLT4gbGlzdFt0dXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgIiIicmV0cnVuIGluY29taW5nIGVkZ2VzIHRvIHRoZSBub2RlIiIiCiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmluX2VkZ2VzKG4sIGtleXM9VHJ1ZSldCgogICAgZGVmIG91dEVkZ2VzKAogICAgICAgIHNlbGYsIG46IEhhc2hhYmxlCiAgICApIC0+IGxpc3RbdHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgICIiInJldHJ1biBpbmNvbWluZyBlZGdlcyB0byB0aGUgbm9kZSIiIgogICAgICAgIHJldHVybiBbKHUsIHYsIGspIGZvciB1LCB2LCBrIGluIHNlbGYuRy5vdXRfZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgYWRkRWRnZSgKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlIHwgTm9uZSA9IE5vbmUsIC8sICoqcHJvcHMKICAgICkgLT4gTm9uZToKICAgICAgICBpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh1KQogICAgICAgIGlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHYpCgogICAgICAgIHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrLCAqKnByb3BzKQogICAgICAgIHNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiByZW1vdmVFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUpOgogICAgICAgIHNlbGYuZWRnZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCiAgICAgICAgc2VsZi5HLnJlbW92ZV9lZGdlKHUsIHYsIGspCiAgICAgICAgc2VsZi5lZGdlc1JlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2LCBrKTogcHJvcHN9KQogICAgICAgIHNlbGYuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFsodSwgdiwgayldLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCBwcm9wLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLmVkZ2VzW3UsIHYsIGtdW3Byb3BdCgogICAgZGVmIGlzRWRnZUFsbG93ZWQoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSkgLT4gYm9vbDoKICAgICAgICBpZiB1ID09IHY6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiBUcnVlCg",
					"AQAAAAAAAAABAAAA7gsAAAAAAADuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BQAAAE8LAAAAAAAAUAsAAAAAAAAAAAAAUAsAAAAAAABQCwAAAAAAAC0AAAAKICAgICAgICBzZWxmLCBuOiBIYXNoYWJsZSB8IE5vbmUgPSBOb25lCiAgICBQCwAAAAAAAFELAAAAAAAAAAAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABTCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAsAAAAAAABPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"right_delete",
					null,
					"AQAAALgLAAAAAAAAuAsAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAuAsAAAAAAAC4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAALgLAAAAAAAAuQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAsAAAAAAAC4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAALoLAAAAAAAAugsAAAAAAAAMAAAALCBrZXlzPVRydWUp",
					"AQAAAAAAAAABAAAAugsAAAAAAADGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAALsLAAAAAAAAvAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwsAAAAAAAC7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"left_delete",
					null,
					"AQAAALkLAAAAAAAAuQsAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAugsAAAAAAAC6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALgLAAAAAAAAuAsAAAAAAAABAAAAW7gLAAAAAAAAuAsAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAuQsAAAAAAAC5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"right_delete",
					null,
					"AQAAALgLAAAAAAAAuAsAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAuAsAAAAAAAC4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAALgLAAAAAAAAuQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAsAAAAAAAC4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAVREAAAAAAABVEQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKSAtPiBib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBpbkVkZ2VzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICAiIiJyZXRydW4gaW5jb21pbmcgZWRnZXMgdG8gdGhlIG5vZGUiIiIKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuaW5fZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgb3V0RWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUKICAgICkgLT4gbGlzdFt0dXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgIiIicmV0cnVuIGluY29taW5nIGVkZ2VzIHRvIHRoZSBub2RlIiIiCiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLm91dF9lZGdlcyhuLCBrZXlzPVRydWUpXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKSAtPiBOb25lOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgc2VsZi5HLmFkZF9lZGdlKHUsIHYsIGssICoqcHJvcHMpCiAgICAgICAgc2VsZi5lZGdlc0FkZGVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHJlbW92ZUVkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdiwgaykKICAgICAgICBzZWxmLmVkZ2VzUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcygKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCAvLCAqKnByb3BzCiAgICApOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYsIGspOiBwcm9wc30pCiAgICAgICAgc2VsZi5lZGdlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoWyh1LCB2LCBrKV0sIGxpc3QocHJvcHMua2V5cygpKSkKCiAgICBkZWYgZ2V0RWRnZVByb3BlcnR5KHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdiwga11bcHJvcF0KCiAgICBkZWYgaXNFZGdlQWxsb3dlZChzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlKSAtPiBib29sOgogICAgICAgIGlmIHUgPT0gdjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUK",
					"AQAAAAAAAAABAAAAuQsAAAAAAAC5CwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/NetworkXGraphEditor/nx_graph_shapes.py",
			"settings":
			{
				"buffer_size": 12905,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					499,
					1,
					"insert",
					{
						"characters": "QRectF"
					},
					"BgAAAKYhAAAAAAAApyEAAAAAAAAAAAAApyEAAAAAAACoIQAAAAAAAAAAAACoIQAAAAAAAKkhAAAAAAAAAAAAAKkhAAAAAAAAqiEAAAAAAAAAAAAAqiEAAAAAAACrIQAAAAAAAAAAAACrIQAAAAAAAKwhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApiEAAAAAAACmIQAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": "|Qpoint"
					},
					"BwAAAKwhAAAAAAAArSEAAAAAAAAAAAAArSEAAAAAAACuIQAAAAAAAAAAAACuIQAAAAAAAK8hAAAAAAAAAAAAAK8hAAAAAAAAsCEAAAAAAAAAAAAAsCEAAAAAAACxIQAAAAAAAAAAAACxIQAAAAAAALIhAAAAAAAAAAAAALIhAAAAAAAAsyEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArCEAAAAAAACsIQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAALMhAAAAAAAAtCEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsyEAAAAAAACzIQAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"paste",
					null,
					"AQAAAOEhAAAAAAAA8CEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4SEAAAAAAADhIQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAOEhAAAAAAAA4iEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4SEAAAAAAADhIQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"paste",
					null,
					"AQAAAOIhAAAAAAAA7iEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4iEAAAAAAADiIQAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAA7iEAAAAAAADuIQAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"left_delete",
					null,
					"AQAAALQhAAAAAAAAtCEAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAtSEAAAAAAAC1IQAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAALQhAAAAAAAAtSEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtCEAAAAAAAC0IQAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"left_delete",
					null,
					"AQAAAAMiAAAAAAAAAyIAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAABCIAAAAAAAAEIgAAAAAAAAAAAAAAsH1A"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "P"
					},
					"AQAAAAMiAAAAAAAABCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAyIAAAAAAAADIgAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAATyEAAAAAAABPIQAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAADkUAAAAAAAAOhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORQAAAAAAAA5FAAAAAAAAAAAAAAAAPC/"
				],
				[
					558,
					2,
					"left_delete",
					null,
					"AgAAANAWAAAAAAAA0BYAAAAAAAABAAAAKc8WAAAAAAAAzxYAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA0RYAAAAAAADRFgAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAMsWAAAAAAAAzBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxYAAAAAAADLFgAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					3,
					"right_delete",
					null,
					"AwAAANwWAAAAAAAA3BYAAAAAAAAEAAAAbGluZdwWAAAAAAAA3BYAAAAAAAABAAAAKNwWAAAAAAAA3BYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA3BYAAAAAAADgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"paste",
					null,
					"AQAAANwWAAAAAAAA4RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BYAAAAAAADcFgAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					3,
					"right_delete",
					null,
					"AwAAADEXAAAAAAAAMRcAAAAAAAAEAAAAbGluZTEXAAAAAAAAMRcAAAAAAAABAAAAKDEXAAAAAAAAMRcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAMRcAAAAAAAA1FwAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"paste",
					null,
					"AQAAADEXAAAAAAAANhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRcAAAAAAAAxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					3,
					"right_delete",
					null,
					"AwAAALYXAAAAAAAAthcAAAAAAAAEAAAAbGluZbYXAAAAAAAAthcAAAAAAAABAAAAKLYXAAAAAAAAthcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAthcAAAAAAAC6FwAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					1,
					"paste",
					null,
					"AQAAALYXAAAAAAAAuxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthcAAAAAAAC2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BgAAAFQUAAAAAAAAVhQAAAAAAAAAAAAANRQAAAAAAAA3FAAAAAAAAAAAAAAeFAAAAAAAACAUAAAAAAAAAAAAAAQUAAAAAAAABhQAAAAAAAAAAAAA3xMAAAAAAADhEwAAAAAAAAAAAAC6EwAAAAAAALwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahQAAAAAAAC2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"paste",
					null,
					"AgAAAEMbAAAAAAAASBsAAAAAAAAAAAAASBsAAAAAAABIGwAAAAAAAAYAAABsaW5lKCk",
					"AQAAAAAAAAABAAAASRsAAAAAAABDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"paste",
					null,
					"AgAAADIcAAAAAAAANxwAAAAAAAAAAAAANxwAAAAAAAA3HAAAAAAAAAYAAABsaW5lKCk",
					"AQAAAAAAAAABAAAAOBwAAAAAAAAyHAAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "\nfm"
					},
					"BAAAAFAcAAAAAAAAURwAAAAAAAAAAAAAURwAAAAAAABZHAAAAAAAAAAAAABZHAAAAAAAAFocAAAAAAAAAAAAAFocAAAAAAAAWxwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBwAAAAAAABQHAAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFscAAAAAAAAXBwAAAAAAAAAAAAAXBwAAAAAAABdHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWxwAAAAAAABbHAAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": " QfontM"
					},
					"BwAAAF0cAAAAAAAAXhwAAAAAAAAAAAAAXhwAAAAAAABfHAAAAAAAAAAAAABfHAAAAAAAAGAcAAAAAAAAAAAAAGAcAAAAAAAAYRwAAAAAAAAAAAAAYRwAAAAAAABiHAAAAAAAAAAAAABiHAAAAAAAAGMcAAAAAAAAAAAAAGMcAAAAAAAAZBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRwAAAAAAABdHAAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QFontMetrics"
					},
					"AgAAAF4cAAAAAAAAXhwAAAAAAAAGAAAAUWZvbnRNXhwAAAAAAABqHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBwAAAAAAABkHAAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGocAAAAAAAAbBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahwAAAAAAABqHAAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": "self.fon"
					},
					"CAAAAGscAAAAAAAAbBwAAAAAAAAAAAAAbBwAAAAAAABtHAAAAAAAAAAAAABtHAAAAAAAAG4cAAAAAAAAAAAAAG4cAAAAAAAAbxwAAAAAAAAAAAAAbxwAAAAAAABwHAAAAAAAAAAAAABwHAAAAAAAAHEcAAAAAAAAAAAAAHEcAAAAAAAAchwAAAAAAAAAAAAAchwAAAAAAABzHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxwAAAAAAABrHAAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHMcAAAAAAAAdBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxwAAAAAAABzHAAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHQcAAAAAAAAdhwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBwAAAAAAAB0HAAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"left_delete",
					null,
					"AQAAAHgcAAAAAAAAeBwAAAAAAACcAAAAICAgICAgICB0cnk6CiAgICAgICAgICAgIGZtID0gUUZvbnRNZXRyaWNzKHNlbGYuc2NlbmUoKS5mb250KCkpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBmbSA9IFFGb250TWV0cmljcyhRQXBwbGljYXRpb24uaW5zdGFuY2UoKS5mb250KCkp",
					"AQAAAAAAAAABAAAAFB0AAAAAAAB4HAAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"right_delete",
					null,
					"AQAAAHgcAAAAAAAAeBwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAeBwAAAAAAAB4HAAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"paste",
					null,
					"AgAAALocAAAAAAAAvxwAAAAAAAAAAAAAvxwAAAAAAAC/HAAAAAAAAAYAAABsaW5lKCk",
					"AQAAAAAAAAABAAAAwBwAAAAAAAC6HAAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"paste",
					null,
					"BAAAAKcdAAAAAAAArB0AAAAAAAAAAAAArB0AAAAAAACsHQAAAAAAAAYAAABsaW5lKCmBHQAAAAAAAIYdAAAAAAAAAAAAAIYdAAAAAAAAhh0AAAAAAAAGAAAAbGluZSgp",
					"AQAAAAAAAAACAAAAgR0AAAAAAACHHQAAAAAAAAAAAAAAAPC/px0AAAAAAACtHQAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"left_delete",
					null,
					"AQAAAPUeAAAAAAAA9R4AAAAAAABcAAAAICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGZtID0gUUZvbnRNZXRyaWNzKFFBcHBsaWNhdGlvbi5pbnN0YW5jZSgpLmZvbnQoKSk",
					"AQAAAAAAAAABAAAAUR8AAAAAAAD1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					633,
					1,
					"left_delete",
					null,
					"AQAAALUeAAAAAAAAtR4AAAAAAAAMAAAAICAgICAgICB0cnk6",
					"AQAAAAAAAAABAAAAwR4AAAAAAAC1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"right_delete",
					null,
					"AQAAAMIeAAAAAAAAwh4AAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAwh4AAAAAAADCHgAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"left_delete",
					null,
					"AQAAAL4eAAAAAAAAvh4AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAwh4AAAAAAADCHgAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAL4eAAAAAAAAvx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvh4AAAAAAAC+HgAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					3,
					"right_delete",
					null,
					"AwAAANUeAAAAAAAA1R4AAAAAAAAFAAAAc2NlbmXVHgAAAAAAANUeAAAAAAAAAQAAACjVHgAAAAAAANUeAAAAAAAAAQAAACk",
					"AQAAAAAAAAABAAAA1R4AAAAAAADaHgAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"left_delete",
					null,
					"AQAAANQeAAAAAAAA1B4AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA1R4AAAAAAADVHgAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					1,
					"left_delete",
					null,
					"AQAAALQeAAAAAAAAtB4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAtR4AAAAAAAC1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"left_delete",
					null,
					"AQAAANweAAAAAAAA3B4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA3R4AAAAAAADdHgAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"paste",
					null,
					"AgAAAJUfAAAAAAAAmh8AAAAAAAAAAAAAmh8AAAAAAACaHwAAAAAAAAYAAABsaW5lKCk",
					"AQAAAAAAAAABAAAAmx8AAAAAAACVHwAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"paste",
					null,
					"AgAAAHMiAAAAAAAAzSIAAAAAAAAAAAAAzSIAAAAAAADNIgAAAAAAABIAAABzZWxmLnNldExpbmUobGluZSk",
					"AQAAAAAAAAABAAAAhSIAAAAAAABzIgAAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAALoiAAAAAAAAuiIAAAAAAAACAAAAIyCeIgAAAAAAAJ4iAAAAAAAAAgAAACMgdyIAAAAAAAB3IgAAAAAAAAIAAAAjIA",
					"AQAAAAAAAAABAAAAzSIAAAAAAABrIgAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					2,
					"left_delete",
					null,
					"AgAAAHciAAAAAAAAdyIAAAAAAAAEAAAAICAgIHMiAAAAAAAAcyIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAeyIAAAAAAAB7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAqSIAAAAAAACpIgAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAqSIAAAAAAACpIgAAAAAAAAAAAAAAAPC/"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": "move"
					},
					"BQAAACAyAAAAAAAAITIAAAAAAAAAAAAAITIAAAAAAAAhMgAAAAAAAAcAAABzZXRMaW5lITIAAAAAAAAiMgAAAAAAAAAAAAAiMgAAAAAAACMyAAAAAAAAAAAAACMyAAAAAAAAJDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIDIAAAAAAAAnMgAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "QPointF"
					},
					"CAAAACUyAAAAAAAAJjIAAAAAAAAAAAAAJjIAAAAAAAAmMgAAAAAAAAYAAABRTGluZUYmMgAAAAAAACcyAAAAAAAAAAAAACcyAAAAAAAAKDIAAAAAAAAAAAAAKDIAAAAAAAApMgAAAAAAAAAAAAApMgAAAAAAACoyAAAAAAAAAAAAACoyAAAAAAAAKzIAAAAAAAAAAAAAKzIAAAAAAAAsMgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJTIAAAAAAAArMgAAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"left_delete",
					null,
					"AQAAAC4yAAAAAAAALjIAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAALzIAAAAAAAAvMgAAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADMyAAAAAAAANDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzIAAAAAAAAzMgAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"insert",
					{
						"characters": "QPointF("
					},
					"CAAAADYyAAAAAAAANzIAAAAAAAAAAAAANzIAAAAAAAA4MgAAAAAAAAAAAAA4MgAAAAAAADkyAAAAAAAAAAAAADkyAAAAAAAAOjIAAAAAAAAAAAAAOjIAAAAAAAA7MgAAAAAAAAAAAAA7MgAAAAAAADwyAAAAAAAAAAAAADwyAAAAAAAAPTIAAAAAAAAAAAAAPTIAAAAAAAA+MgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANjIAAAAAAAA2MgAAAAAAAAAAAAAAAPC/"
				],
				[
					705,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAA6jEAAAAAAADqMQAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					2,
					"left_delete",
					null,
					"AgAAAFkmAAAAAAAAWSYAAAAAAAAoAAAAICAgICAgICBpbmxldF93aWRnZXQuc2V0UGFyZW50SXRlbShOb25lKVgmAAAAAAAAWCYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAgSYAAAAAAABZJgAAAAAAAAAAAAAAAPC/"
				],
				[
					725,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAwyUAAAAAAADDJQAAAAAAAAAAAAAAAPC/"
				],
				[
					729,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAnycAAAAAAACfJwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debu",
				"Debugger: Open"
			],
			[
				"debug",
				"Debugger: Open"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"View Package File"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/pylive"
	],
	"file_history":
	[
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/multidigraph.py",
		"/C/dev/src/pylive/pylive/QtTerminal/terminal_with_exec.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_graphics_items.py",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_inspector_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_scene.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qtpy_nodeeditor.py",
		"/C/dev/src/pylive/pylive/utils/diff.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/expreiments/ipython/embedded_qtconsole.py",
		"/C/dev/src/pylive/expreiments/display_builtin_icons.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_selection_model.py",
		"/C/dev/src/pylive/tests/test_diff.py",
		"/C/dev/src/pylive/pylive/utils/unique.py",
		"/C/dev/src/pylive/pylive/utils/sugiyama_layout.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/drawing/layout.py",
		"/C/dev/src/pylive/pylive.sublime-project",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/reportviews.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_scene_with_ports.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
		"/C/dev/src/pylive/expreiments/qstyle_draw_ptimitive_elements.py",
		"/C/dev/src/pylive/tests/test_python_graphmodel.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/infinite_graphicsview_optimized.py",
		"/C/Users/andris/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0/LocalCache/local-packages/Python312/site-packages/PySide6/QtCore.pyi",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/node_connection_tool.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/text_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/circle_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/pin_connection_tool.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/graphview_with_delegate.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/python_graph_model.py",
		"/C/Users/andris/Downloads/SideFX Houdini 20.5.278 x64 Win/readme.txt",
		"/C/Users/andris/Documents/Blender/Assets/blender_assets.cats.txt",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_databased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_databased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NXGraphView.py",
		"/C/dev/src/pylive/expreiments/built-a-dependency-graph-of-a-python-codebase.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_with_exec.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_skeleton.py",
		"/C/dev/src/pylive/script_examples_to_run_live/text_processing.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_graph_with_exec.py",
		"/C/dev/src/pylive/expreiments/run-script-in-terminal.py",
		"/C/Users/andris/AppData/Local/Sublime Text/Package Storage/LSP-pyright/18.15.0/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/pathlib.pyi",
		"/C/dev/src/pylive/expreiments/connect_to_ipython.py",
		"/C/dev/src/pylive/pylive/__main__.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_ipython.py",
		"/C/dev/src/pylive/expreiments/ipython/notbook_with_chatgpt.py",
		"/C/dev/src/pylive/tests/test_cells.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/cell_support.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/linter_widget.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_number_editor.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
		"/C/dev/src/pylive/pylive/QtTerminal/preview_widget.py",
		"/C/dev/src/pylive/pylive/render_engine/GLCanvasWidget_with_painting_signal.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
		"/C/dev/src/pylive/expreiments/file_textdocument_link.py",
		"/E/__ANDRIS__/ART/_Applications_/Cynthia Lopez 7000 - 2024/Cynthia Lopez 7000.xlsx",
		"/C/dev/src/pylive/expreiments/glcanvas.py",
		"/C/dev/src/pylive/pylive/render_engine/regl/regl.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_skeleton.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/glcanvas.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLWindow_with_qopengl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget_with_request_animation.py",
		"/C/dev/src/pylive/pylive/render_engine/utils/__init__.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget-with_painting_signal.py",
		"/C/dev/src/pylive/pylive/render_engine/glwidget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWindow.py",
		"/C/Users/andris/AppData/Local/Temp/2ea7c807-5541-48c5-9e23-9d4d4826a0ed_Microsoft Office 2021 Pro Plus.zip.0ed/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/Users/andris/Downloads/Microsoft Office 2021 Pro Plus (365 ) + Patch/Microsoft Office 2021 Pro Plus/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/dev/src/pylive/expreiments/opengl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pygame_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/opengl_outside_window.py",
		"/C/dev/src/pylive/pylive/render_engine/orbit_control.py",
		"/C/dev/src/pylive/pylive/render_engine/lookAt_standalone.vert",
		"/C/dev/src/pylive/pylive/logwindow.py",
		"/C/dev/src/pylive/pylive/render_engine/render_layers.py",
		"/C/dev/src/pylive/pylive/shaders/billboard.vert",
		"/C/dev/src/pylive/pylive/render_engine/resource_manager.py",
		"/C/dev/src/pylive/pylive/render_engine/examples/1 render layers.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/unified_titlebar.py",
		"/C/dev/src/pylive/pylive/render_engine/camera.py",
		"/C/dev/src/pylive/pylive/shaders/default_vertex_shader.vert",
		"/C/dev/src/pylive/pylive/shaders/flat_fragment_shader.frag",
		"/C/dev/src/pylive/pylive/examples/livescript.py",
		"/C/dev/src/pylive/gloo/render_layers.py",
		"/C/dev/src/pylive/gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/orbit_control.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_window_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/rendering_with_qt.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/qpygletwidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_1.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget (Not Working).py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_2.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_canvas_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyglet_on_QWidget.py",
		"/C/dev/src/pylive/expreiments/ipython/ipython_kernel.py",
		"/C/dev/src/pylive/expreiments/ipython/qtconsole_inprocess1.py",
		"/C/dev/src/pylive/expreiments/ipython/simple_console.py",
		"/C/dev/src/pylive/expreiments/simple_console.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_gpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/live_framework.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter.py",
		"/C/dev/src/pylive/expreiments/ipython_kernel.py",
		"/C/dev/src/pylive/pylive/examples/livenotebook.py",
		"/C/Users/andris/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0/LocalCache/local-packages/Python312/site-packages/PySide6/QtGui.pyi",
		"/C/dev/src/pylive/expreiments/visualize_function_dependencies.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter_OLD.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_completer.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/WhitespaceHighlighter.py"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"link.move",
			"move(",
			"move",
			"move(",
			"edges[",
			"move(",
			"import",
			"outletGraphicsObject(",
			"NXGraphModel",
			"modified",
			"LinkW",
			"hoverMoveEvent",
			"ConnectionEvent",
			"NodeWidget",
			"EdgeWidget",
			"change",
			"})\n",
			"handleEdgesRe",
			"nodespropertyChanged.emit",
			"Nodewidget",
			"gradient",
			"makeArrowS",
			"EdgeWidget",
			"addEdge",
			"EdgeWidget",
			"targetChanged",
			"NodeWidget",
			"makeLine",
			"setAccepted",
			"accept",
			"ConnectionDropType",
			"connectionEnterEvent",
			"AlignmentFlag",
			"print(",
			"nodeAt",
			"AttributesTable",
			"setLabelT",
			"size",
			"unchanged",
			"current",
			"print",
			"destroy",
			"_is_connection_entered",
			"QPen",
			"d1 <",
			"d1 >",
			"d2 >",
			"d2>",
			"d1",
			"            \"",
			"CC_CustomBase",
			"CE_ShapedFrame",
			"connectionDrop",
			"connectionDio",
			"_target",
			"ConnectionDropType",
			"connectionDropEvent",
			"]\n",
			"QStyle.PE_PanelMenu    48  The panel for a menu.\n",
			"ConnectionEvent",
			".map",
			"QTransform",
			"makeLineBetweenShapes",
			"print",
			"arrow",
			"line_between",
			"drag",
			"self.loop",
			"PinConnectionTool",
			"eventFilter",
			"edge",
			"edge.target",
			"edge.source",
			"edge.target",
			"setMouseTool",
			"self.connectionTool",
			"node",
			"EdgeConnectionEvent",
			"parent",
			"(\n",
			"block",
			"signal",
			"connected",
			"_edges",
			"removeEdge",
			"setSourceOutlet",
			"sceneGeome",
			"EdgeW",
			"updatePo",
			"contextmenu",
			"dagscene",
			"infini",
			"mousedouble",
			"selectionmodel",
			"handleSelectionChanged",
			"graph(",
			"result_sc",
			"finishConnection",
			"disconnected",
			"onDis",
			"handleNodesProp",
			"runScript",
			"createNodeWidget",
			"cell_at_line",
			"def instance",
			"instance",
			"setAttribute(",
			"setAttribute",
			"get_context",
			"QOpenGLWindow",
			"import QOpenGLWindow",
			"Literal",
			"literal",
			"Searching",
			"Lityeral",
			"dtype",
			"\t\t'",
			"internal_format",
			"dtype",
			"mode",
			"varyings_capture_mode",
			"internal_format",
			"dtype",
			"internal_format",
			"dtype",
			"internal_format",
			"varyings_capture_mode",
			"self"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"LinkEvent",
			"VertexWidget",
			"LinkWidget",
			"ConnectionEvent",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pylive/NetworkXGraphEditor/nx_network_scene.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16231,
						"regions":
						{
						},
						"selection":
						[
							[
								13065,
								13065
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene.py",
							"rulers":
							[
								80
							],
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"wrap_width": 80
						},
						"translation.x": 0.0,
						"translation.y": 5068.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pylive/NetworkXGraphEditor/nx_graph_model.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4437,
						"regions":
						{
						},
						"selection":
						[
							[
								3001,
								3001
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 980.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "pylive/NetworkXGraphEditor/nx_graph_shapes.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12905,
						"regions":
						{
						},
						"selection":
						[
							[
								10143,
								10143
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_shapes.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3864.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.441845147033,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 240.0
	},
	"output.Debugger Console":
	{
		"height": 240.0
	},
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 300.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"graph model",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx graph mo",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"icons",
				"expreiments\\display_builtin_icons.py"
			],
			[
				"nx graph",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nxselection",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"nx graph graphics",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nx graph grap",
				"pylive\\QtGraphEditor\\nx_graph_view.py"
			],
			[
				"nx gr",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene_with_ports.py"
			],
			[
				"nx",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"arrowi",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\qgraphics_arrow_item.py"
			],
			[
				"link",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\link_graphics_items.py"
			],
			[
				"DagSc",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"nx graph s",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"dag graphics ",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"test py",
				"tests\\test_python_graphmodel.py"
			],
			[
				"python gr",
				"pylive\\examples\\python_function_graph\\python_graph_model.py"
			],
			[
				"main",
				"pylive\\examples\\python_function_graph\\main.py"
			],
			[
				"nxgraphmo",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"standard",
				"pylive\\QtGraphEditor\\NetrowkXGraphditor\\standard_graph_delegate.py"
			],
			[
				"graphmodel",
				"pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py"
			],
			[
				"graphview",
				"pylive\\pylive\\QtGraphEditor\\graphview_databased.py"
			],
			[
				"build-a",
				"pylive\\expreiments\\built-a-dependency-graph-of-a-python-codebase.py"
			],
			[
				"conne",
				"pylive\\expreiments\\connect_to_ipython.py"
			],
			[
				"number",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"lint",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"script_",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"scriptedit",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"live_framewo",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"link file",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "setSelec",
		"selected_items":
		[
			[
				"setSelec",
				"setSelectionModel"
			],
			[
				"setSource",
				"setSourceOutlet"
			],
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 440.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
