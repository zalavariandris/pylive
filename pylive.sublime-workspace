{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"assig",
				"assignements"
			],
			[
				"ass",
				"assignment"
			],
			[
				"Multi",
				"MultiDiGraph"
			],
			[
				"parse_gr",
				"parse_graph_to_script"
			],
			[
				"digi",
				"digit_part"
			],
			[
				"uniq",
				"unique_name"
			],
			[
				"Sc",
				"ScriptEdit"
			],
			[
				"get",
				"getNodeProperty"
			],
			[
				"setP",
				"setPos"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"QLine",
				"QLineF"
			],
			[
				"oper",
				"_operator_to_widget"
			],
			[
				"nodesA",
				"nodesAboutToBeRemoved"
			],
			[
				"handleEd",
				"handleEdgesRemoved"
			],
			[
				"graphmoe",
				"graphmodel"
			],
			[
				"setPl",
				"setPlainText"
			],
			[
				"topo",
				"topological_sort"
			],
			[
				"nodes",
				"nodesAdded"
			],
			[
				"wi",
				"width"
			],
			[
				"centr",
				"central_layout"
			],
			[
				"result",
				"result_script_edit"
			],
			[
				"setGr",
				"setSizeGripEnabled"
			],
			[
				"showM",
				"showMessage"
			],
			[
				"_widget_",
				"_widget_to_param"
			],
			[
				"_widget_to",
				"_widget_to_return"
			],
			[
				"nodew",
				"node_widget"
			],
			[
				"setO",
				"setOrientation"
			],
			[
				"QGRaphicsLin",
				"QGraphicsLinearLayout"
			],
			[
				"QGraphisLine",
				"QGraphicsLinearLayout"
			],
			[
				"prop",
				"properties"
			],
			[
				"target",
				"target_node"
			],
			[
				"source",
				"source_node"
			],
			[
				"handleE",
				"handleEdgesPropertiesChanged"
			],
			[
				"edgesa",
				"edgesAboutToBeRemoved"
			],
			[
				"handleNo",
				"handleNodesRemoved"
			],
			[
				"nodesR",
				"nodesAboutToBeRemoved"
			],
			[
				"mouse",
				"mousePressEvent"
			],
			[
				"make_uni",
				"make_unique_name"
			],
			[
				"QSize",
				"QSizeF"
			],
			[
				"Gra",
				"GraphView"
			],
			[
				"grap",
				"graph_model"
			],
			[
				"size",
				"sizeHint"
			],
			[
				"Graph",
				"GraphView"
			],
			[
				"rea",
				"read_text"
			],
			[
				"graphmod",
				"graphmodel"
			],
			[
				"graph",
				"graphmodel"
			],
			[
				"add",
				"addMenu"
			],
			[
				"map",
				"mapToScene"
			],
			[
				"mapF",
				"mapFromGlobal"
			],
			[
				"crea",
				"createStandardContextMenu"
			],
			[
				"QgraphicsA",
				"QGraphicsArrowItem"
			],
			[
				"Abstra",
				"AbstractGraphDelegate"
			],
			[
				"color",
				"ColorRole"
			],
			[
				"QGra",
				"QGraphicsLayout"
			],
			[
				"QGraphics",
				"QGraphicsScene"
			],
			[
				"item",
				"_item_to_widget_map"
			],
			[
				"Grap",
				"GraphicsItemFlag"
			],
			[
				"base",
				"AlternateBase"
			],
			[
				"Abstr",
				"AbstractGraphDelegate"
			],
			[
				"ty",
				"typing"
			],
			[
				"QPainter",
				"QPainterPath"
			],
			[
				"set",
				"setColor"
			],
			[
				"len",
				"length"
			],
			[
				"mapFrom",
				"mapFromItem"
			],
			[
				"_boun",
				"_boundingrect"
			],
			[
				"QRec",
				"QRectF"
			],
			[
				"rect",
				"rect_shape"
			],
			[
				"update",
				"updatePosition"
			],
			[
				"addP",
				"addPolygon"
			],
			[
				"poly",
				"polygon"
			],
			[
				"QPol",
				"QPolygonF"
			],
			[
				"tar",
				"target_offset"
			],
			[
				"str",
				"createStroke"
			],
			[
				"shape_",
				"shape_center"
			],
			[
				"Itemsend",
				"ItemSendsScenePositionChanges"
			],
			[
				"fla",
				"GraphicsItemFlag"
			],
			[
				"scenePos",
				"scenePositionChanged"
			],
			[
				"sceneP",
				"scenePositionChanged"
			],
			[
				"setS",
				"setSource"
			],
			[
				"Qpoint",
				"QPointF"
			],
			[
				"QPainterP",
				"QPainterPathStroker"
			],
			[
				"sc",
				"scene"
			],
			[
				"Qpainter",
				"QPainterPath"
			],
			[
				"QPoint",
				"QPointF"
			],
			[
				"adjus",
				"adjusted"
			],
			[
				"Graphis",
				"GraphicsItemFlag"
			],
			[
				"group",
				"group_widget"
			],
			[
				"send",
				"ItemSendsScenePositionChanges"
			],
			[
				"Grpahi",
				"GraphicsItemFlag"
			],
			[
				"flag",
				"GraphicsItemFlag"
			],
			[
				"QGrap",
				"QGraphicsItem"
			],
			[
				"handleEdges",
				"handleEdgesAdded"
			],
			[
				"graphmodel",
				"graphmodel_databased"
			],
			[
				"pa",
				"parent"
			],
			[
				"line",
				"lineCount"
			],
			[
				"inser",
				"insertBar"
			],
			[
				"cell",
				"cell_at_line"
			],
			[
				"Code",
				"CodeHasDocstring"
			],
			[
				"assertNo",
				"assertNotEqual"
			],
			[
				"Script",
				"ScriptEdit"
			],
			[
				"end",
				"end_block"
			],
			[
				"begin",
				"begin_rect"
			],
			[
				"find",
				"findBlockByLineNumber"
			],
			[
				"Modi",
				"KeyboardModifier"
			],
			[
				"QKey",
				"QKeyEvent"
			],
			[
				"curr",
				"currentBlockState"
			],
			[
				"current",
				"currentBlockState"
			],
			[
				"curren",
				"currentBlockState"
			],
			[
				"list",
				"listwidget"
			],
			[
				"setCi",
				"setCurrentIndex"
			],
			[
				"file",
				"fileChanged"
			],
			[
				"QMenu",
				"QMenuBar"
			],
			[
				"parent",
				"parentWidget"
			],
			[
				"QMeu",
				"QMenuBar"
			],
			[
				"QPlainTe",
				"QPlainTextDocumentLayout"
			],
			[
				"LiveA",
				"QtLiveApp"
			],
			[
				"NotIm",
				"NotImplementedError"
			],
			[
				"LiveAppW",
				"LiveAppWithExec"
			],
			[
				"Qt",
				"QtGraphEditor"
			],
			[
				"text",
				"textedit"
			],
			[
				"inter",
				"intersects"
			],
			[
				"con",
				"contentsRect"
			],
			[
				"Upda",
				"UpdateRequest"
			],
			[
				"lineNumberAre",
				"lineNumberAreaWidth"
			],
			[
				"gc",
				"get_context"
			],
			[
				"per",
				"perf_counter_ns"
			],
			[
				"pain",
				"painting"
			],
			[
				"setSwap",
				"setSwapBehavior"
			]
		]
	},
	"buffers":
	[
		{
			"file": "expreiments/inspect_functions_experiment.py",
			"settings":
			{
				"buffer_size": 1953,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "pylive/QtGraphEditor/dag_graph_graphics_scene.py",
			"settings":
			{
				"buffer_size": 33198,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\nfrom"
					},
					"BQAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvAAAAAAAAAG8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " pylive."
					},
					"CAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0AAAAAAAAAHQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "scrip"
					},
					"BQAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					6,
					"left_delete",
					null,
					"BgAAAIAAAAAAAAAAgAAAAAAAAAABAAAAcH8AAAAAAAAAfwAAAAAAAAABAAAAaX4AAAAAAAAAfgAAAAAAAAABAAAAcn0AAAAAAAAAfQAAAAAAAAABAAAAY3wAAAAAAAAAfAAAAAAAAAABAAAAc3sAAAAAAAAAewAAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAAAAAAAAAIEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7AAAAAAAAAHsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "QtScriptEditor"
					},
					"AQAAAHwAAAAAAAAAigAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " impo"
					},
					"BQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					5,
					"left_delete",
					null,
					"BQAAAI4AAAAAAAAAjgAAAAAAAAABAAAAb40AAAAAAAAAjQAAAAAAAAABAAAAcIwAAAAAAAAAjAAAAAAAAAABAAAAbYsAAAAAAAAAiwAAAAAAAAABAAAAaYoAAAAAAAAAigAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAAAAAAAAAI8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ".sc"
					},
					"AwAAAIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "script_edit"
					},
					"AgAAAIsAAAAAAAAAiwAAAAAAAAACAAAAc2OLAAAAAAAAAJYAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAI0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAAAAAAAAAJYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " Sc"
					},
					"AwAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAAAAAAAAAJ0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":135,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ScriptEdit"
					},
					"AgAAAJ4AAAAAAAAAngAAAAAAAAACAAAAU2OeAAAAAAAAAKgAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"cut",
					null,
					"AQAAAHAAAAAAAAAAcAAAAAAAAAA4AAAAZnJvbSBweWxpdmUuUXRTY3JpcHRFZGl0b3Iuc2NyaXB0X2VkaXQgaW1wb3J0IFNjcmlwdEVkaXQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAHAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 195 files for \"monospace\"\n\nC:\\dev\\src\\pylive\\expreiments\\livepreview_qwidget.py:\n   48  \t\ttextedit = QPlainTextEdit()\n   49  \t\tfont = textedit.font()\n   50: \t\tfont.setFamilies([\"monospace\", \"Operator Mono Book\"])\n   51  \t\t# font.setPointSize(10)\n   52  \t\tfont.setWeight(QFont.Weight.Medium)\n\nC:\\dev\\src\\pylive\\pylive\\QtLiveApp\\file_link.py:\n  206  \t\t\t\ttextedit.setTabChangesFocus(False)\n  207  \t\t\t\tfont = textedit.font()\n  208: \t\t\t\tfont.setFamilies([\"monospace\"])\n  209  \t\t\t\tfont.setStyleHint(QFont.StyleHint.TypeWriter);\n  210  \t\t\t\tfont.setPointSize(12)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\script_edit.py:\n   29          ### Font###\n   30          font = self.font()\n   31:         font.setFamilies([\"monospace\", \"Operator Mono Book\"])\n   32          # font.setPointSize(10)\n   33          font.setWeight(QFont.Weight.Medium)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\async_rope_completer_for_textedit.py:\n  101  \t\tdef __init__(self, parent=None) -> None:\n  102  \t\t\tsuper().__init__(parent)\n  103: \t\t\t# set a monospace font\n  104  \t\t\tfont = self.font()\n  105  \n  106: \t\t\tfont.setFamilies([\"monospace\", \"Operator Mono Book\"])\n  107  \t\t\tfont.setPointSize(10)\n  108  \t\t\tfont.setWeight(QFont.Weight.Medium)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py:\n  135  \t\tself.setTabStopDistance(QFontMetricsF(self.font()).horizontalAdvance(' ') * 4)\n  136  \n  137: \t\t# set a monospace font\n  138  \t\tfont = self.font()\n  139  \n  140: \t\tfont.setFamilies([\"monospace\", \"Operator Mono Book\"])\n  141  \t\tfont.setPointSize(10)\n  142  \t\tfont.setWeight(QFont.Weight.Medium)\n  ...\n  175  \t\ttextedit.setTabChangesFocus(False)\n  176  \t\tfont = textedit.font()\n  177: \t\tfont.setFamilies([\"monospace\"])\n  178  \t\tfont.setStyleHint(QFont.StyleHint.TypeWriter);\n  179  \t\tfont.setPointSize(12)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py:\n  153      font.setWeight(QFont.Weight.Medium)\n  154      font.setStyleHint(QFont.StyleHint.TypeWriter)\n  155:     font.setFamilies([\"monospace\", \"Operator Mono Book\"])\n  156      font.setStyleStrategy(QFont.StyleStrategy.PreferAntialias)\n  157      textedit.setFont(font)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\CodeAssistinPlainTextEdit.py:\n   23  \t\t# option.setFlags(QTextOption.ShowTabsAndSpaces | QTextOption.ShowLineAndParagraphSeparators)\n   24  \t\tself.document().setDefaultTextOption(option)\n   25: \t\tself.setFont(QFont(\"Monospace\", 14))\n   26  \t\tself.font().setStyleHint(QFont.StyleHint.TypeWriter);\n   27  \t\tself.setTabStopDistance(QFontMetricsF(self.font()).horizontalAdvance(' ') * 4)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\KeywordsCompleter_OLD.py:\n   47  \t\tself.setTabStopDistance(QFontMetricsF(self.font()).horizontalAdvance(' ') * 4)\n   48  \n   49: \t\t# set a monospace font\n   50  \t\tfont = QFont(\"Operator Mono\", 11)\n   51  \t\tself.setFont(font)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\RopeCompleter.py:\n   57  \t\tself.setTabStopDistance(QFontMetricsF(self.font()).horizontalAdvance(' ') * 4)\n   58  \n   59: \t\t# set a monospace font\n   60  \t\tfont = QFont(\"Operator Mono\", 11)\n   61  \t\tself.setFont(font)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\script_editor_simple.py:\n   68  \t\tself.setTabStopDistance(QFontMetricsF(self.font()).horizontalAdvance(' ') * 4)\n   69  \n   70: \t\t# set a monospace font\n   71  \t\tfont = self.font()\n   72  \n   73: \t\tfont.setFamilies([\"monospace\", \"Operator Mono Book\"])\n   74  \t\tfont.setPointSize(10)\n   75  \t\tfont.setWeight(QFont.Weight.Medium)\n\n14 matches across 10 files\n\n\nSearching 195 files for \"make_unique\"\n\nC:\\dev\\src\\pylive\\pylive\\examples\\livescript.py:\n   16  import sys\n   17  \n   18: from pylive.utils.unique import make_unique_id\n   19  from pylive.QtTerminal.logwindow import LogWindow\n   20  \n\nC:\\dev\\src\\pylive\\pylive\\examples\\observable_nodesio\\core.py:\n    1  from typing import *\n    2  \n    3: def make_unique_name(name, names):\n    4  \t# Regex to extract the name part (without trailing digits)\n    5  \tmatch = re.search(r'(.*?)(\\d*)$', name)\n    .\n  226  \tdef unique_name(self, name):\n  227  \t\tnames = [n.name for n in self.nodes]\n  228: \t\treturn make_unique_name(name, names)\n  229  \n  230  \tdef __hash__(self):\n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\graph_view.py:\n    5  \n    6  # from standard_graph_delegate import StandardGraphDelegate\n    7: from pylive.utils.unique import make_unique_id, make_unique_name\n    8  \n    9  from graph_model import GraphModel\n   ..\n  226              clickpos = self.mapToScene(event.position().toPoint())\n  227  \n  228:             # n = make_unique_id(length=12)\n  229:             n = make_unique_name(\"NODE\", [n for n in self._graphmodel.nodes()])\n  230              self._graphmodel.addNode(\n  231                  n, label=\"new node\", inlets=[\"in\"], outlets=[\"out\"]\n  ...\n  245                  if not self._graphmodel:\n  246                      return\n  247:                 n = make_unique_name(\n  248                      \"NODE\", [n for n in self._graphmodel.nodes()]\n  249                  )\n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\main.py:\n   22  )\n   23  from pylive.QtGraphEditor.nx_graph_model import NXGraphModel\n   24: from pylive.utils.unique import make_unique_name\n   25  \n   26  import inspect\n   ..\n  145      @Slot(object)\n  146      def create_operator(self, fn: Callable):\n  147:         unique_node_id = make_unique_name(fn.__name__, self.graphmodel.nodes())\n  148          self.graphmodel.addNode(unique_node_id, fn=fn)\n  149  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_columnbased.py:\n  290  \n  291  \t\tid_item   = QStandardItem()\n  292: \t\tid_item.setData(unique.make_unique_id(), Qt.ItemDataRole.DisplayRole)\n  293  \t\tname_item = QStandardItem()\n  294  \t\tname_item.setData(name, Qt.ItemDataRole.DisplayRole)\n  ...\n  307  \n  308  \t\tid_item    = QStandardItem()\n  309: \t\tid_item.setData(unique.make_unique_id(), Qt.ItemDataRole.DisplayRole)\n  310  \t\towner_item = QStandardItem()\n  311  \t\towner_item.setData(self._nodeTable.data(node._index, Qt.ItemDataRole.DisplayRole), Qt.ItemDataRole.DisplayRole)\n  ...\n  318  \tdef addOutlet(self, node:NodeRef, name:str)->OutletRef:\n  319  \t\tid_item    = QStandardItem()\n  320: \t\tid_item.setData(unique.make_unique_id(), Qt.ItemDataRole.DisplayRole)\n  321  \t\towner_item = QStandardItem()\n  322  \t\towner_item.setData(self._nodeTable.data(node._index, Qt.ItemDataRole.DisplayRole), Qt.ItemDataRole.DisplayRole)\n  ...\n  333  \t\t\traise ValueError(f\"inlet {inlet} does not exist\")\n  334  \n  335: \t\tunique_id = unique.make_unique_id()\n  336  \t\toutlet_id = self._outletTable.data(outlet._index, Qt.ItemDataRole.DisplayRole)\n  337  \t\tinlet_id = self._inletTable.data(inlet._index, Qt.ItemDataRole.DisplayRole)\n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py:\n  226  \tdef addNode(self, /, **props)->NodeRef:\n  227  \t\t\"\"\"addNode(**proper)->NodeRef\"\"\"\n  228: \t\tunique_id = unique.make_unique_id()\n  229  \t\tnode = NodeRef(unique_id, self)\n  230  \t\tself._nodes[node] = props\n  ...\n  235  \t\tassert node.isValid()\n  236  \n  237: \t\tunique_id = unique.make_unique_id()\n  238  \t\tinlet = InletRef(unique_id, self)\n  239  \n  ...\n  254  \t\tassert node.isValid()\n  255  \n  256: \t\tunique_id = unique.make_unique_id()\n  257  \t\toutlet = OutletRef(unique_id, self)\n  258  \n  ...\n  277  \t\tassert \"SOURCE_OUTLET\" not in props and \"TARGET_INLET\" not in props\n  278  \n  279: \t\tunique_id = unique.make_unique_id()\n  280  \t\tedge = EdgeRef(unique_id, self)\n  281  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_rolebased.py:\n  191  \n  192  \t\tnode_item = QStandardItem()\n  193: \t\tnode_item.setData( unique.make_unique_id(), NodeDataRole.IdRole)\n  194  \t\tnode_item.setData( name, NodeDataRole.NameRole)\n  195  \t\tnode_item.setData( (posx, posy), NodeDataRole.LocationRole)\n  ...\n  204  \n  205  \t\tinlet_item = QStandardItem()\n  206: \t\tinlet_item.setData(unique.make_unique_id(), InletDataRole.IdRole)\n  207  \t\tinlet_item.setData(node.data(NodeDataRole.IdRole), InletDataRole.OwnerRole)\n  208  \t\tinlet_item.setData(name, InletDataRole.NameRole)\n  ...\n  217  \n  218  \t\toutlet_item = QStandardItem()\n  219: \t\toutlet_item.setData(unique.make_unique_id(), OutletDataRole.IdRole)\n  220  \t\toutlet_item.setData(node.data(NodeDataRole.IdRole), OutletDataRole.OwnerRole)\n  221  \t\toutlet_item.setData(name, OutletDataRole.NameRole)\n  ...\n  231  \n  232  \t\tedge_item = QStandardItem()\n  233: \t\tedge_item.setData(unique.make_unique_id(), EdgeDataRole.IdRole)\n  234  \t\tinlet_id = self.inletList.data(inlet, InletDataRole.IdRole)\n  235  \t\tedge_item.setData(inlet_id, EdgeDataRole.TargetInletIdRole)\n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\NetrowkXGraphEditor\\graphview_with_delegate.py:\n   89  \n   90  \n   91: from pylive.utils.unique import make_unique_id\n   92  class NXGraphView(QGraphicsView):\n   93  \tdef __init__(self, parent=None):\n   ..\n  174  \t\tclickpos = self.mapToScene(event.position().toPoint())\n  175  \t\t\n  176: \t\tn = make_unique_id()\n  177  \t\tself.graphModel().addNode(n, label=\"new node\")\n  178  \t\twidget = self._item_to_widget_map[n]\n  ...\n  181  \tdef contextMenuEvent(self, event:QContextMenuEvent):\n  182  \t\tdef create_node_at(scenePos:QPointF):\n  183: \t\t\tn = make_unique_id()\n  184  \t\t\tself.graphModel().addNode(n, label=\"new node\")\n  185  \t\t\twidget = self._item_to_widget_map[n]\n\nC:\\dev\\src\\pylive\\pylive\\utils\\unique.py:\n    3  import re\n    4  \n    5: def make_unique_id(length=8):\n    6      # Generate a random string of the specified length from ASCII letters and digits\n    7      characters = string.ascii_uppercase\n    .\n    9      return unique_id\n   10  \n   11: def make_unique_name(name, names):\n   12  \t# Regex to extract the name part (without trailing digits)\n   13  \tmatch = re.search(r'(.*?)(\\d*)$', name)\n\n27 matches across 9 files\n",
			"settings":
			{
				"buffer_size": 9802,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "pylive/utils/unique.py",
			"settings":
			{
				"buffer_size": 728,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					536,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA2AIAAAAAAACSAgAAaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmltcG9ydCByZQoKZGVmIG1ha2VfdW5pcXVlX2lkKGxlbmd0aD04KToKICAgICMgR2VuZXJhdGUgYSByYW5kb20gc3RyaW5nIG9mIHRoZSBzcGVjaWZpZWQgbGVuZ3RoIGZyb20gQVNDSUkgbGV0dGVycyBhbmQgZGlnaXRzCiAgICBjaGFyYWN0ZXJzID0gc3RyaW5nLmFzY2lpX3VwcGVyY2FzZQogICAgdW5pcXVlX2lkID0gJycuam9pbihyYW5kb20uY2hvaWNlcyhjaGFyYWN0ZXJzLCBrPWxlbmd0aCkpCiAgICByZXR1cm4gdW5pcXVlX2lkCgpkZWYgbWFrZV91bmlxdWVfbmFtZShuYW1lLCBuYW1lcyk6CgkjIFJlZ2V4IHRvIGV4dHJhY3QgdGhlIG5hbWUgcGFydCAod2l0aG91dCB0cmFpbGluZyBkaWdpdHMpCgltYXRjaCA9IHJlLnNlYXJjaChyJyguKj8pKFxkKikkJywgbmFtZSkKCWlmIG1hdGNoOgoJCSMgTmFtZSBwYXJ0IHdpdGhvdXQgZGlnaXRzCgkJbmFtZV9wYXJ0ID0gbWF0Y2guZ3JvdXAoMSkKCQoJCSMgTG9vcCB0byBmaW5kIGEgdW5pcXVlIG5hbWUKCQlkaWdpdCA9IDEKCQl3aGlsZSBuYW1lIGluIG5hbWVzOgoJCQkjIEFwcGVuZCB0aGUgY3VycmVudCBkaWdpdCB0byB0aGUgbmFtZSBwYXJ0CgkJCW5hbWUgPSBmIntuYW1lX3BhcnR9e2RpZ2l0fSIKCQkJZGlnaXQgKz0gMQoJCglyZXR1cm4gbmFtZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANcCAAAAAAAA2AIAAAAAAAAAAAAA2AIAAAAAAADcAgAAAAAAAAAAAADcAgAAAAAAAN0CAAAAAAAAAAAAAN0CAAAAAAAA4QIAAAAAAAAAAAAA2AIAAAAAAADYAgAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAgAAAAAAANcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					542,
					4,
					"left_delete",
					null,
					"BAAAANwCAAAAAAAA3AIAAAAAAAABAAAAINsCAAAAAAAA2wIAAAAAAAABAAAAINoCAAAAAAAA2gIAAAAAAAABAAAAINkCAAAAAAAA2QIAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdAgAAAAAAAN0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					543,
					1,
					"paste",
					null,
					"AQAAANkCAAAAAAAAmAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZAgAAAAAAANkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					546,
					2,
					"left_delete",
					null,
					"AgAAANgCAAAAAAAA2AIAAAAAAADBAQAACmRlZiBtYWtlX3VuaXF1ZV9uYW1lKG5hbWUsIG5hbWVzKToKICAgICMgUmVnZXggdG8gZXh0cmFjdCB0aGUgbmFtZSBwYXJ0ICh3aXRob3V0IHRyYWlsaW5nIGRpZ2l0cykKICAgIG1hdGNoID0gcmUuc2VhcmNoKHIiKC4qPykoXGQqKSQiLCBuYW1lKQogICAgaWYgbWF0Y2g6CiAgICAgICAgIyBOYW1lIHBhcnQgd2l0aG91dCBkaWdpdHMKICAgICAgICBuYW1lX3BhcnQgPSBtYXRjaC5ncm91cCgxKQoKICAgICAgICAjIExvb3AgdG8gZmluZCBhIHVuaXF1ZSBuYW1lCiAgICAgICAgZGlnaXQgPSAxCiAgICAgICAgd2hpbGUgbmFtZSBpbiBuYW1lczoKICAgICAgICAgICAgIyBBcHBlbmQgdGhlIGN1cnJlbnQgZGlnaXQgdG8gdGhlIG5hbWUgcGFydAogICAgICAgICAgICBuYW1lID0gZiJ7bmFtZV9wYXJ0fXtkaWdpdH0iCiAgICAgICAgICAgIGRpZ2l0ICs9IDEKCiAgICByZXR1cm4gbmFtZQrXAgAAAAAAANcCAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBAAAAAAAANgCAAAAAAAAAAAAAAAA8L8"
				],
				[
					548,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA2AIAAAAAAADXAgAAaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmltcG9ydCByZQoKCmRlZiBtYWtlX3VuaXF1ZV9pZChsZW5ndGg9OCk6CiAgICAjIEdlbmVyYXRlIGEgcmFuZG9tIHN0cmluZyBvZiB0aGUgc3BlY2lmaWVkIGxlbmd0aCBmcm9tIEFTQ0lJIGxldHRlcnMgYW5kIGRpZ2l0cwogICAgY2hhcmFjdGVycyA9IHN0cmluZy5hc2NpaV91cHBlcmNhc2UKICAgIHVuaXF1ZV9pZCA9ICIiLmpvaW4ocmFuZG9tLmNob2ljZXMoY2hhcmFjdGVycywgaz1sZW5ndGgpKQogICAgcmV0dXJuIHVuaXF1ZV9pZAoKCmRlZiBtYWtlX3VuaXF1ZV9uYW1lKG5hbWUsIG5hbWVzKToKICAgICMgUmVnZXggdG8gZXh0cmFjdCB0aGUgbmFtZSBwYXJ0ICh3aXRob3V0IHRyYWlsaW5nIGRpZ2l0cykKICAgIG1hdGNoID0gcmUuc2VhcmNoKHIiKC4qPykoXGQqKSQiLCBuYW1lKQogICAgaWYgbWF0Y2g6CiAgICAgICAgIyBOYW1lIHBhcnQgd2l0aG91dCBkaWdpdHMKICAgICAgICBuYW1lX3BhcnQgPSBtYXRjaC5ncm91cCgxKQoKICAgICAgICAjIExvb3AgdG8gZmluZCBhIHVuaXF1ZSBuYW1lCiAgICAgICAgZGlnaXQgPSAxCiAgICAgICAgd2hpbGUgbmFtZSBpbiBuYW1lczoKICAgICAgICAgICAgIyBBcHBlbmQgdGhlIGN1cnJlbnQgZGlnaXQgdG8gdGhlIG5hbWUgcGFydAogICAgICAgICAgICBuYW1lID0gZiJ7bmFtZV9wYXJ0fXtkaWdpdH0iCiAgICAgICAgICAgIGRpZ2l0ICs9IDEKCiAgICByZXR1cm4gbmFtZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAgAAAAAAANcCAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pylive/QtGraphEditor/nx_graph_model.py",
			"settings":
			{
				"buffer_size": 5888,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"cut",
					null,
					"AQAAAO0HAAAAAAAA7QcAAAAAAABCAQAAZGVmIHNldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46SGFzaGFibGUsIC8sICoqcHJvcHMpOgoJCSMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwoJCWNoYW5nZSA9IHt9CgkJZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CgkJCWlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKCQkJCWNoYW5nZVtrZXldID0gdmFsCgkJbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQoJCXNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8JAAAAAAAA7QcAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADIGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADYGAAAAAAAAAAAAADYGAAAAAAAAOAYAAAAAAAAAAAAAMwYAAAAAAAAzBgAAAAAAAAIAAAAJCQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIGAAAAAAAAMgYAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAADUGAAAAAAAANQYAAAAAAAABAAAACQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYGAAAAAAAANgYAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAADUGAAAAAAAAdwcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUGAAAAAAAANQYAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"cut",
					null,
					"AQAAAFYIAAAAAAAAVggAAAAAAABhAAAAZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46SGFzaGFibGUpOgoJCXNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQoJCXNlbGYuRy5yZW1vdmVfbm9kZShuKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcIAAAAAAAAVggAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAB6BwAAAAAAAHsHAAAAAAAAAAAAAHsHAAAAAAAAfQcAAAAAAAAAAAAAeAcAAAAAAAB4BwAAAAAAAAIAAAAJCQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcHAAAAAAAAdwcAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAHoHAAAAAAAAegcAAAAAAAABAAAACQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsHAAAAAAAAewcAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAHoHAAAAAAAA2wcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoHAAAAAAAAegcAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"cut",
					null,
					"AQAAADgJAAAAAAAAOAkAAAAAAABOAAAAZGVmIGdldE5vZGVQcm9wZXJ0eShzZWxmLCBuOkhhc2hhYmxlLCBuYW1lLCAvKToKCQlyZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVd",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYJAAAAAAAAOAkAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAADMJAAAAAAAAMwkAAAAAAAADAAAACgkKMgkAAAAAAAAyCQAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYJAAAAAAAAMwkAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAADMJAAAAAAAAMwkAAAAAAAABAAAACQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQJAAAAAAAANAkAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					3,
					"left_delete",
					null,
					"AwAAALoIAAAAAAAAuggAAAAAAAABAAAACrkIAAAAAAAAuQgAAAAAAAABAAAACbgIAAAAAAAAuAgAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsIAAAAAAAAuwgAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAC8JAAAAAAAALwkAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAJAAAAAAAAMAkAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcHAAAAAAAAdwcAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAHkHAAAAAAAAeQcAAAAAAAABAAAACQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoHAAAAAAAAegcAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAHkHAAAAAAAAxwcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkHAAAAAAAAeQcAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcHAAAAAAAAdwcAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "del"
					},
					"BAAAAEIEAAAAAAAAQwQAAAAAAAAAAAAAeQcAAAAAAAB5BwAAAAAAAAIAAAAJCUMEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABFBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIEAAAAAAAAQgQAAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUEAAAAAAAARgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUEAAAAAAAARQQAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAEwEAAAAAAAATAQAAAAAAAAHAAAAID0gTm9uZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMEAAAAAAAATAQAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAA7AAAACQkJc2VsZi5hZGRJbmxldChub2RlLCAiaW4iKQoJCQlzZWxmLmFkZE91dGxldChub2RlLCAib3V0Iik",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJADAAAAAAAAVQMAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUDAAAAAAAAVQMAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEUKAAAAAAAARgoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUKAAAAAAAARQoAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAP8AAAAAAAAA/wAAAAAAAAAQAAAAVHVwbGVbSGFzaGFibGUsIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8BAAAAAAAA/wAAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAAgBAAAAAAAACAEAAAAAAAABAAAAXQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkBAAAAAAAACQEAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAADUBAAAAAAAANQEAAAAAAAAQAAAAVHVwbGVbSGFzaGFibGUsIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUBAAAAAAAANQEAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"left_delete",
					null,
					"AQAAAD4BAAAAAAAAPgEAAAAAAAABAAAAXQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8BAAAAAAAAPwEAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA1hQAAAAAAAAVEgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCmNsYXNzIE5YR3JhcGhNb2RlbChRT2JqZWN0KToKCW5vZGVzQWRkZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbSGFzaGFibGVdCglub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbSGFzaGFibGVdCglub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCglub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCgllZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICNMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCgllZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KCWVkZ2VzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgIyBEaWN0W0hhc2hhYmxlLCBEaWN0W3N0ciwgQW55XV0KCWVkZ2VzUmVtb3ZlZCA9IFNpZ25hbChsaXN0KQoKCWRlZiBfX2luaXRfXyhzZWxmLCBHOm54LkRpR3JhcGg9bnguRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CgkJc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQoJCXNlbGYuRyA9IEcKCgkJZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgoJCQlub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCgkJZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgoJCQl1LCB2ID0gZQoJCQkKCQkJc2VsZi5hZGRFZGdlKHUsIHYpCgoJZGVmIHBhdGNoKHNlbGYsIEc6bnguRGlHcmFwaCk6CgkJLi4uCgkJcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgoJZGVmIF9fZGVsX18oc2VsZik6CgkJZGVsIHNlbGYuRwoJCSMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQoJCSMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQoJCSMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKCQkjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCglkZWYgYWRkTm9kZShzZWxmLCBuOkhhc2hhYmxlLCAvICwgKipwcm9wcyk6CgkJcHJpbnQoImFkZCBub2RlIiwgbikKCQlzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKCQlzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCgkJc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246cHJvcHN9KQoKCWRlZiBzZXROb2RlUHJvcGVydGllcyhzZWxmLCBuOkhhc2hhYmxlLCAvLCAqKnByb3BzKToKCQkjIGNoYW5nZSBndWFyZCBUT0RPOiBmaW5kIHJlbW92ZWQgcHJvcHMKCQljaGFuZ2UgPSB7fQoJCWZvciBrZXksIHZhbCBpbiBwcm9wcy5pdGVtcygpOgoJCQlpZiBrZXkgbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWwgIT0gc2VsZi5HLm5vZGVzW25dW2tleV06CgkJCQljaGFuZ2Vba2V5XSA9IHZhbAoJCW54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKCQlzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCglkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46SGFzaGFibGUsIG5hbWUsIC8pOgoJCXJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCglkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjpIYXNoYWJsZSk6CgkJc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbbl0pCgkJc2VsZi5HLnJlbW92ZV9ub2RlKG4pCgoJZGVmIGFkZEVkZ2Uoc2VsZiwgdTpIYXNoYWJsZSwgdjpIYXNoYWJsZSwgLyAsICoqcHJvcHMpOgoKCQlpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CgkJCXNlbGYuYWRkTm9kZSh1KQoJCWlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKCQkJc2VsZi5hZGROb2RlKHYpCgoJCXNlbGYuRy5hZGRfZWRnZSh1LCB2LCAqKnByb3BzKQoJCXNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdildKQoKCWRlZiByZW1vdmVfZWRnZShzZWxmLCB1Okhhc2hhYmxlLCB2Okhhc2hhYmxlKToKCQlzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSx2KV0pCgkJc2VsZi5HLnJlbW92ZV9lZGdlKCB1LHYgKQoKCWRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1Okhhc2hhYmxlLCB2Okhhc2hhYmxlLCAvLCAqKnByb3BzKToKCQlueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LHYpOiBwcm9wc30pCgkJc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkgKQoKCWRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTpIYXNoYWJsZSwgdjpIYXNoYWJsZSwgcHJvcCwgLyk6CgkJcmV0dXJuIHNlbGYuRy5lZGdlc1t1LCB2XVtwcm9wXQoKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5lZGl0YWJsZV90ZXh0X2l0ZW0gaW1wb3J0IEVkaXRhYmxlVGV4dEl0ZW0KCgpjbGFzcyBTdGFuZGFyZE5vZGVXaWRnZXQoUUdyYXBoaWNzV2lkZ2V0KToKCWRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ9Tm9uZSk6CgkJc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQoJCXNlbGYuc2V0R2VvbWV0cnkoUVJlY3QoMCwwLDEwMCwyNikpCgkJIyBFbmFibGUgZHJhZ2dpbmcgYW5kIHNlbGVjdGluZwoJCXNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzTW92YWJsZSkKCQlzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc1NlbGVjdGFibGUpCgkJc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNHZW9tZXRyeUNoYW5nZXMpCgkJc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcykKCQlzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgoJCXNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQoJCXNlbGYubGFiZWwuc2V0UG9zKDUsNSkKCQlzZWxmLmxhYmVsLnNldFRleHRXaWR0aChzZWxmLmdlb21ldHJ5KCkud2lkdGgoKS0xMCkKCQlzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCglkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgoJCSMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCgkJIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKCQliZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cyIiIgoKCQkjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CgkJaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CgkJCSMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKCQkJc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCgkJZWxzZToKCQkJcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQoJCQlzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCglkZWYgcGFpbnQoc2VsZiwgcGFpbnRlcjpRUGFpbnRlciwgb3B0aW9uOlFTdHlsZU9wdGlvbkdyYXBoaWNzSXRlbSwgd2lkZ2V0PU5vbmUpOgoJCSMgb3B0aW9uLmRpcmVjdGlvbgoJCSMgb3B0aW9uLmZvbnRNZXRyaWNzCgkJIyBvcHRpb24ucGFsZXR0ZQoJCSMgb3B0aW9uLnJlY3QKCQkjIG9wdGlvbi5zdGF0ZQoJCSMgb3B0aW9uLnN0eWxlT2JqZWN0CgkJIyBvcHRpb24ubGV2ZWxPZkRldGFpbEZyb21UcmFuc2Zvcm0KCgoJCSMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKCQlwYWxldHRlOlFQYWxldHRlID0gb3B0aW9uLnBhbGV0dGUgI3R5cGU6IGlnbm9yZQoJCXN0YXRlOlFTdHlsZS5TdGF0ZUZsYWcgPSBvcHRpb24uc3RhdGUgIyB0eXBlOiBpZ25vcmUKCgkJcGFpbnRlci5zZXRCcnVzaChwYWxldHRlLmJhc2UoKSkKCQkjIHBhaW50ZXIuc2V0QnJ1c2goUXQuTm9CcnVzaCkKCgkJcGVuID0gUVBlbihwYWxldHRlLnRleHQoKS5jb2xvcigpLCAxKQoJCXBlbi5zZXRDb3NtZXRpYyhUcnVlKQoJCXBlbi5zZXRXaWR0aEYoMikKCQlpZiBzdGF0ZSAmIFFTdHlsZS5TdGF0ZUZsYWcuU3RhdGVfU2VsZWN0ZWQ6CgkJCXBlbi5zZXRDb2xvcihwYWxldHRlLmFjY2VudCgpLmNvbG9yKCkpCgkJcGFpbnRlci5zZXRQZW4ocGVuKQoJCXBhaW50ZXIuZHJhd1JvdW5kZWRSZWN0KDAuNSwwLjUsIHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpLCBzZWxmLmdlb21ldHJ5KCkuaGVpZ2h0KCksIDMsMykKCgoKCgoK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkCAAAAAAAA+QIAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMYFAAAAAAAAxwUAAAAAAAAAAAAAxwUAAAAAAADPBQAAAAAAAAAAAADPBQAAAAAAANAFAAAAAAAAAAAAANAFAAAAAAAA2AUAAAAAAAAAAAAAxwUAAAAAAADHBQAAAAAAAAgAAAAgICAgICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYFAAAAAAAAxgUAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					4,
					"left_delete",
					null,
					"BAAAAM8FAAAAAAAAzwUAAAAAAAABAAAAIM4FAAAAAAAAzgUAAAAAAAABAAAAIM0FAAAAAAAAzQUAAAAAAAABAAAAIMwFAAAAAAAAzAUAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwFAAAAAAAAzAUAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " nodes"
					},
					"BgAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADRBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAANIFAAAAAAAA0wUAAAAAAAAAAAAA0wUAAAAAAADUBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANUFAAAAAAAA1wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUFAAAAAAAA1QUAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAADYBQAAAAAAANkFAAAAAAAAAAAAANkFAAAAAAAA2gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYFAAAAAAAA1gUAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANsFAAAAAAAA3AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsFAAAAAAAA2wUAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwFAAAAAAAA3AUAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgFAAAAAAAA6AUAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOkFAAAAAAAA6wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkFAAAAAAAA6QUAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAOoFAAAAAAAA6wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoFAAAAAAAA6gUAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA7AUAAAAAAADtBQAAAAAAAAAAAADtBQAAAAAAAO4FAAAAAAAAAAAAAO4FAAAAAAAA7wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsFAAAAAAAA6wUAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAO8FAAAAAAAA8AUAAAAAAAAAAAAA8AUAAAAAAADxBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8FAAAAAAAA7wUAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA8gUAAAAAAADzBQAAAAAAAAAAAADzBQAAAAAAAPQFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEFAAAAAAAA8QUAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " self.G.node"
					},
					"DAAAAPQFAAAAAAAA9QUAAAAAAAAAAAAA9QUAAAAAAAD2BQAAAAAAAAAAAAD2BQAAAAAAAPcFAAAAAAAAAAAAAPcFAAAAAAAA+AUAAAAAAAAAAAAA+AUAAAAAAAD5BQAAAAAAAAAAAAD5BQAAAAAAAPoFAAAAAAAAAAAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD/BQAAAAAAAAAAAAD/BQAAAAAAAAAGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQFAAAAAAAA9AUAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAAGAAAAAAAAAQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAFRUAAAAAAAAUFQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54LkRpR3JhcGggPSBueC5EaUdyYXBoKCksIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5HID0gRwoKICAgICAgICBmb3IgbiBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIG5vZGUgPSBzZWxmLmFkZE5vZGUobmFtZT1uKQoKICAgICAgICBmb3IgZSBpbiBzZWxmLkcuZWRnZXM6CiAgICAgICAgICAgIHUsIHYgPSBlCgogICAgICAgICAgICBzZWxmLmFkZEVkZ2UodSwgdikKCiAgICBkZWYgcGF0Y2goc2VsZiwgRzogbnguRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZik6CiAgICAJcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKICAgICAgICAgICAgICAgIGNoYW5nZVtrZXldID0gdmFsCiAgICAgICAgbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCiAgICBkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjogSGFzaGFibGUpOgogICAgICAgIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQogICAgICAgIHNlbGYuRy5yZW1vdmVfbm9kZShuKQoKICAgIGRlZiBhZGRFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYpXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdildKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2KQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYpOiBwcm9wc30pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdl1bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEGAAAAAAAAAQYAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "->List[]"
					},
					"CAAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADdBQAAAAAAAAAAAADdBQAAAAAAAN4FAAAAAAAAAAAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA3wUAAAAAAADgBQAAAAAAAAAAAADgBQAAAAAAAOEFAAAAAAAAAAAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADjBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsFAAAAAAAA2wUAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "Hashab"
					},
					"BgAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIFAAAAAAAA4gUAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAOIFAAAAAAAA4gUAAAAAAAAGAAAASGFzaGFi4gUAAAAAAADqBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgFAAAAAAAA6AUAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACkJAAAAAAAAKgkAAAAAAAAAAAAAKgkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAADMJAAAAAAAAOwkAAAAAAAAAAAAAKgkAAAAAAAAqCQAAAAAAAAgAAAAgICAgICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkJAAAAAAAAKQkAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					4,
					"left_delete",
					null,
					"BAAAADIJAAAAAAAAMgkAAAAAAAABAAAAIDEJAAAAAAAAMQkAAAAAAAABAAAAIDAJAAAAAAAAMAkAAAAAAAABAAAAIC8JAAAAAAAALwkAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMJAAAAAAAAMwkAAAAAAAAAAAAAAADwvw"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADIJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8JAAAAAAAALwkAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " edges"
					},
					"BgAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIJAAAAAAAAMgkAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgJAAAAAAAAOgkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgJAAAAAAAAOAkAAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAADkJAAAAAAAAOgkAAAAAAAAAAAAAOgkAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAADwJAAAAAAAAPQkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkJAAAAAAAAOQkAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "->List"
					},
					"BgAAAD4JAAAAAAAAPwkAAAAAAAAAAAAAPwkAAAAAAABACQAAAAAAAAAAAABACQAAAAAAAEEJAAAAAAAAAAAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAABDCQAAAAAAAEQJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4JAAAAAAAAPgkAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					4,
					"left_delete",
					null,
					"BAAAAEMJAAAAAAAAQwkAAAAAAAABAAAAdEIJAAAAAAAAQgkAAAAAAAABAAAAc0EJAAAAAAAAQQkAAAAAAAABAAAAaUAJAAAAAAAAQAkAAAAAAAABAAAATA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQJAAAAAAAARAkAAAAAAAAAAAAAAADwvw"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAABCCQAAAAAAAEMJAAAAAAAAAAAAAEMJAAAAAAAARAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAJAAAAAAAAQAkAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEQJAAAAAAAARgkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQJAAAAAAAARAkAAAAAAAAAAAAAAADwvw"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "Tuple"
					},
					"BQAAAEYJAAAAAAAARwkAAAAAAAAAAAAARwkAAAAAAABICQAAAAAAAAAAAABICQAAAAAAAEkJAAAAAAAAAAAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYJAAAAAAAARgkAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					5,
					"left_delete",
					null,
					"BQAAAEoJAAAAAAAASgkAAAAAAAABAAAAZUkJAAAAAAAASQkAAAAAAAABAAAAbEgJAAAAAAAASAkAAAAAAAABAAAAcEcJAAAAAAAARwkAAAAAAAABAAAAdUYJAAAAAAAARgkAAAAAAAABAAAAVA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsJAAAAAAAASwkAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "Tuple"
					},
					"BQAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUJAAAAAAAARQkAAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEoJAAAAAAAATAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoJAAAAAAAASgkAAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "Hashable,"
					},
					"CQAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAABNCQAAAAAAAE4JAAAAAAAAAAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAAUgkAAAAAAABTCQAAAAAAAAAAAABTCQAAAAAAAFQJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsJAAAAAAAASwkAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " hashab"
					},
					"BwAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABWCQAAAAAAAFcJAAAAAAAAAAAAAFcJAAAAAAAAWAkAAAAAAAAAAAAAWAkAAAAAAABZCQAAAAAAAAAAAABZCQAAAAAAAFoJAAAAAAAAAAAAAFoJAAAAAAAAWwkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQJAAAAAAAAVAkAAAAAAAAAAAAAAADwvw"
				],
				[
					150,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAFUJAAAAAAAAVQkAAAAAAAAGAAAAaGFzaGFiVQkAAAAAAABdCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsJAAAAAAAAWwkAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAF8JAAAAAAAAYAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8JAAAAAAAAXwkAAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABlCQAAAAAAAAAAAABlCQAAAAAAAGYJAAAAAAAAAAAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAABoCQAAAAAAAGkJAAAAAAAAAAAAAGkJAAAAAAAAagkAAAAAAAAAAAAAagkAAAAAAABrCQAAAAAAAAAAAABrCQAAAAAAAGwJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAJAAAAAAAAYAkAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwJAAAAAAAAbQkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwJAAAAAAAAbAkAAAAAAAAAAAAAAADwvw"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG0JAAAAAAAAbwkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0JAAAAAAAAbQkAAAAAAAAAAAAAAADwvw"
				],
				[
					156,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4JAAAAAAAAcAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4JAAAAAAAAbgkAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "u,"
					},
					"AgAAAG8JAAAAAAAAcAkAAAAAAAAAAAAAcAkAAAAAAABxCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8JAAAAAAAAbwkAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAAHEJAAAAAAAAcgkAAAAAAAAAAAAAcgkAAAAAAABzCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEJAAAAAAAAcQkAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB2CQAAAAAAAAAAAAB2CQAAAAAAAHcJAAAAAAAAAAAAAHcJAAAAAAAAeAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQJAAAAAAAAdAkAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " self.G"
					},
					"BwAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAB6CQAAAAAAAHsJAAAAAAAAAAAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAB9CQAAAAAAAH4JAAAAAAAAAAAAAH4JAAAAAAAAfwkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgJAAAAAAAAeAkAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "u,"
					},
					"AgAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkJAAAAAAAAeQkAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsJAAAAAAAAewkAAAAAAAAAAAAAAADwvw"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAH0JAAAAAAAAfgkAAAAAAAAAAAAAfgkAAAAAAAB/CQAAAAAAAAAAAAB/CQAAAAAAAIAJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0JAAAAAAAAfQkAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAJAAAAAAAAgQkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAJAAAAAAAAgAkAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": ".edges"
					},
					"BgAAAIcJAAAAAAAAiAkAAAAAAAAAAAAAiAkAAAAAAACJCQAAAAAAAAAAAACJCQAAAAAAAIoJAAAAAAAAAAAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcJAAAAAAAAhwkAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAkRUAAAAAAACMFQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54LkRpR3JhcGggPSBueC5EaUdyYXBoKCksIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5HID0gRwoKICAgICAgICBmb3IgbiBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIG5vZGUgPSBzZWxmLmFkZE5vZGUobmFtZT1uKQoKICAgICAgICBmb3IgZSBpbiBzZWxmLkcuZWRnZXM6CiAgICAgICAgICAgIHUsIHYgPSBlCgogICAgICAgICAgICBzZWxmLmFkZEVkZ2UodSwgdikKCiAgICBkZWYgcGF0Y2goc2VsZiwgRzogbnguRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZiktPkxpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIHByaW50KCJhZGQgbm9kZSIsIG4pCiAgICAgICAgc2VsZi5HLmFkZF9ub2RlKG4sICoqcHJvcHMpCiAgICAgICAgc2VsZi5ub2Rlc0FkZGVkLmVtaXQoW25dKQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBwcm9wc30pCgogICAgZGVmIHNldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlLCAvLCAqKnByb3BzKToKICAgICAgICAjIGNoYW5nZSBndWFyZCBUT0RPOiBmaW5kIHJlbW92ZWQgcHJvcHMKICAgICAgICBjaGFuZ2UgPSB7fQogICAgICAgIGZvciBrZXksIHZhbCBpbiBwcm9wcy5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWwgIT0gc2VsZi5HLm5vZGVzW25dW2tleV06CiAgICAgICAgICAgICAgICBjaGFuZ2Vba2V5XSA9IHZhbAogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKCiAgICBkZWYgZWRnZXMoc2VsZiktPmxpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAJcmV0dXJuIFsodSwgdikgZm9yIHUsIHYgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBhZGRFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYpXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdildKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2KQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYpOiBwcm9wc30pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdl1bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsIAAAAAAAAWwgAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMUJAAAAAAAAxgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFCQAAAAAAAMUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " key:"
					},
					"BQAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAAygkAAAAAAADLCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGCQAAAAAAAMYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "Hashable\"|"
					},
					"CgAAAMsJAAAAAAAAzAkAAAAAAAAAAAAAzAkAAAAAAADNCQAAAAAAAAAAAADNCQAAAAAAAM4JAAAAAAAAAAAAAM4JAAAAAAAAzwkAAAAAAAAAAAAAzwkAAAAAAADQCQAAAAAAAAAAAADQCQAAAAAAANEJAAAAAAAAAAAAANEJAAAAAAAA0gkAAAAAAAAAAAAA0gkAAAAAAADTCQAAAAAAAAAAAADTCQAAAAAAANQJAAAAAAAAAAAAANQJAAAAAAAA1QkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLCQAAAAAAAMsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAANQJAAAAAAAA1AkAAAAAAAABAAAAfNMJAAAAAAAA0wkAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVCQAAAAAAANUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "|None"
					},
					"BQAAANMJAAAAAAAA1AkAAAAAAAAAAAAA1AkAAAAAAADVCQAAAAAAAAAAAADVCQAAAAAAANYJAAAAAAAAAAAAANYJAAAAAAAA1wkAAAAAAAAAAAAA1wkAAAAAAADYCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTCQAAAAAAANMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " ke"
					},
					"AwAAAIEKAAAAAAAAggoAAAAAAAAAAAAAggoAAAAAAACDCgAAAAAAAAAAAACDCgAAAAAAAIQKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCgAAAAAAAIEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					2,
					"left_delete",
					null,
					"AgAAAIMKAAAAAAAAgwoAAAAAAAABAAAAZYIKAAAAAAAAggoAAAAAAAABAAAAaw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACECgAAAAAAAIQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "key,"
					},
					"BAAAAIIKAAAAAAAAgwoAAAAAAAAAAAAAgwoAAAAAAACECgAAAAAAAAAAAACECgAAAAAAAIUKAAAAAAAAAAAAAIUKAAAAAAAAhgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCCgAAAAAAAIIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "Multi"
					},
					"BQAAAOcDAAAAAAAA6AMAAAAAAAAAAAAA6AMAAAAAAADpAwAAAAAAAAAAAADpAwAAAAAAAOoDAAAAAAAAAAAAAOoDAAAAAAAA6wMAAAAAAAAAAAAA6wMAAAAAAADsAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnAwAAAAAAAOcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"paste",
					null,
					"AgAAAM4CAAAAAAAA2gIAAAAAAAAAAAAA2gIAAAAAAADaAgAAAAAAAAcAAABEaUdyYXBo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOAgAAAAAAANUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"paste",
					null,
					"AgAAAOACAAAAAAAA7AIAAAAAAAAAAAAA7AIAAAAAAADsAgAAAAAAAAcAAABEaUdyYXBo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgAgAAAAAAAOcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "=None"
					},
					"BQAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA6AkAAAAAAADpCQAAAAAAAAAAAADpCQAAAAAAAOoJAAAAAAAAAAAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADsCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnCQAAAAAAAOcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA0BUAAAAAAAC/FQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2ID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYpCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKICAgICAgICAgICAgICAgIGNoYW5nZVtrZXldID0gdmFsCiAgICAgICAgbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCiAgICBkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjogSGFzaGFibGUpOgogICAgICAgIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQogICAgICAgIHNlbGYuRy5yZW1vdmVfbm9kZShuKQoKICAgIGRlZiBlZGdlcyhzZWxmKSAtPiBsaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgIHJldHVybiBbKHUsIHYpIGZvciB1LCB2IGluIHNlbGYuRy5lZGdlc10KCiAgICBkZWYgYWRkRWRnZShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGtleTpIYXNoYWJsZXxOb25lPU5vbmUsIC8sICoqcHJvcHMpOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgc2VsZi5HLmFkZF9lZGdlKHUsIHYsIGtleSwgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYpXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdildKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2KQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYpOiBwcm9wc30pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdl1bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsCQAAAAAAAOwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALEDAAAAAAAAsgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxAwAAAAAAALEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAALIDAAAAAAAAswMAAAAAAAAAAAAAswMAAAAAAAC0AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAwAAAAAAALIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAALMDAAAAAAAAswMAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0AwAAAAAAALQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAALMDAAAAAAAAtAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAwAAAAAAALMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANcDAAAAAAAA2AMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAwAAAAAAANcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAANgDAAAAAAAA2QMAAAAAAAAAAAAA2QMAAAAAAADaAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAwAAAAAAANgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA1hUAAAAAAADYFQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2LCBrID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYsIGspCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKICAgICAgICAgICAgICAgIGNoYW5nZVtrZXldID0gdmFsCiAgICAgICAgbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCiAgICBkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjogSGFzaGFibGUpOgogICAgICAgIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQogICAgICAgIHNlbGYuRy5yZW1vdmVfbm9kZShuKQoKICAgIGRlZiBlZGdlcyhzZWxmKSAtPiBsaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgIHJldHVybiBbKHUsIHYpIGZvciB1LCB2IGluIHNlbGYuRy5lZGdlc10KCiAgICBkZWYgYWRkRWRnZSgKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGtleTogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh1KQogICAgICAgIGlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHYpCgogICAgICAgIHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrZXksICoqcHJvcHMpCiAgICAgICAgc2VsZi5lZGdlc0FkZGVkLmVtaXQoWyh1LCB2KV0pCgogICAgZGVmIHJlbW92ZV9lZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYpXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdikKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCAvLCAqKnByb3BzKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2KTogcHJvcHN9KQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFtuXSwgbGlzdChwcm9wcy5rZXlzKCkpKQoKICAgIGRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBwcm9wLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLmVkZ2VzW3UsIHZdW3Byb3BdCgoKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5lZGl0YWJsZV90ZXh0X2l0ZW0gaW1wb3J0IEVkaXRhYmxlVGV4dEl0ZW0KCgpjbGFzcyBTdGFuZGFyZE5vZGVXaWRnZXQoUUdyYXBoaWNzV2lkZ2V0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuc2V0R2VvbWV0cnkoUVJlY3QoMCwgMCwgMTAwLCAyNikpCiAgICAgICAgIyBFbmFibGUgZHJhZ2dpbmcgYW5kIHNlbGVjdGluZwogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzTW92YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc1NlbGVjdGFibGUpCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNHZW9tZXRyeUNoYW5nZXMpCiAgICAgICAgc2VsZi5zZXRGbGFnKAogICAgICAgICAgICBRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbVNlbmRzU2NlbmVQb3NpdGlvbkNoYW5nZXMKICAgICAgICApCiAgICAgICAgc2VsZi5zZXRBY2NlcHRIb3ZlckV2ZW50cyhUcnVlKQoKICAgICAgICBzZWxmLmxhYmVsID0gRWRpdGFibGVUZXh0SXRlbShwYXJlbnQ9c2VsZikKICAgICAgICBzZWxmLmxhYmVsLnNldFBvcyg1LCA1KQogICAgICAgIHNlbGYubGFiZWwuc2V0VGV4dFdpZHRoKHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpIC0gMTApCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0KCJIZWxsbyIpCgogICAgZGVmIG1vdXNlRG91YmxlQ2xpY2tFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KToKICAgICAgICAjIEVuYWJsZSBlZGl0aW5nIHN1Yml0ZW1zIG9uIGRvdWJsZS1jbGljawogICAgICAgICIiInBhcmVudCBub2RlIG11c3QgbWFudWFsbHkgY2FsIHRoZSBkb3VibGUgY2xpY2sgZXZlbnQsCiAgICAgICAgYmVjYXVzZSBhbiBpdGVtIG5vciBzbGVjdGFibGUgbm9yIG1vdmFibGUgd2lsbCBub3QgcmVjZWl2ZSBwcmVzcyBldmVudHMKICAgICAgICAiIiIKCiAgICAgICAgIyBDaGVjayBpZiBkb3VibGUtY2xpY2sgaXMgd2l0aGluIHRoZSB0ZXh0IGl0ZW3igJlzIGJvdW5kaW5nIGJveAogICAgICAgIGlmIHNlbGYubGFiZWwuY29udGFpbnMoc2VsZi5tYXBGcm9tU2NlbmUoZXZlbnQuc2NlbmVQb3MoKSkpOgogICAgICAgICAgICAjIEZvcndhcmQgdGhlIGV2ZW50IHRvIGxhYmVsIGlmIGNsaWNrZWQgaW5zaWRlIGl0CiAgICAgICAgICAgIHNlbGYubGFiZWwubW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJOb2RlSXRlbS0+bW91c2VEb3VibGVDbGlja0V2ZW50IikKICAgICAgICAgICAgc3VwZXIoKS5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCgogICAgZGVmIHBhaW50KAogICAgICAgIHNlbGYsIHBhaW50ZXI6IFFQYWludGVyLCBvcHRpb246IFFTdHlsZU9wdGlvbkdyYXBoaWNzSXRlbSwgd2lkZ2V0PU5vbmUKICAgICk6CiAgICAgICAgIyBvcHRpb24uZGlyZWN0aW9uCiAgICAgICAgIyBvcHRpb24uZm9udE1ldHJpY3MKICAgICAgICAjIG9wdGlvbi5wYWxldHRlCiAgICAgICAgIyBvcHRpb24ucmVjdAogICAgICAgICMgb3B0aW9uLnN0YXRlCiAgICAgICAgIyBvcHRpb24uc3R5bGVPYmplY3QKICAgICAgICAjIG9wdGlvbi5sZXZlbE9mRGV0YWlsRnJvbVRyYW5zZm9ybQoKICAgICAgICAjIERyYXcgdGhlIG5vZGUgcmVjdGFuZ2xlCiAgICAgICAgcGFsZXR0ZTogUVBhbGV0dGUgPSBvcHRpb24ucGFsZXR0ZSAgIyB0eXBlOiBpZ25vcmUKICAgICAgICBzdGF0ZTogUVN0eWxlLlN0YXRlRmxhZyA9IG9wdGlvbi5zdGF0ZSAgIyB0eXBlOiBpZ25vcmUKCiAgICAgICAgcGFpbnRlci5zZXRCcnVzaChwYWxldHRlLmJhc2UoKSkKICAgICAgICAjIHBhaW50ZXIuc2V0QnJ1c2goUXQuTm9CcnVzaCkKCiAgICAgICAgcGVuID0gUVBlbihwYWxldHRlLnRleHQoKS5jb2xvcigpLCAxKQogICAgICAgIHBlbi5zZXRDb3NtZXRpYyhUcnVlKQogICAgICAgIHBlbi5zZXRXaWR0aEYoMikKICAgICAgICBpZiBzdGF0ZSAmIFFTdHlsZS5TdGF0ZUZsYWcuU3RhdGVfU2VsZWN0ZWQ6CiAgICAgICAgICAgIHBlbi5zZXRDb2xvcihwYWxldHRlLmFjY2VudCgpLmNvbG9yKCkpCiAgICAgICAgcGFpbnRlci5zZXRQZW4ocGVuKQogICAgICAgIHBhaW50ZXIuZHJhd1JvdW5kZWRSZWN0KAogICAgICAgICAgICAwLjUsIDAuNSwgc2VsZi5nZW9tZXRyeSgpLndpZHRoKCksIHNlbGYuZ2VvbWV0cnkoKS5oZWlnaHQoKSwgMywgMwogICAgICAgICkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcBAAAAAAAAJwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABcLAAAAAAAAGAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXCwAAAAAAABcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " k:Has"
					},
					"BgAAABgLAAAAAAAAGQsAAAAAAAAAAAAAGQsAAAAAAAAaCwAAAAAAAAAAAAAaCwAAAAAAABsLAAAAAAAAAAAAABsLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAdCwAAAAAAAAAAAAAdCwAAAAAAAB4LAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYCwAAAAAAABgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAABsLAAAAAAAAGwsAAAAAAAADAAAASGFzGwsAAAAAAAAjCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeCwAAAAAAAB4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "edges"
					},
					"BgAAAAYMAAAAAAAABwwAAAAAAAAAAAAABwwAAAAAAAAHDAAAAAAAAAUAAABub2RlcwcMAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAJDAAAAAAAAAAAAAAJDAAAAAAAAAoMAAAAAAAAAAAAAAoMAAAAAAAACwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALDAAAAAAAAAYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALILAAAAAAAAswsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyCwAAAAAAALILAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " k:Hashab"
					},
					"CQAAALMLAAAAAAAAtAsAAAAAAAAAAAAAtAsAAAAAAAC1CwAAAAAAAAAAAAC1CwAAAAAAALYLAAAAAAAAAAAAALYLAAAAAAAAtwsAAAAAAAAAAAAAtwsAAAAAAAC4CwAAAAAAAAAAAAC4CwAAAAAAALkLAAAAAAAAAAAAALkLAAAAAAAAugsAAAAAAAAAAAAAugsAAAAAAAC7CwAAAAAAAAAAAAC7CwAAAAAAALwLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzCwAAAAAAALMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAALYLAAAAAAAAtgsAAAAAAAAGAAAASGFzaGFitgsAAAAAAAC+CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8CwAAAAAAALwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH4MAAAAAAAAfwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+DAAAAAAAAH4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": " k:"
					},
					"AwAAAH8MAAAAAAAAgAwAAAAAAAAAAAAAgAwAAAAAAACBDAAAAAAAAAAAAACBDAAAAAAAAIIMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/DAAAAAAAAH8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "Hasha"
					},
					"BQAAAIIMAAAAAAAAgwwAAAAAAAAAAAAAgwwAAAAAAACEDAAAAAAAAAAAAACEDAAAAAAAAIUMAAAAAAAAAAAAAIUMAAAAAAAAhgwAAAAAAAAAAAAAhgwAAAAAAACHDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCDAAAAAAAAIIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAIIMAAAAAAAAggwAAAAAAAAFAAAASGFzaGGCDAAAAAAAAIoMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHDAAAAAAAAIcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALUMAAAAAAAAtgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1DAAAAAAAALUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAALYMAAAAAAAAtwwAAAAAAAAAAAAAtwwAAAAAAAC4DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2DAAAAAAAALYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					3,
					"left_delete",
					null,
					"AwAAALcMAAAAAAAAtwwAAAAAAAABAAAAa7YMAAAAAAAAtgwAAAAAAAABAAAAILUMAAAAAAAAtQwAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4DAAAAAAAALgMAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALYMAAAAAAAAtwwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2DAAAAAAAALYMAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAALcMAAAAAAAAuAwAAAAAAAAAAAAAuAwAAAAAAAC5DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3DAAAAAAAALcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"left_delete",
					null,
					"AQAAAC8MAAAAAAAALwwAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwDAAAAAAAADAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC8MAAAAAAAAMQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvDAAAAAAAAC8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "u,"
					},
					"AgAAADAMAAAAAAAAMQwAAAAAAAAAAAAAMQwAAAAAAAAyDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwDAAAAAAAADAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " v,"
					},
					"AwAAADIMAAAAAAAAMwwAAAAAAAAAAAAAMwwAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADUMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyDAAAAAAAADIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAADUMAAAAAAAANgwAAAAAAAAAAAAANgwAAAAAAAA3DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1DAAAAAAAADUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPoLAAAAAAAA+wsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CwAAAAAAAPoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAPsLAAAAAAAA/AsAAAAAAAAAAAAA/AsAAAAAAAD9CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7CwAAAAAAAPsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFQLAAAAAAAAVQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCwAAAAAAAFQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " j"
					},
					"AgAAAFULAAAAAAAAVgsAAAAAAAAAAAAAVgsAAAAAAABXCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVCwAAAAAAAFULAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"left_delete",
					null,
					"AQAAAFYLAAAAAAAAVgsAAAAAAAABAAAAag",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXCwAAAAAAAFcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAFYLAAAAAAAAVwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWCwAAAAAAAFYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHoLAAAAAAAAewsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CwAAAAAAAHoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAHsLAAAAAAAAfAsAAAAAAAAAAAAAfAsAAAAAAAB9CwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7CwAAAAAAAHsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOAKAAAAAAAA4QoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgCgAAAAAAAOAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCgAAAAAAAOEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"right_delete",
					null,
					"AQAAAOcJAAAAAAAA5wkAAAAAAAABAAAAeQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnCQAAAAAAAOcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"left_delete",
					null,
					"AQAAAOYJAAAAAAAA5gkAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnCQAAAAAAAOcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					2,
					"left_delete",
					null,
					"AgAAAK8KAAAAAAAArwoAAAAAAAABAAAAea4KAAAAAAAArgoAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCgAAAAAAALAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "prop"
					},
					"BQAAAIEHAAAAAAAAggcAAAAAAAAAAAAAggcAAAAAAACCBwAAAAAAAAMAAABrZXmCBwAAAAAAAIMHAAAAAAAAAAAAAIMHAAAAAAAAhAcAAAAAAAAAAAAAhAcAAAAAAACFBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBBwAAAAAAAIQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"AgAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACMBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKBwAAAAAAAIoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					251,
					1,
					"paste",
					null,
					"AgAAAK4HAAAAAAAAsgcAAAAAAAAAAAAAsgcAAAAAAACyBwAAAAAAAAMAAABrZXk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuBwAAAAAAALEHAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"paste",
					null,
					"AgAAAAEIAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAFCAAAAAAAAAMAAABrZXk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABCAAAAAAAAAQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"paste",
					null,
					"AgAAAOQHAAAAAAAA6AcAAAAAAAAAAAAA6AcAAAAAAADoBwAAAAAAAAMAAABrZXk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkBwAAAAAAAOcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"paste",
					null,
					"AgAAAAoIAAAAAAAADwgAAAAAAAAAAAAADwgAAAAAAAAPCAAAAAAAAAMAAAB2YWw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKCAAAAAAAAA0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					276,
					1,
					"paste",
					null,
					"AgAAAM0HAAAAAAAA0gcAAAAAAAAAAAAA0gcAAAAAAADSBwAAAAAAAAMAAAB2YWw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNBwAAAAAAANAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAKBYAAAAAAAAZFgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2LCBrID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYsIGspCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICByZXR1cm4gWyh1LCB2KSBmb3IgdSwgdiBpbiBzZWxmLkcuZWRnZXNdCgogICAgZGVmIGFkZEVkZ2UoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSB8IE5vbmUgPSBOb25lLCAvLCAqKnByb3BzCiAgICApOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgc2VsZi5HLmFkZF9lZGdlKHUsIHYsIGssICoqcHJvcHMpCiAgICAgICAgc2VsZi5lZGdlc0FkZGVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHJlbW92ZV9lZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazpIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdiwgaykKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOkhhc2hhYmxlLCAvLCAqKnByb3BzKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2LCBrKTogcHJvcHN9KQogICAgICAgIHNlbGYuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFsodSwgdiwgayldLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6SGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdiwga11bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7CAAAAAAAAHsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1AQAAAAAAAPUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " Hashable"
					},
					"CQAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA9wEAAAAAAAD4AQAAAAAAAAAAAAD4AQAAAAAAAPkBAAAAAAAAAAAAAPkBAAAAAAAA+gEAAAAAAAAAAAAA+gEAAAAAAAD7AQAAAAAAAAAAAAD7AQAAAAAAAPwBAAAAAAAAAAAAAPwBAAAAAAAA/QEAAAAAAAAAAAAA/QEAAAAAAAD+AQAAAAAAAAAAAAD+AQAAAAAAAP8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AQAAAAAAAPYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEsCAAAAAAAATAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLAgAAAAAAAEsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " Hashable"
					},
					"CQAAAEwCAAAAAAAATQIAAAAAAAAAAAAATQIAAAAAAABOAgAAAAAAAAAAAABOAgAAAAAAAE8CAAAAAAAAAAAAAE8CAAAAAAAAUAIAAAAAAAAAAAAAUAIAAAAAAABRAgAAAAAAAAAAAABRAgAAAAAAAFICAAAAAAAAAAAAAFICAAAAAAAAUwIAAAAAAAAAAAAAUwIAAAAAAABUAgAAAAAAAAAAAABUAgAAAAAAAFUCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMAgAAAAAAAEwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					314,
					1,
					"paste",
					null,
					"AgAAAIoCAAAAAAAArQIAAAAAAAAAAAAArQIAAAAAAACtAgAAAAAAAAgAAABIYXNoYWJsZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAgAAAAAAAJICAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4CAAAAAAAA3wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeAgAAAAAAAN4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"paste",
					null,
					"AQAAAN8CAAAAAAAACgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfAgAAAAAAAN8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": ":Tuple"
					},
					"BgAAAOoDAAAAAAAA6wMAAAAAAAAAAAAA6wMAAAAAAADsAwAAAAAAAAAAAADsAwAAAAAAAO0DAAAAAAAAAAAAAO0DAAAAAAAA7gMAAAAAAAAAAAAA7gMAAAAAAADvAwAAAAAAAAAAAADvAwAAAAAAAPADAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqAwAAAAAAAOoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					342,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPADAAAAAAAA8gMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwAwAAAAAAAPADAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					8,
					"left_delete",
					null,
					"CAAAAPEDAAAAAAAA8QMAAAAAAAABAAAAXfADAAAAAAAA8AMAAAAAAAABAAAAW+8DAAAAAAAA7wMAAAAAAAABAAAAZe4DAAAAAAAA7gMAAAAAAAABAAAAbO0DAAAAAAAA7QMAAAAAAAABAAAAcOwDAAAAAAAA7AMAAAAAAAABAAAAdesDAAAAAAAA6wMAAAAAAAABAAAAVOoDAAAAAAAA6gMAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyAwAAAAAAAPIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0CQAAAAAAAPQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAPUJAAAAAAAA9gkAAAAAAAAAAAAA9gkAAAAAAAD3CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1CQAAAAAAAPUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAEKAAAAAAAAAgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABCgAAAAAAAAEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAAIKAAAAAAAAAwoAAAAAAAAAAAAAAwoAAAAAAAAECgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCgAAAAAAAAIKAAAAAAAAAAAAAAAA8L8"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANsJAAAAAAAA3AkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbCQAAAAAAANsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " Hashable"
					},
					"CQAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADeCQAAAAAAAAAAAADeCQAAAAAAAN8JAAAAAAAAAAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAADhCQAAAAAAAOIJAAAAAAAAAAAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADkCQAAAAAAAAAAAADkCQAAAAAAAOUJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcCQAAAAAAANwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					389,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAsBYAAAAAAACVFgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXSwgRGljdFtzdHIsIEFueV1dCiAgICBlZGdlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIHByaW50KCJhZGQgbm9kZSIsIG4pCiAgICAgICAgc2VsZi5HLmFkZF9ub2RlKG4sICoqcHJvcHMpCiAgICAgICAgc2VsZi5ub2Rlc0FkZGVkLmVtaXQoW25dKQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBwcm9wc30pCgogICAgZGVmIHNldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlLCAvLCAqKnByb3BzKToKICAgICAgICAjIGNoYW5nZSBndWFyZCBUT0RPOiBmaW5kIHJlbW92ZWQgcHJvcHMKICAgICAgICBjaGFuZ2UgPSB7fQogICAgICAgIGZvciBwcm9wLCB2YWx1ZSBpbiBwcm9wcy5pdGVtcygpOgogICAgICAgICAgICBpZiBwcm9wIG5vdCBpbiBzZWxmLkcubm9kZXNbbl0gb3IgdmFsdWUgIT0gc2VsZi5HLm5vZGVzW25dW3Byb3BdOgogICAgICAgICAgICAgICAgY2hhbmdlW3Byb3BdID0gdmFsdWUKICAgICAgICBueC5zZXRfbm9kZV9hdHRyaWJ1dGVzKHNlbGYuRywge246IGNoYW5nZX0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IGNoYW5nZX0pCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0eShzZWxmLCBuOiBIYXNoYWJsZSwgbmFtZSwgLyk6CiAgICAgICAgcmV0dXJuIHNlbGYuRy5ub2Rlc1tuXVtuYW1lXQoKICAgIGRlZiByZW1vdmVfbm9kZShzZWxmLCBuOiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5HLnJlbW92ZV9ub2RlKG4pCgogICAgZGVmIGVkZ2VzKHNlbGYpIC0+IGxpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgIHJldHVybiBbKHUsIHYsIGspIGZvciB1LCB2LCBrIGluIHNlbGYuRy5lZGdlc10KCiAgICBkZWYgYWRkRWRnZSgKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlIHwgTm9uZSA9IE5vbmUsIC8sICoqcHJvcHMKICAgICk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgaywgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdiwgaykKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2LCBrKTogcHJvcHN9KQogICAgICAgIHNlbGYuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFsodSwgdiwgayldLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCBwcm9wLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLmVkZ2VzW3UsIHYsIGtdW3Byb3BdCgoKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5lZGl0YWJsZV90ZXh0X2l0ZW0gaW1wb3J0IEVkaXRhYmxlVGV4dEl0ZW0KCgpjbGFzcyBTdGFuZGFyZE5vZGVXaWRnZXQoUUdyYXBoaWNzV2lkZ2V0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuc2V0R2VvbWV0cnkoUVJlY3QoMCwgMCwgMTAwLCAyNikpCiAgICAgICAgIyBFbmFibGUgZHJhZ2dpbmcgYW5kIHNlbGVjdGluZwogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzTW92YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc1NlbGVjdGFibGUpCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNHZW9tZXRyeUNoYW5nZXMpCiAgICAgICAgc2VsZi5zZXRGbGFnKAogICAgICAgICAgICBRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbVNlbmRzU2NlbmVQb3NpdGlvbkNoYW5nZXMKICAgICAgICApCiAgICAgICAgc2VsZi5zZXRBY2NlcHRIb3ZlckV2ZW50cyhUcnVlKQoKICAgICAgICBzZWxmLmxhYmVsID0gRWRpdGFibGVUZXh0SXRlbShwYXJlbnQ9c2VsZikKICAgICAgICBzZWxmLmxhYmVsLnNldFBvcyg1LCA1KQogICAgICAgIHNlbGYubGFiZWwuc2V0VGV4dFdpZHRoKHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpIC0gMTApCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0KCJIZWxsbyIpCgogICAgZGVmIG1vdXNlRG91YmxlQ2xpY2tFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KToKICAgICAgICAjIEVuYWJsZSBlZGl0aW5nIHN1Yml0ZW1zIG9uIGRvdWJsZS1jbGljawogICAgICAgICIiInBhcmVudCBub2RlIG11c3QgbWFudWFsbHkgY2FsIHRoZSBkb3VibGUgY2xpY2sgZXZlbnQsCiAgICAgICAgYmVjYXVzZSBhbiBpdGVtIG5vciBzbGVjdGFibGUgbm9yIG1vdmFibGUgd2lsbCBub3QgcmVjZWl2ZSBwcmVzcyBldmVudHMKICAgICAgICAiIiIKCiAgICAgICAgIyBDaGVjayBpZiBkb3VibGUtY2xpY2sgaXMgd2l0aGluIHRoZSB0ZXh0IGl0ZW3igJlzIGJvdW5kaW5nIGJveAogICAgICAgIGlmIHNlbGYubGFiZWwuY29udGFpbnMoc2VsZi5tYXBGcm9tU2NlbmUoZXZlbnQuc2NlbmVQb3MoKSkpOgogICAgICAgICAgICAjIEZvcndhcmQgdGhlIGV2ZW50IHRvIGxhYmVsIGlmIGNsaWNrZWQgaW5zaWRlIGl0CiAgICAgICAgICAgIHNlbGYubGFiZWwubW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJOb2RlSXRlbS0+bW91c2VEb3VibGVDbGlja0V2ZW50IikKICAgICAgICAgICAgc3VwZXIoKS5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCgogICAgZGVmIHBhaW50KAogICAgICAgIHNlbGYsIHBhaW50ZXI6IFFQYWludGVyLCBvcHRpb246IFFTdHlsZU9wdGlvbkdyYXBoaWNzSXRlbSwgd2lkZ2V0PU5vbmUKICAgICk6CiAgICAgICAgIyBvcHRpb24uZGlyZWN0aW9uCiAgICAgICAgIyBvcHRpb24uZm9udE1ldHJpY3MKICAgICAgICAjIG9wdGlvbi5wYWxldHRlCiAgICAgICAgIyBvcHRpb24ucmVjdAogICAgICAgICMgb3B0aW9uLnN0YXRlCiAgICAgICAgIyBvcHRpb24uc3R5bGVPYmplY3QKICAgICAgICAjIG9wdGlvbi5sZXZlbE9mRGV0YWlsRnJvbVRyYW5zZm9ybQoKICAgICAgICAjIERyYXcgdGhlIG5vZGUgcmVjdGFuZ2xlCiAgICAgICAgcGFsZXR0ZTogUVBhbGV0dGUgPSBvcHRpb24ucGFsZXR0ZSAgIyB0eXBlOiBpZ25vcmUKICAgICAgICBzdGF0ZTogUVN0eWxlLlN0YXRlRmxhZyA9IG9wdGlvbi5zdGF0ZSAgIyB0eXBlOiBpZ25vcmUKCiAgICAgICAgcGFpbnRlci5zZXRCcnVzaChwYWxldHRlLmJhc2UoKSkKICAgICAgICAjIHBhaW50ZXIuc2V0QnJ1c2goUXQuTm9CcnVzaCkKCiAgICAgICAgcGVuID0gUVBlbihwYWxldHRlLnRleHQoKS5jb2xvcigpLCAxKQogICAgICAgIHBlbi5zZXRDb3NtZXRpYyhUcnVlKQogICAgICAgIHBlbi5zZXRXaWR0aEYoMikKICAgICAgICBpZiBzdGF0ZSAmIFFTdHlsZS5TdGF0ZUZsYWcuU3RhdGVfU2VsZWN0ZWQ6CiAgICAgICAgICAgIHBlbi5zZXRDb2xvcihwYWxldHRlLmFjY2VudCgpLmNvbG9yKCkpCiAgICAgICAgcGFpbnRlci5zZXRQZW4ocGVuKQogICAgICAgIHBhaW50ZXIuZHJhd1JvdW5kZWRSZWN0KAogICAgICAgICAgICAwLjUsIDAuNSwgc2VsZi5nZW9tZXRyeSgpLndpZHRoKCksIHNlbGYuZ2VvbWV0cnkoKS5oZWlnaHQoKSwgMywgMwogICAgICAgICkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgFAAAAAAAAOAUAAAAAAAAAAAAAAAA8L8"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "\nself.edge"
					},
					"CwAAABAMAAAAAAAAEQwAAAAAAAAAAAAAEQwAAAAAAAAZDAAAAAAAAAAAAAAZDAAAAAAAABoMAAAAAAAAAAAAABoMAAAAAAAAGwwAAAAAAAAAAAAAGwwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAAB0MAAAAAAAAAAAAAB0MAAAAAAAAHgwAAAAAAAAAAAAAHgwAAAAAAAAfDAAAAAAAAAAAAAAfDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAIQwAAAAAAAAAAAAAIQwAAAAAAAAiDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQDAAAAAAAABAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "sR"
					},
					"AgAAACIMAAAAAAAAIwwAAAAAAAAAAAAAIwwAAAAAAAAkDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiDAAAAAAAACIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					412,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "edgesRemoved"
					},
					"AgAAAB4MAAAAAAAAHgwAAAAAAAAGAAAAZWRnZXNSHgwAAAAAAAAqDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkDAAAAAAAACQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					413,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACoMAAAAAAAALAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqDAAAAAAAACoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"paste",
					null,
					"AgAAACoMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAAA8DAAAAAAAAAIAAAAoKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsDAAAAAAAACoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA3BYAAAAAAADeFgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQogICAgZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIERpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2LCBrID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYsIGspCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh1KQogICAgICAgIGlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHYpCgogICAgICAgIHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrLCAqKnByb3BzKQogICAgICAgIHNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiByZW1vdmVfZWRnZShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2LCBrKQogICAgICAgIHNlbGYuZWRnZXNSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHNldEVkZ2VQcm9wZXJ0aWVzKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIC8sICoqcHJvcHMKICAgICk6CiAgICAgICAgbnguc2V0X2VkZ2VfYXR0cmlidXRlcyhzZWxmLkcsIHsodSwgdiwgayk6IHByb3BzfSkKICAgICAgICBzZWxmLmVkZ2VzUHJvcGVydGllc0NoYW5nZWQuZW1pdChbKHUsIHYsIGspXSwgbGlzdChwcm9wcy5rZXlzKCkpKQoKICAgIGRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgcHJvcCwgLyk6CiAgICAgICAgcmV0dXJuIHNlbGYuRy5lZGdlc1t1LCB2LCBrXVtwcm9wXQoKCmZyb20gcHlsaXZlLlF0R3JhcGhFZGl0b3IuZWRpdGFibGVfdGV4dF9pdGVtIGltcG9ydCBFZGl0YWJsZVRleHRJdGVtCgoKY2xhc3MgU3RhbmRhcmROb2RlV2lkZ2V0KFFHcmFwaGljc1dpZGdldCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLnNldEdlb21ldHJ5KFFSZWN0KDAsIDAsIDEwMCwgMjYpKQogICAgICAgICMgRW5hYmxlIGRyYWdnaW5nIGFuZCBzZWxlY3RpbmcKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc01vdmFibGUpCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNTZWxlY3RhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbVNlbmRzR2VvbWV0cnlDaGFuZ2VzKQogICAgICAgIHNlbGYuc2V0RmxhZygKICAgICAgICAgICAgUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc1NjZW5lUG9zaXRpb25DaGFuZ2VzCiAgICAgICAgKQogICAgICAgIHNlbGYuc2V0QWNjZXB0SG92ZXJFdmVudHMoVHJ1ZSkKCiAgICAgICAgc2VsZi5sYWJlbCA9IEVkaXRhYmxlVGV4dEl0ZW0ocGFyZW50PXNlbGYpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRQb3MoNSwgNSkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHRXaWR0aChzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSAtIDEwKQogICAgICAgIHNlbGYubGFiZWwuc2V0VGV4dCgiSGVsbG8iKQoKICAgIGRlZiBtb3VzZURvdWJsZUNsaWNrRXZlbnQoc2VsZiwgZXZlbnQ6IFFHcmFwaGljc1NjZW5lTW91c2VFdmVudCk6CiAgICAgICAgIyBFbmFibGUgZWRpdGluZyBzdWJpdGVtcyBvbiBkb3VibGUtY2xpY2sKICAgICAgICAiIiJwYXJlbnQgbm9kZSBtdXN0IG1hbnVhbGx5IGNhbCB0aGUgZG91YmxlIGNsaWNrIGV2ZW50LAogICAgICAgIGJlY2F1c2UgYW4gaXRlbSBub3Igc2xlY3RhYmxlIG5vciBtb3ZhYmxlIHdpbGwgbm90IHJlY2VpdmUgcHJlc3MgZXZlbnRzCiAgICAgICAgIiIiCgogICAgICAgICMgQ2hlY2sgaWYgZG91YmxlLWNsaWNrIGlzIHdpdGhpbiB0aGUgdGV4dCBpdGVt4oCZcyBib3VuZGluZyBib3gKICAgICAgICBpZiBzZWxmLmxhYmVsLmNvbnRhaW5zKHNlbGYubWFwRnJvbVNjZW5lKGV2ZW50LnNjZW5lUG9zKCkpKToKICAgICAgICAgICAgIyBGb3J3YXJkIHRoZSBldmVudCB0byBsYWJlbCBpZiBjbGlja2VkIGluc2lkZSBpdAogICAgICAgICAgICBzZWxmLmxhYmVsLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiTm9kZUl0ZW0tPm1vdXNlRG91YmxlQ2xpY2tFdmVudCIpCiAgICAgICAgICAgIHN1cGVyKCkubW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KQoKICAgIGRlZiBwYWludCgKICAgICAgICBzZWxmLCBwYWludGVyOiBRUGFpbnRlciwgb3B0aW9uOiBRU3R5bGVPcHRpb25HcmFwaGljc0l0ZW0sIHdpZGdldD1Ob25lCiAgICApOgogICAgICAgICMgb3B0aW9uLmRpcmVjdGlvbgogICAgICAgICMgb3B0aW9uLmZvbnRNZXRyaWNzCiAgICAgICAgIyBvcHRpb24ucGFsZXR0ZQogICAgICAgICMgb3B0aW9uLnJlY3QKICAgICAgICAjIG9wdGlvbi5zdGF0ZQogICAgICAgICMgb3B0aW9uLnN0eWxlT2JqZWN0CiAgICAgICAgIyBvcHRpb24ubGV2ZWxPZkRldGFpbEZyb21UcmFuc2Zvcm0KCiAgICAgICAgIyBEcmF3IHRoZSBub2RlIHJlY3RhbmdsZQogICAgICAgIHBhbGV0dGU6IFFQYWxldHRlID0gb3B0aW9uLnBhbGV0dGUgICMgdHlwZTogaWdub3JlCiAgICAgICAgc3RhdGU6IFFTdHlsZS5TdGF0ZUZsYWcgPSBvcHRpb24uc3RhdGUgICMgdHlwZTogaWdub3JlCgogICAgICAgIHBhaW50ZXIuc2V0QnJ1c2gocGFsZXR0ZS5iYXNlKCkpCiAgICAgICAgIyBwYWludGVyLnNldEJydXNoKFF0Lk5vQnJ1c2gpCgogICAgICAgIHBlbiA9IFFQZW4ocGFsZXR0ZS50ZXh0KCkuY29sb3IoKSwgMSkKICAgICAgICBwZW4uc2V0Q29zbWV0aWMoVHJ1ZSkKICAgICAgICBwZW4uc2V0V2lkdGhGKDIpCiAgICAgICAgaWYgc3RhdGUgJiBRU3R5bGUuU3RhdGVGbGFnLlN0YXRlX1NlbGVjdGVkOgogICAgICAgICAgICBwZW4uc2V0Q29sb3IocGFsZXR0ZS5hY2NlbnQoKS5jb2xvcigpKQogICAgICAgIHBhaW50ZXIuc2V0UGVuKHBlbikKICAgICAgICBwYWludGVyLmRyYXdSb3VuZGVkUmVjdCgKICAgICAgICAgICAgMC41LCAwLjUsIHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpLCBzZWxmLmdlb21ldHJ5KCkuaGVpZ2h0KCksIDMsIDMKICAgICAgICApCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8DAAAAAAAADwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": "\nself.nodes"
					},
					"DAAAAMIJAAAAAAAAwwkAAAAAAAAAAAAAwwkAAAAAAADLCQAAAAAAAAAAAADLCQAAAAAAAMwJAAAAAAAAAAAAAMwJAAAAAAAAzQkAAAAAAAAAAAAAzQkAAAAAAADOCQAAAAAAAAAAAADOCQAAAAAAAM8JAAAAAAAAAAAAAM8JAAAAAAAA0AkAAAAAAAAAAAAA0AkAAAAAAADRCQAAAAAAAAAAAADRCQAAAAAAANIJAAAAAAAAAAAAANIJAAAAAAAA0wkAAAAAAAAAAAAA0wkAAAAAAADUCQAAAAAAAAAAAADUCQAAAAAAANUJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCCQAAAAAAAMIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "Re"
					},
					"AgAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADXCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVCQAAAAAAANUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nodesRemoved"
					},
					"AgAAANAJAAAAAAAA0AkAAAAAAAAHAAAAbm9kZXNSZdAJAAAAAAAA3AkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXCQAAAAAAANcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					434,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANwJAAAAAAAA3gkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcCQAAAAAAANwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "emit"
					},
					"BAAAAN0JAAAAAAAA3gkAAAAAAAAAAAAA3gkAAAAAAADfCQAAAAAAAAAAAADfCQAAAAAAAOAJAAAAAAAAAAAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdCQAAAAAAAN0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					436,
					4,
					"left_delete",
					null,
					"BAAAAOAJAAAAAAAA4AkAAAAAAAABAAAAdN8JAAAAAAAA3wkAAAAAAAABAAAAad4JAAAAAAAA3gkAAAAAAAABAAAAbd0JAAAAAAAA3QkAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCQAAAAAAAOEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					437,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANwJAAAAAAAA3AkAAAAAAAABAAAAKNwJAAAAAAAA3AkAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdCQAAAAAAAN0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": ".emit"
					},
					"BQAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADeCQAAAAAAAAAAAADeCQAAAAAAAN8JAAAAAAAAAAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcCQAAAAAAANwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					439,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOEJAAAAAAAA4wkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCQAAAAAAAOEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiCQAAAAAAAOIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					3,
					"left_delete",
					null,
					"AwAAAOMJAAAAAAAA4wkAAAAAAAABAAAAXeIJAAAAAAAA4gkAAAAAAAABAAAAcOEJAAAAAAAA4QkAAAAAAAABAAAAWw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkCQAAAAAAAOQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					443,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOEJAAAAAAAA4wkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCQAAAAAAAOEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiCQAAAAAAAOIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA/hYAAAAAAAAAFwAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQogICAgZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIERpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2LCBrID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYsIGspCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0W25dCgogICAgZGVmIGVkZ2VzKHNlbGYpIC0+IGxpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dOgogICAgICAgIHJldHVybiBbKHUsIHYsIGspIGZvciB1LCB2LCBrIGluIHNlbGYuRy5lZGdlc10KCiAgICBkZWYgYWRkRWRnZSgKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlIHwgTm9uZSA9IE5vbmUsIC8sICoqcHJvcHMKICAgICk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgaywgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSk6CiAgICAgICAgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX2VkZ2UodSwgdiwgaykKICAgICAgICBzZWxmLmVkZ2VzUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcygKICAgICAgICBzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCAvLCAqKnByb3BzCiAgICApOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYsIGspOiBwcm9wc30pCiAgICAgICAgc2VsZi5lZGdlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoWyh1LCB2LCBrKV0sIGxpc3QocHJvcHMua2V5cygpKSkKCiAgICBkZWYgZ2V0RWRnZVByb3BlcnR5KHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdiwga11bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CQAAAAAAAHcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOEJAAAAAAAA4gkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhCQAAAAAAAOEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOUJAAAAAAAA5gkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlCQAAAAAAAOUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					464,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAABcAAAAAAAACFwAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQogICAgZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIERpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV1dCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCA9IG54Lk11bHRpRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQogICAgICAgIHNlbGYuRyA9IEcKCiAgICAgICAgZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCiAgICAgICAgZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgogICAgICAgICAgICB1LCB2LCBrID0gZQoKICAgICAgICAgICAgc2VsZi5hZGRFZGdlKHUsIHYsIGspCgogICAgZGVmIHBhdGNoKHNlbGYsIEc6IG54Lk11bHRpRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZikgLT4gTGlzdFtIYXNoYWJsZV06CiAgICAgICAgcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh1KQogICAgICAgIGlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHYpCgogICAgICAgIHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrLCAqKnByb3BzKQogICAgICAgIHNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiByZW1vdmVfZWRnZShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdiwgayldKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2LCBrKQogICAgICAgIHNlbGYuZWRnZXNSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCgogICAgZGVmIHNldEVkZ2VQcm9wZXJ0aWVzKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUsIC8sICoqcHJvcHMKICAgICk6CiAgICAgICAgbnguc2V0X2VkZ2VfYXR0cmlidXRlcyhzZWxmLkcsIHsodSwgdiwgayk6IHByb3BzfSkKICAgICAgICBzZWxmLmVkZ2VzUHJvcGVydGllc0NoYW5nZWQuZW1pdChbKHUsIHYsIGspXSwgbGlzdChwcm9wcy5rZXlzKCkpKQoKICAgIGRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgcHJvcCwgLyk6CiAgICAgICAgcmV0dXJuIHNlbGYuRy5lZGdlc1t1LCB2LCBrXVtwcm9wXQoKCmZyb20gcHlsaXZlLlF0R3JhcGhFZGl0b3IuZWRpdGFibGVfdGV4dF9pdGVtIGltcG9ydCBFZGl0YWJsZVRleHRJdGVtCgoKY2xhc3MgU3RhbmRhcmROb2RlV2lkZ2V0KFFHcmFwaGljc1dpZGdldCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLnNldEdlb21ldHJ5KFFSZWN0KDAsIDAsIDEwMCwgMjYpKQogICAgICAgICMgRW5hYmxlIGRyYWdnaW5nIGFuZCBzZWxlY3RpbmcKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc01vdmFibGUpCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNTZWxlY3RhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbVNlbmRzR2VvbWV0cnlDaGFuZ2VzKQogICAgICAgIHNlbGYuc2V0RmxhZygKICAgICAgICAgICAgUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc1NjZW5lUG9zaXRpb25DaGFuZ2VzCiAgICAgICAgKQogICAgICAgIHNlbGYuc2V0QWNjZXB0SG92ZXJFdmVudHMoVHJ1ZSkKCiAgICAgICAgc2VsZi5sYWJlbCA9IEVkaXRhYmxlVGV4dEl0ZW0ocGFyZW50PXNlbGYpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRQb3MoNSwgNSkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHRXaWR0aChzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSAtIDEwKQogICAgICAgIHNlbGYubGFiZWwuc2V0VGV4dCgiSGVsbG8iKQoKICAgIGRlZiBtb3VzZURvdWJsZUNsaWNrRXZlbnQoc2VsZiwgZXZlbnQ6IFFHcmFwaGljc1NjZW5lTW91c2VFdmVudCk6CiAgICAgICAgIyBFbmFibGUgZWRpdGluZyBzdWJpdGVtcyBvbiBkb3VibGUtY2xpY2sKICAgICAgICAiIiJwYXJlbnQgbm9kZSBtdXN0IG1hbnVhbGx5IGNhbCB0aGUgZG91YmxlIGNsaWNrIGV2ZW50LAogICAgICAgIGJlY2F1c2UgYW4gaXRlbSBub3Igc2xlY3RhYmxlIG5vciBtb3ZhYmxlIHdpbGwgbm90IHJlY2VpdmUgcHJlc3MgZXZlbnRzCiAgICAgICAgIiIiCgogICAgICAgICMgQ2hlY2sgaWYgZG91YmxlLWNsaWNrIGlzIHdpdGhpbiB0aGUgdGV4dCBpdGVt4oCZcyBib3VuZGluZyBib3gKICAgICAgICBpZiBzZWxmLmxhYmVsLmNvbnRhaW5zKHNlbGYubWFwRnJvbVNjZW5lKGV2ZW50LnNjZW5lUG9zKCkpKToKICAgICAgICAgICAgIyBGb3J3YXJkIHRoZSBldmVudCB0byBsYWJlbCBpZiBjbGlja2VkIGluc2lkZSBpdAogICAgICAgICAgICBzZWxmLmxhYmVsLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiTm9kZUl0ZW0tPm1vdXNlRG91YmxlQ2xpY2tFdmVudCIpCiAgICAgICAgICAgIHN1cGVyKCkubW91c2VEb3VibGVDbGlja0V2ZW50KGV2ZW50KQoKICAgIGRlZiBwYWludCgKICAgICAgICBzZWxmLCBwYWludGVyOiBRUGFpbnRlciwgb3B0aW9uOiBRU3R5bGVPcHRpb25HcmFwaGljc0l0ZW0sIHdpZGdldD1Ob25lCiAgICApOgogICAgICAgICMgb3B0aW9uLmRpcmVjdGlvbgogICAgICAgICMgb3B0aW9uLmZvbnRNZXRyaWNzCiAgICAgICAgIyBvcHRpb24ucGFsZXR0ZQogICAgICAgICMgb3B0aW9uLnJlY3QKICAgICAgICAjIG9wdGlvbi5zdGF0ZQogICAgICAgICMgb3B0aW9uLnN0eWxlT2JqZWN0CiAgICAgICAgIyBvcHRpb24ubGV2ZWxPZkRldGFpbEZyb21UcmFuc2Zvcm0KCiAgICAgICAgIyBEcmF3IHRoZSBub2RlIHJlY3RhbmdsZQogICAgICAgIHBhbGV0dGU6IFFQYWxldHRlID0gb3B0aW9uLnBhbGV0dGUgICMgdHlwZTogaWdub3JlCiAgICAgICAgc3RhdGU6IFFTdHlsZS5TdGF0ZUZsYWcgPSBvcHRpb24uc3RhdGUgICMgdHlwZTogaWdub3JlCgogICAgICAgIHBhaW50ZXIuc2V0QnJ1c2gocGFsZXR0ZS5iYXNlKCkpCiAgICAgICAgIyBwYWludGVyLnNldEJydXNoKFF0Lk5vQnJ1c2gpCgogICAgICAgIHBlbiA9IFFQZW4ocGFsZXR0ZS50ZXh0KCkuY29sb3IoKSwgMSkKICAgICAgICBwZW4uc2V0Q29zbWV0aWMoVHJ1ZSkKICAgICAgICBwZW4uc2V0V2lkdGhGKDIpCiAgICAgICAgaWYgc3RhdGUgJiBRU3R5bGUuU3RhdGVGbGFnLlN0YXRlX1NlbGVjdGVkOgogICAgICAgICAgICBwZW4uc2V0Q29sb3IocGFsZXR0ZS5hY2NlbnQoKS5jb2xvcigpKQogICAgICAgIHBhaW50ZXIuc2V0UGVuKHBlbikKICAgICAgICBwYWludGVyLmRyYXdSb3VuZGVkUmVjdCgKICAgICAgICAgICAgMC41LCAwLjUsIHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpLCBzZWxmLmdlb21ldHJ5KCkuaGVpZ2h0KCksIDMsIDMKICAgICAgICApCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CQAAAAAAAHcJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pylive/examples/python_function_graph/main.py",
			"settings":
			{
				"buffer_size": 11578,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2949,
					1,
					"reindent",
					null,
					"AQAAAD4XAAAAAAAARhcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+FwAAAAAAAD4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2950,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEYXAAAAAAAAShcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGFwAAAAAAAEYXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2951,
					1,
					"left_delete",
					null,
					"AQAAAEYXAAAAAAAARhcAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKFwAAAAAAAEoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2952,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAEYXAAAAAAAARxcAAAAAAAAAAAAARxcAAAAAAABIFwAAAAAAAAAAAABIFwAAAAAAAEkXAAAAAAAAAAAAAEkXAAAAAAAAShcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGFwAAAAAAAEYXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2953,
					1,
					"insert",
					{
						"characters": " textwrap"
					},
					"CQAAAEoXAAAAAAAASxcAAAAAAAAAAAAASxcAAAAAAABMFwAAAAAAAAAAAABMFwAAAAAAAE0XAAAAAAAAAAAAAE0XAAAAAAAAThcAAAAAAAAAAAAAThcAAAAAAABPFwAAAAAAAAAAAABPFwAAAAAAAFAXAAAAAAAAAAAAAFAXAAAAAAAAURcAAAAAAAAAAAAAURcAAAAAAABSFwAAAAAAAAAAAABSFwAAAAAAAFMXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKFwAAAAAAAEoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2954,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAFMXAAAAAAAAVBcAAAAAAAAAAAAAVBcAAAAAAABVFwAAAAAAAAAAAABVFwAAAAAAAFYXAAAAAAAAAAAAAFYXAAAAAAAAVxcAAAAAAAAAAAAAVxcAAAAAAABYFwAAAAAAAAAAAABYFwAAAAAAAFkXAAAAAAAAAAAAAFkXAAAAAAAAWhcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTFwAAAAAAAFMXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2955,
					1,
					"insert",
					{
						"characters": " dede"
					},
					"BQAAAFoXAAAAAAAAWxcAAAAAAAAAAAAAWxcAAAAAAABcFwAAAAAAAAAAAABcFwAAAAAAAF0XAAAAAAAAAAAAAF0XAAAAAAAAXhcAAAAAAAAAAAAAXhcAAAAAAABfFwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaFwAAAAAAAFoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2956,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "dedent"
					},
					"AgAAAFsXAAAAAAAAWxcAAAAAAAAEAAAAZGVkZVsXAAAAAAAAYRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfFwAAAAAAAF8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2959,
					1,
					"insert",
					{
						"characters": "dedent("
					},
					"BwAAAG8XAAAAAAAAcBcAAAAAAAAAAAAAcBcAAAAAAABxFwAAAAAAAAAAAABxFwAAAAAAAHIXAAAAAAAAAAAAAHIXAAAAAAAAcxcAAAAAAAAAAAAAcxcAAAAAAAB0FwAAAAAAAAAAAAB0FwAAAAAAAHUXAAAAAAAAAAAAAHUXAAAAAAAAdhcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvFwAAAAAAAG8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2961,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAH0XAAAAAAAAfhcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9FwAAAAAAAH0XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2963,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+FwAAAAAAAH4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2968,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH4XAAAAAAAAfxcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+FwAAAAAAAH4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2969,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8XAAAAAAAAgBcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/FwAAAAAAAH8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2970,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAIAXAAAAAAAAghcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAFwAAAAAAAIAXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2971,
					1,
					"insert",
					{
						"characters": "exec"
					},
					"BAAAAIEXAAAAAAAAghcAAAAAAAAAAAAAghcAAAAAAACDFwAAAAAAAAAAAACDFwAAAAAAAIQXAAAAAAAAAAAAAIQXAAAAAAAAhRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBFwAAAAAAAIEXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2973,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFFwAAAAAAAIUXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2985,
					1,
					"insert",
					{
						"characters": "exec"
					},
					"BQAAAGsXAAAAAAAAbBcAAAAAAAAAAAAAbBcAAAAAAABsFwAAAAAAAAQAAABldmFsbBcAAAAAAABtFwAAAAAAAAAAAABtFwAAAAAAAG4XAAAAAAAAAAAAAG4XAAAAAAAAbxcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrFwAAAAAAAG8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					2990,
					1,
					"left_delete",
					null,
					"AQAAAIEXAAAAAAAAgRcAAAAAAAAEAAAAZXhlYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBFwAAAAAAAIUXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2991,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAIAXAAAAAAAAgBcAAAAAAAABAAAAIoAXAAAAAAAAgBcAAAAAAAABAAAAIg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBFwAAAAAAAIEXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2992,
					2,
					"left_delete",
					null,
					"AgAAAH8XAAAAAAAAfxcAAAAAAAABAAAAIH4XAAAAAAAAfhcAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAFwAAAAAAAIAXAAAAAAAAAAAAAAAA8L8"
				],
				[
					2996,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsFwAAAAAAACwXAAAAAAAAAAAAAAAA8L8"
				],
				[
					3005,
					1,
					"insert",
					{
						"characters": "\n\ndef"
					},
					"CAAAACEEAAAAAAAAIgQAAAAAAAAAAAAAIgQAAAAAAAAmBAAAAAAAAAAAAAAmBAAAAAAAACcEAAAAAAAAAAAAACcEAAAAAAAAKwQAAAAAAAAAAAAAIgQAAAAAAAAiBAAAAAAAAAQAAAAgICAgJwQAAAAAAAAoBAAAAAAAAAAAAAAoBAAAAAAAACkEAAAAAAAAAAAAACkEAAAAAAAAKgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhBAAAAAAAACEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					3006,
					1,
					"insert",
					{
						"characters": " format_par"
					},
					"CwAAACoEAAAAAAAAKwQAAAAAAAAAAAAAKwQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAAC0EAAAAAAAAAAAAAC0EAAAAAAAALgQAAAAAAAAAAAAALgQAAAAAAAAvBAAAAAAAAAAAAAAvBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAAMQQAAAAAAAAAAAAAMQQAAAAAAAAyBAAAAAAAAAAAAAAyBAAAAAAAADMEAAAAAAAAAAAAADMEAAAAAAAANAQAAAAAAAAAAAAANAQAAAAAAAA1BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqBAAAAAAAACoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					3007,
					1,
					"insert",
					{
						"characters": "ams"
					},
					"AwAAADUEAAAAAAAANgQAAAAAAAAAAAAANgQAAAAAAAA3BAAAAAAAAAAAAAA3BAAAAAAAADgEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1BAAAAAAAADUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					3008,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgEAAAAAAAAOgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4BAAAAAAAADgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					3011,
					2,
					"left_delete",
					null,
					"AgAAACIEAAAAAAAAIgQAAAAAAAAYAAAACiAgICBkZWYgZm9ybWF0X3BhcmFtcygpIQQAAAAAAAAhBAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6BAAAAAAAACIEAAAAAAAAAAAAAAAAY0A"
				],
				[
					3013,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhBAAAAAAAACEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAALQEAAAAAAAAtAQAAAAAAAAEAAAAe2t9PQ",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAzygAAAAAAADPKAAAZnJvbSBhc3QgaW1wb3J0IENhbGwKZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKZnJvbSBweWxpdmUuZXhhbXBsZXMucHl0aG9uX2Z1bmN0aW9uX2dyYXBoLmdyYXBoX21vZGVsIGltcG9ydCBHcmFwaE1vZGVsCmZyb20gcHlsaXZlLlF0U2NyaXB0RWRpdG9yLnNjcmlwdF9lZGl0IGltcG9ydCBTY3JpcHRFZGl0Cgpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmFwcCA9IFFBcHBsaWNhdGlvbigpCmZyb20gcHlsaXZlLlF0R3JhcGhFZGl0b3IuZGFnX2dyYXBoX2dyYXBoaWNzX3NjZW5lIGltcG9ydCAoCiAgICBEQUdTY2VuZSwKICAgIEVkZ2VXaWRnZXQsCiAgICBOb2RlV2lkZ2V0LAogICAgSW5sZXRXaWRnZXQsCiAgICBPdXRsZXRXaWRnZXQsCikKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5pbmZpbml0ZV9ncmFwaGljc3ZpZXdfb3B0aW1pemVkIGltcG9ydCAoCiAgICBJbmZpbml0ZUdyYXBoaWNzVmlldywKKQpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLm54X2dyYXBoX21vZGVsIGltcG9ydCBOWEdyYXBoTW9kZWwKZnJvbSBweWxpdmUudXRpbHMudW5pcXVlIGltcG9ydCBtYWtlX3VuaXF1ZV9uYW1lCgppbXBvcnQgaW5zcGVjdAoKCmRlZiBpc19tdWx0aV9wYXJhbShmbjogQ2FsbGFibGUsIHBhcmFtbmFtZTogc3RyKToKICAgIHNpZ25hdHVyZSA9IGluc3BlY3Quc2lnbmF0dXJlKGZuKQogICAgcGFyYW0gPSBzaWduYXR1cmUucGFyYW1ldGVyc1twYXJhbW5hbWVdCiAgICByZXR1cm4gcGFyYW0ua2luZCA9PSBpbnNwZWN0LlBhcmFtZXRlci5WQVJfUE9TSVRJT05BTAoKCmltcG9ydCBuZXR3b3JreCBhcyBueAoKCmRlZiBwYXJzZV9ncmFwaF90b19zY3JpcHQoRzogbnguTXVsdGlEaUdyYXBoKSAtPiBzdHI6CiAgICBwcmludCgicGFyc2VfZ3JhcGhfdG9fc2NyaXB0IikKICAgIGltcG9ydCBuZXR3b3JreCBhcyBueAogICAgaW1wb3J0IGFzdAoKICAgIG5vZGVzID0gbngudG9wb2xvZ2ljYWxfc29ydChHKQoKICAgIGRlZiBnZXRfbGluZXMobm9kZXMpOgogICAgICAgIGZvciBuIGluIG5vZGVzOgogICAgICAgICAgICBmbiA9IEcubm9kZXNbbl1bImZuIl0KICAgICAgICAgICAgZm9ybWF0dGVkX3BhcmFtcyA9ICIsICIuam9pbigKICAgICAgICAgICAgICAgIFtmInt1fSIgZm9yIHUsIHYsIGsgaW4gRy5pbl9lZGdlcyhuLCBrZXlzPVRydWUpXQogICAgICAgICAgICApCiAgICAgICAgICAgIHlpZWxkIGYie259ID0ge2ZuLl9fcXVhbG5hbWVfXyB9KHtmb3JtYXR0ZWRfcGFyYW1zfSkiCgogICAgc2NyaXB0ID0gIlxuIi5qb2luKGdldF9saW5lcyhub2RlcykpCiAgICBzY3JpcHQgPSAiZnJvbSBwYXRobGliIGltcG9ydCBQYXRoXG5cbiIgKyBzY3JpcHQKICAgIHJldHVybiBzY3JpcHQKCgpjbGFzcyBQeXRob25HcmFwaE1vZGVsKE5YR3JhcGhNb2RlbCk6CiAgICBAb3ZlcnJpZGUKICAgIGRlZiBhZGRFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogc3RyLCAqKnByb3BzKToKICAgICAgICBmbjogQ2FsbGFibGUgPSBzZWxmLmdldE5vZGVQcm9wZXJ0eSh2LCAiZm4iKQogICAgICAgIElzTXVsdGlJbmxldCA9IGlzX211bHRpX3BhcmFtKGZuLCBrKQogICAgICAgIGlmIG5vdCBJc011bHRpSW5sZXQ6CiAgICAgICAgICAgIGVkZ2VzX3RvX3JlbW92ZSA9IFtdCiAgICAgICAgICAgIGluX2VkZ2VzID0gc2VsZi5HLmluX2VkZ2VzKHYsIGtleXM9VHJ1ZSkKICAgICAgICAgICAgZm9yIGVkZ2UgaW4gaW5fZWRnZXM6CiAgICAgICAgICAgICAgICBpZiBlZGdlWzJdID09IGs6CiAgICAgICAgICAgICAgICAgICAgZWRnZXNfdG9fcmVtb3ZlLmFwcGVuZChlZGdlKQogICAgICAgICAgICBmb3IgZWRnZSBpbiBlZGdlc190b19yZW1vdmU6CiAgICAgICAgICAgICAgICBzdXBlcigpLnJlbW92ZV9lZGdlKCplZGdlKQogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICJJc011bHRpSW5sZXQiLAogICAgICAgICAgICAgICAgSXNNdWx0aUlubGV0LAogICAgICAgICAgICAgICAgImVkZ2VzX3RvX3JlbW92ZToiLAogICAgICAgICAgICAgICAgZWRnZXNfdG9fcmVtb3ZlLAogICAgICAgICAgICApCgogICAgICAgIHJldHVybiBzdXBlcigpLmFkZEVkZ2UodSwgdiwgaywgKipwcm9wcykKCgpjbGFzcyBQeXRob25HcmFwaFdpbmRvdyhRV2lkZ2V0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ6IE9wdGlvbmFsW1FXaWRnZXRdID0gTm9uZSkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudCkKICAgICAgICAjIyMgU2V0dXAgd2lkZ2V0cyAjIyMKICAgICAgICBzZWxmLnNldFdpbmRvd1RpdGxlKCJQeXRob24gR3JhcGgiKQoKICAgICAgICAjIGdyYXBodmlldwogICAgICAgIGdyYXBodmlldyA9IEluZmluaXRlR3JhcGhpY3NWaWV3KCkKICAgICAgICBkYWdzY2VuZSA9IERBR1NjZW5lKCkKICAgICAgICBncmFwaHZpZXcuc2V0U2NlbmUoZGFnc2NlbmUpCiAgICAgICAgc2VsZi5kYWdzY2VuZSA9IGRhZ3NjZW5lCgogICAgICAgICMgc2NyaXB0dmlldwogICAgICAgIHJlc3VsdF9zY3JpcHRfZWRpdCA9IFNjcmlwdEVkaXQoKQogICAgICAgIHJlc3VsdF9zY3JpcHRfZWRpdC5zZXRSZWFkT25seShUcnVlKQogICAgICAgIHNlbGYucmVzdWx0X3NjcmlwdF9lZGl0ID0gcmVzdWx0X3NjcmlwdF9lZGl0CgogICAgICAgICMgbWVudWJhcgogICAgICAgIG1lbnViYXIgPSBRTWVudUJhcihzZWxmKQogICAgICAgIGFkZF9tZW51ID0gUU1lbnUoImFkZCIsIHNlbGYpCiAgICAgICAgZm9yIGZuIGluIFtwcmludCwgbGVuLCBQYXRoLmN3ZCwgUGF0aC5pdGVyZGlyXToKICAgICAgICAgICAgY3JlYXRlX29wZXJhdG9yX2FjdGlvbiA9IFFBY3Rpb24oZm4uX19xdWFsbmFtZV9fLCBzZWxmKQogICAgICAgICAgICBjcmVhdGVfb3BlcmF0b3JfYWN0aW9uLnRyaWdnZXJlZC5jb25uZWN0KAogICAgICAgICAgICAgICAgbGFtYmRhIGNoZWNrZWQsIGZuPWZuOiBzZWxmLmNyZWF0ZV9vcGVyYXRvcihmbikKICAgICAgICAgICAgKQogICAgICAgICAgICBhZGRfbWVudS5hZGRBY3Rpb24oY3JlYXRlX29wZXJhdG9yX2FjdGlvbikKICAgICAgICBtZW51YmFyLmFkZE1lbnUoYWRkX21lbnUpCiAgICAgICAgcnVuX2FjdGlvbiA9IG1lbnViYXIuYWRkQWN0aW9uKCJydW4iKQogICAgICAgIHJ1bl9hY3Rpb24udHJpZ2dlcmVkLmNvbm5lY3QobGFtYmRhIGNoZWNrZWQ6IHNlbGYucnVuU2NyaXB0KCkpCgogICAgICAgICMgc3RhdHVzYmFyCiAgICAgICAgc3RhdHVzYmFyID0gUVN0YXR1c0JhcihzZWxmKQogICAgICAgIHN0YXR1c2Jhci5zaG93TWVzc2FnZSgiV2VsY29tZSEiKQogICAgICAgIHN0YXR1c2Jhci5zZXRTaXplR3JpcEVuYWJsZWQoRmFsc2UpCgogICAgICAgICMgY3JlYXRlIGxheW91dAogICAgICAgIG1haW5sYXlvdXQgPSBRVkJveExheW91dCgpCiAgICAgICAgbWFpbmxheW91dC5zZXRDb250ZW50c01hcmdpbnMoMCwgMCwgMCwgMCkKICAgICAgICBzcGxpdHRlciA9IFFTcGxpdHRlcigpCiAgICAgICAgc3BsaXR0ZXIuYWRkV2lkZ2V0KGdyYXBodmlldykKICAgICAgICBzcGxpdHRlci5hZGRXaWRnZXQocmVzdWx0X3NjcmlwdF9lZGl0KQogICAgICAgIHNwbGl0dGVyLnNldFNpemVzKAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBzcGxpdHRlci53aWR0aCgpIC8vIHNwbGl0dGVyLmNvdW50KCkKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKHNwbGl0dGVyLmNvdW50KCkpCiAgICAgICAgICAgIF0KICAgICAgICApCiAgICAgICAgbWFpbmxheW91dC5hZGRXaWRnZXQoc3BsaXR0ZXIpCiAgICAgICAgbWFpbmxheW91dC5zZXRNZW51QmFyKG1lbnViYXIpCiAgICAgICAgbWFpbmxheW91dC5hZGRXaWRnZXQoc3RhdHVzYmFyKQogICAgICAgIHNlbGYuc2V0TGF5b3V0KG1haW5sYXlvdXQpCgogICAgICAgICMjIyMgY3JlYXRlIGFuZCBiaW5kIG1vZGVscyAjIyMKICAgICAgICBncmFwaG1vZGVsID0gUHl0aG9uR3JhcGhNb2RlbCgpCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0FkZGVkLmNvbm5lY3Qoc2VsZi5oYW5kbGVOb2Rlc0FkZGVkKQogICAgICAgIGdyYXBobW9kZWwubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5jb25uZWN0KAogICAgICAgICAgICBzZWxmLmhhbmRsZU5vZGVzUHJvcGVydGllc0NoYW5nZWQKICAgICAgICApCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuY29ubmVjdChzZWxmLmhhbmRsZU5vZGVzUmVtb3ZlZCkKCiAgICAgICAgZ3JhcGhtb2RlbC5lZGdlc0FkZGVkLmNvbm5lY3Qoc2VsZi5oYW5kbGVFZGdlc0FkZGVkKQogICAgICAgIGdyYXBobW9kZWwuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5jb25uZWN0KAogICAgICAgICAgICBzZWxmLmhhbmRsZUVkZ2VzUHJvcGVydGllc0NoYW5nZWQKICAgICAgICApCiAgICAgICAgZ3JhcGhtb2RlbC5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuY29ubmVjdChzZWxmLmhhbmRsZUVkZ2VzUmVtb3ZlZCkKCiAgICAgICAgIyB0cmlnZ2VyIGV2YWx1YXRlCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0FkZGVkLmNvbm5lY3Qoc2VsZi5wYXJzZUdyYXBoKQogICAgICAgIGdyYXBobW9kZWwubm9kZXNSZW1vdmVkLmNvbm5lY3Qoc2VsZi5wYXJzZUdyYXBoKQogICAgICAgIGdyYXBobW9kZWwuZWRnZXNBZGRlZC5jb25uZWN0KHNlbGYucGFyc2VHcmFwaCkKICAgICAgICBncmFwaG1vZGVsLmVkZ2VzUmVtb3ZlZC5jb25uZWN0KHNlbGYucGFyc2VHcmFwaCkKICAgICAgICBzZWxmLmdyYXBobW9kZWwgPSBncmFwaG1vZGVsCgogICAgICAgICMgd2lkZ2V0IG1vZGVsIG1hcHBpbmdzCiAgICAgICAgc2VsZi5fb3BlcmF0b3JfdG9fd2lkZ2V0OiBkaWN0W0hhc2hhYmxlLCBOb2RlV2lkZ2V0XSA9IGRpY3QoKQogICAgICAgIHNlbGYuX3dpZGdldF90b19vcGVyYXRvcjogZGljdFtOb2RlV2lkZ2V0LCBIYXNoYWJsZV0gPSBkaWN0KCkKCiAgICAgICAgc2VsZi5fZWRnZV90b193aWRnZXQ6IGRpY3RbCiAgICAgICAgICAgIFR1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgc3RyXSwgRWRnZVdpZGdldAogICAgICAgIF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl93aWRnZXRfdG9fZWRnZTogZGljdFsKICAgICAgICAgICAgRWRnZVdpZGdldCwgVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBzdHJdCiAgICAgICAgXSA9IGRpY3QoKQoKICAgICAgICBzZWxmLl9wYXJhbV90b193aWRnZXQ6IGRpY3RbVHVwbGVbSGFzaGFibGUsIHN0cl0sIElubGV0V2lkZ2V0XSA9IGRpY3QoKQogICAgICAgIHNlbGYuX3dpZGdldF90b19wYXJhbTogZGljdFtJbmxldFdpZGdldCwgVHVwbGVbSGFzaGFibGUsIHN0cl1dID0gZGljdCgpCgogICAgICAgIHNlbGYuX3JldHVybl90b193aWRnZXQ6IGRpY3RbSGFzaGFibGUsIE91dGxldFdpZGdldF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl93aWRnZXRfdG9fcmV0dXJuOiBkaWN0W091dGxldFdpZGdldCwgSGFzaGFibGVdID0gZGljdCgpCgogICAgICAgICMgYmluZCB2aWV3CiAgICAgICAgZGFnc2NlbmUuY29ubmVjdGVkLmNvbm5lY3Qoc2VsZi5vbkNvbm5lY3QpCiAgICAgICAgZGFnc2NlbmUuZGlzY29ubmVjdGVkLmNvbm5lY3Qoc2VsZi5vbkRpc2Nvbm5lY3QpCgogICAgQFNsb3QoKQogICAgZGVmIHBhcnNlR3JhcGgoc2VsZik6CiAgICAgICAgc2NyaXB0ID0gcGFyc2VfZ3JhcGhfdG9fc2NyaXB0KHNlbGYuZ3JhcGhtb2RlbC5HKQogICAgICAgIHNlbGYucmVzdWx0X3NjcmlwdF9lZGl0LnNldFBsYWluVGV4dChzY3JpcHQpCgogICAgQFNsb3QoKQogICAgZGVmIHJ1blNjcmlwdChzZWxmKToKICAgICAgICBzY3JpcHQgPSBwYXJzZV9ncmFwaF90b19zY3JpcHQoc2VsZi5ncmFwaG1vZGVsLkcpCiAgICAgICAgc2VsZi5yZXN1bHRfc2NyaXB0X2VkaXQuc2V0UGxhaW5UZXh0KHNjcmlwdCkKICAgICAgICBmcm9tIHRleHR3cmFwIGltcG9ydCBkZWRlbnQKCiAgICAgICAgZXhlYyhkZWRlbnQoc2NyaXB0KSkKCiAgICBAU2xvdChvYmplY3QpCiAgICBkZWYgY3JlYXRlX29wZXJhdG9yKHNlbGYsIGZuOiBDYWxsYWJsZSk6CiAgICAgICAgdW5pcXVlX25vZGVfaWQgPSBtYWtlX3VuaXF1ZV9uYW1lKAogICAgICAgICAgICBmIntmbi5fX25hbWVfXyB9MSIsIHNlbGYuZ3JhcGhtb2RlbC5ub2RlcygpCiAgICAgICAgKQogICAgICAgIHNlbGYuZ3JhcGhtb2RlbC5hZGROb2RlKHVuaXF1ZV9ub2RlX2lkLCBmbj1mbikKCiAgICBAU2xvdChFZGdlV2lkZ2V0KQogICAgZGVmIG9uQ29ubmVjdChzZWxmLCBlZGdlOiBFZGdlV2lkZ2V0KToKICAgICAgICAiIiJjYWxsZWQgd2hlbiBwaW5zIGFyZSBjb25uZWN0ZWQgYnkgdGhlIHdpZGdldCIiIgogICAgICAgIG91dGxldCA9IGVkZ2Uuc291cmNlT3V0bGV0KCkKICAgICAgICBpbmxldCA9IGVkZ2UudGFyZ2V0SW5sZXQoKQoKICAgICAgICBhc3NlcnQgb3V0bGV0IGFuZCBpbmxldAogICAgICAgIHNlbGYuZGFnc2NlbmUucmVtb3ZlRWRnZShlZGdlKQogICAgICAgIHNvdXJjZV9vcGVyYXRvciA9IHNlbGYuX3dpZGdldF90b19yZXR1cm5bb3V0bGV0XQogICAgICAgIHRhcmdldF9vcGVyYXRvciwgcGFyYW1uYW1lID0gc2VsZi5fd2lkZ2V0X3RvX3BhcmFtW2lubGV0XQogICAgICAgIHByaW50KGYiY29ubmVjdGVkOiB7c291cmNlX29wZXJhdG9yfSAtPiB7dGFyZ2V0X29wZXJhdG9yfS57cGFyYW1uYW1lfSIpCiAgICAgICAgc2VsZi5ncmFwaG1vZGVsLmFkZEVkZ2Uoc291cmNlX29wZXJhdG9yLCB0YXJnZXRfb3BlcmF0b3IsIHBhcmFtbmFtZSkKCiAgICBAU2xvdChFZGdlV2lkZ2V0KQogICAgZGVmIG9uRGlzY29ubmVjdChzZWxmLCBlZGdlOiBFZGdlV2lkZ2V0KToKICAgICAgICAiIiJjYWxsZWQgd2hlbiBwaW5zIGFyZSBkaXNjb25uZWN0ZWQgYnkgdGhlIHdpZGdldCwKICAgICAgICByaWdodCBiZWZvcmUgdGhlIGVkZ2UgaXMgZGVzdHJveWVkIiIiCiAgICAgICAgb3V0bGV0ID0gZWRnZS5zb3VyY2VPdXRsZXQoKQogICAgICAgIGlubGV0ID0gZWRnZS50YXJnZXRJbmxldCgpCiAgICAgICAgYXNzZXJ0IG91dGxldCBhbmQgaW5sZXQKCiAgICAgICAgc291cmNlX29wZXJhdG9yID0gc2VsZi5fd2lkZ2V0X3RvX3JldHVybltvdXRsZXRdCiAgICAgICAgdGFyZ2V0X29wZXJhdG9yLCBwYXJhbW5hbWUgPSBzZWxmLl93aWRnZXRfdG9fcGFyYW1baW5sZXRdCiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgIGYiZGlzY29ubmVjdGVkOiB7c291cmNlX29wZXJhdG9yfSAtPiB7dGFyZ2V0X29wZXJhdG9yfS57cGFyYW1uYW1lfSIKICAgICAgICApCiAgICAgICAgc2VsZi5ncmFwaG1vZGVsLnJlbW92ZV9lZGdlKHNvdXJjZV9vcGVyYXRvciwgdGFyZ2V0X29wZXJhdG9yLCBwYXJhbW5hbWUpCgogICAgQFNsb3QobGlzdCkKICAgIGRlZiBoYW5kbGVOb2Rlc0FkZGVkKHNlbGYsIG5vZGVzOiBMaXN0W0hhc2hhYmxlXSk6CiAgICAgICAgcHJpbnQoIm5vZGVzIGFkZGVkIikKICAgICAgICBmb3IgbiBpbiBub2RlczoKICAgICAgICAgICAgd2lkZ2V0ID0gTm9kZVdpZGdldCh0aXRsZT1mIntufSIpCiAgICAgICAgICAgIHNlbGYuZGFnc2NlbmUuYWRkTm9kZSh3aWRnZXQpCiAgICAgICAgICAgIHNlbGYuX29wZXJhdG9yX3RvX3dpZGdldFtuXSA9IHdpZGdldAogICAgICAgICAgICBzZWxmLl93aWRnZXRfdG9fb3BlcmF0b3Jbd2lkZ2V0XSA9IG4KCiAgICBAU2xvdChsaXN0KQogICAgZGVmIGhhbmRsZU5vZGVzUmVtb3ZlZChzZWxmLCBub2RlczogTGlzdFtIYXNoYWJsZV0pOgogICAgICAgIGZvciBuIGluIG5vZGVzOgogICAgICAgICAgICB3aWRnZXQgPSBzZWxmLl9vcGVyYXRvcl90b193aWRnZXRbbl0KICAgICAgICAgICAgc2VsZi5kYWdzY2VuZS5yZW1vdmVOb2RlKHdpZGdldCkKICAgICAgICAgICAgZGVsIHNlbGYuX29wZXJhdG9yX3RvX3dpZGdldFtuXQogICAgICAgICAgICBkZWwgc2VsZi5fd2lkZ2V0X3RvX29wZXJhdG9yW3dpZGdldF0KCiAgICBAU2xvdChkaWN0KQogICAgZGVmIGhhbmRsZU5vZGVzUHJvcGVydGllc0NoYW5nZWQoCiAgICAgICAgc2VsZiwgY2hhbmdlOiBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgb2JqZWN0IHwgTm9uZV1dCiAgICApOgogICAgICAgIHByaW50KCJub2RlcyBjaGFuZ2VkOiIsIGNoYW5nZSkKICAgICAgICBmb3IgbiwgcHJvcHMgaW4gY2hhbmdlLml0ZW1zKCk6CiAgICAgICAgICAgIG5vZGVfd2lkZ2V0ID0gY2FzdChOb2RlV2lkZ2V0LCBzZWxmLl9vcGVyYXRvcl90b193aWRnZXRbbl0pCiAgICAgICAgICAgIGZvciBwcm9wLCB2YWx1ZSBpbiBwcm9wcy5pdGVtcygpOgogICAgICAgICAgICAgICAgbWF0Y2ggcHJvcDoKICAgICAgICAgICAgICAgICAgICBjYXNlICJmbiI6CiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gc2VsZi5ncmFwaG1vZGVsLmdldE5vZGVQcm9wZXJ0eShuLCAiZm4iKQogICAgICAgICAgICAgICAgICAgICAgICBzaWcgPSBpbnNwZWN0LnNpZ25hdHVyZShmbikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHBhcmFtIGluIHNpZy5wYXJhbWV0ZXJzLnZhbHVlcygpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5sZXRfd2lkZ2V0ID0gSW5sZXRXaWRnZXQocGFyYW0ubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVfd2lkZ2V0LmFkZElubGV0KGlubGV0X3dpZGdldCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3BhcmFtX3RvX3dpZGdldFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiwgcGFyYW0ubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gPSBpbmxldF93aWRnZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3dpZGdldF90b19wYXJhbVtpbmxldF93aWRnZXRdID0gKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0ubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGV0X3dpZGdldCA9IE91dGxldFdpZGdldCgib3V0IikKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZV93aWRnZXQuYWRkT3V0bGV0KG91dGxldF93aWRnZXQpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JldHVybl90b193aWRnZXRbbl0gPSBvdXRsZXRfd2lkZ2V0CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3dpZGdldF90b19yZXR1cm5bb3V0bGV0X3dpZGdldF0gPSBuCgogICAgQFNsb3QobGlzdCkKICAgIGRlZiBoYW5kbGVFZGdlc0FkZGVkKHNlbGYsIGVkZ2VzOiBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgc3RyXV0pOgogICAgICAgIHByaW50KCJlZGdlcyBhZGRlZCIsIGVkZ2VzKQogICAgICAgIGZvciB1LCB2LCBrIGluIGVkZ2VzOgogICAgICAgICAgICBwYXJhbW5hbWUgPSBrCiAgICAgICAgICAgIG91dGxldF93aWRnZXQgPSBzZWxmLl9yZXR1cm5fdG9fd2lkZ2V0W3VdCiAgICAgICAgICAgIGlubGV0X3dpZGdldCA9IHNlbGYuX3BhcmFtX3RvX3dpZGdldFsodiwgcGFyYW1uYW1lKV0KICAgICAgICAgICAgZWRnZV93aWRnZXQgPSBFZGdlV2lkZ2V0KG91dGxldF93aWRnZXQsIGlubGV0X3dpZGdldCkKICAgICAgICAgICAgZWRnZV93aWRnZXQuc2V0TGFiZWxUZXh0KGYie3BhcmFtbmFtZX0iKQogICAgICAgICAgICBzZWxmLmRhZ3NjZW5lLmFkZEVkZ2UoZWRnZV93aWRnZXQpCiAgICAgICAgICAgIHNlbGYuX2VkZ2VfdG9fd2lkZ2V0Wyh1LCB2LCBrKV0gPSBlZGdlX3dpZGdldAogICAgICAgICAgICBzZWxmLl93aWRnZXRfdG9fZWRnZVtlZGdlX3dpZGdldF0gPSAodSwgdiwgaykKCiAgICBAU2xvdChsaXN0KQogICAgZGVmIGhhbmRsZUVkZ2VzUmVtb3ZlZChzZWxmLCBlZGdlczogTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIHN0cl1dKToKICAgICAgICBwcmludCgiZWRnZXMgcmVtb3ZlZCIsIGVkZ2VzKQogICAgICAgIGZvciB1LCB2LCBrIGluIGVkZ2VzOgogICAgICAgICAgICBwYXJhbW5hbWUgPSBrCiAgICAgICAgICAgIGVkZ2Vfd2lkZ2V0ID0gc2VsZi5fZWRnZV90b193aWRnZXRbdSwgdiwga10KICAgICAgICAgICAgc2VsZi5kYWdzY2VuZS5yZW1vdmVFZGdlKGVkZ2Vfd2lkZ2V0KQogICAgICAgICAgICBkZWwgc2VsZi5fZWRnZV90b193aWRnZXRbKHUsIHYsIGspXQogICAgICAgICAgICBkZWwgc2VsZi5fd2lkZ2V0X3RvX2VkZ2VbZWRnZV93aWRnZXRdCgogICAgQFNsb3QoZGljdCkKICAgIGRlZiBoYW5kbGVFZGdlc1Byb3BlcnRpZXNDaGFuZ2VkKAogICAgICAgIHNlbGYsIGNoYW5nZTogZGljdFtIYXNoYWJsZSwgZGljdFtzdHIsIG9iamVjdCB8IE5vbmVdXQogICAgKToKICAgICAgICBwcmludCgiZWRnZXMgY2hhbmdlZDoiLCBjaGFuZ2UpCgoKd2luZG93ID0gUHl0aG9uR3JhcGhXaW5kb3coKQoKd2luZG93LnNob3coKQphcHAuZXhlYygpCg",
					"AQAAAAAAAAABAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAKIFAAAAAAAAowUAAAAAAAAAAAAAowUAAAAAAACnBQAAAAAAAAAAAACnBQAAAAAAAKgFAAAAAAAAAAAAAKgFAAAAAAAArAUAAAAAAAAAAAAAowUAAAAAAACjBQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAogUAAAAAAACiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAKQFAAAAAAAApAUAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAqAUAAAAAAACoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAKQFAAAAAAAApQUAAAAAAAAAAAAApQUAAAAAAACmBQAAAAAAAAAAAACmBQAAAAAAAKcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAUAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " parse_grap"
					},
					"CwAAAKcFAAAAAAAAqAUAAAAAAAAAAAAAqAUAAAAAAACpBQAAAAAAAAAAAACpBQAAAAAAAKoFAAAAAAAAAAAAAKoFAAAAAAAAqwUAAAAAAAAAAAAAqwUAAAAAAACsBQAAAAAAAAAAAACsBQAAAAAAAK0FAAAAAAAAAAAAAK0FAAAAAAAArgUAAAAAAAAAAAAArgUAAAAAAACvBQAAAAAAAAAAAACvBQAAAAAAALAFAAAAAAAAAAAAALAFAAAAAAAAsQUAAAAAAAAAAAAAsQUAAAAAAACyBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwUAAAAAAACnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "h_to_ast"
					},
					"CAAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAC3BQAAAAAAALgFAAAAAAAAAAAAALgFAAAAAAAAuQUAAAAAAAAAAAAAuQUAAAAAAAC6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgUAAAAAAACyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALoFAAAAAAAAvAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugUAAAAAAAC6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "G:nx."
					},
					"BQAAALsFAAAAAAAAvAUAAAAAAAAAAAAAvAUAAAAAAAC9BQAAAAAAAAAAAAC9BQAAAAAAAL4FAAAAAAAAAAAAAL4FAAAAAAAAvwUAAAAAAAAAAAAAvwUAAAAAAADABQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwUAAAAAAAC7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "Multi"
					},
					"BQAAAMAFAAAAAAAAwQUAAAAAAAAAAAAAwQUAAAAAAADCBQAAAAAAAAAAAADCBQAAAAAAAMMFAAAAAAAAAAAAAMMFAAAAAAAAxAUAAAAAAAAAAAAAxAUAAAAAAADFBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAUAAAAAAADABQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "MultiDiGraph"
					},
					"AgAAAMAFAAAAAAAAwAUAAAAAAAAFAAAATXVsdGnABQAAAAAAAMwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQUAAAAAAADFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAM0FAAAAAAAAzgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM4FAAAAAAAAzwUAAAAAAAAAAAAAzwUAAAAAAADTBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgUAAAAAAADOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAANMFAAAAAAAA8QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wUAAAAAAADTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA8gUAAAAAAAD2BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"paste",
					null,
					"AQAAAPYFAAAAAAAAGgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gUAAAAAAAD2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABoGAAAAAAAAGwYAAAAAAAAAAAAAGwYAAAAAAAAfBgAAAAAAAAAAAAAfBgAAAAAAACAGAAAAAAAAAAAAACAGAAAAAAAAJAYAAAAAAAAAAAAAGwYAAAAAAAAbBgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAGgYAAAAAAAAaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAACAGAAAAAAAAfAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"indent",
					null,
					"AwAAADUGAAAAAAAAOQYAAAAAAAAAAAAAawYAAAAAAABvBgAAAAAAAAAAAACDBgAAAAAAAIcGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABoGAAAAAAAAGwYAAAAAAAAAAAAAGwYAAAAAAAAfBgAAAAAAAAAAAAAfBgAAAAAAACAGAAAAAAAAAAAAACAGAAAAAAAAJAYAAAAAAAAAAAAAGwYAAAAAAAAbBgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAGgYAAAAAAAAaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"paste",
					null,
					"AQAAACAGAAAAAAAAWwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"indent",
					null,
					"FgAAAD4GAAAAAAAAQgYAAAAAAAAAAAAAWAYAAAAAAABcBgAAAAAAAAAAAACNBgAAAAAAAJEGAAAAAAAAAAAAAJ0GAAAAAAAAoQYAAAAAAAAAAAAApAYAAAAAAACoBgAAAAAAAAAAAADCBgAAAAAAAMYGAAAAAAAAAAAAABIHAAAAAAAAFgcAAAAAAAAAAAAAKgcAAAAAAAAuBwAAAAAAAAAAAABKBwAAAAAAAE4HAAAAAAAAAAAAAJ0HAAAAAAAAoQcAAAAAAAAAAAAAuQcAAAAAAAC9BwAAAAAAAAAAAADZBwAAAAAAAN0HAAAAAAAAAAAAAPMHAAAAAAAA9wcAAAAAAAAAAAAAEAgAAAAAAAAUCAAAAAAAAAAAAAAfCAAAAAAAACMIAAAAAAAAAAAAADQIAAAAAAAAOAgAAAAAAAAAAAAATQgAAAAAAABRCAAAAAAAAAAAAABjCAAAAAAAAGcIAAAAAAAAAAAAAHwIAAAAAAAAgAgAAAAAAAAAAAAAhwgAAAAAAACLCAAAAAAAAAAAAACZCAAAAAAAAJ0IAAAAAAAAAAAAAK4IAAAAAAAAsggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAgAAAAAAAA+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"reindent",
					null,
					"AQAAAKMGAAAAAAAApwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowYAAAAAAACjBgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKcGAAAAAAAAqAYAAAAAAAAAAAAAqAYAAAAAAACsBgAAAAAAAAAAAACjBgAAAAAAAKMGAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAApwYAAAAAAACnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "assig"
					},
					"BQAAAKgGAAAAAAAAqQYAAAAAAAAAAAAAqQYAAAAAAACqBgAAAAAAAAAAAACqBgAAAAAAAKsGAAAAAAAAAAAAAKsGAAAAAAAArAYAAAAAAAAAAAAArAYAAAAAAACtBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAYAAAAAAACoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "nements"
					},
					"BwAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAACvBgAAAAAAAAAAAACvBgAAAAAAALAGAAAAAAAAAAAAALAGAAAAAAAAsQYAAAAAAAAAAAAAsQYAAAAAAACyBgAAAAAAAAAAAACyBgAAAAAAALMGAAAAAAAAAAAAALMGAAAAAAAAtAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQYAAAAAAACtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAYAAAAAAAC0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYGAAAAAAAAtwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgYAAAAAAAC2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALcGAAAAAAAAuQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwYAAAAAAAC3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BQAAALkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC+BgAAAAAAAAAAAAC+BgAAAAAAAL8GAAAAAAAAAAAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADBBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAMEGAAAAAAAAwgYAAAAAAAAAAAAAwgYAAAAAAADDBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQYAAAAAAADBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAMMGAAAAAAAAxAYAAAAAAAAAAAAAxAYAAAAAAADFBgAAAAAAAAAAAADFBgAAAAAAAMYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwYAAAAAAADDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMYGAAAAAAAAxwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgYAAAAAAADGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "G.nodes"
					},
					"BwAAAMcGAAAAAAAAyAYAAAAAAAAAAAAAyAYAAAAAAADJBgAAAAAAAAAAAADJBgAAAAAAAMoGAAAAAAAAAAAAAMoGAAAAAAAAywYAAAAAAAAAAAAAywYAAAAAAADMBgAAAAAAAAAAAADMBgAAAAAAAM0GAAAAAAAAAAAAAM0GAAAAAAAAzgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwYAAAAAAADHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM4GAAAAAAAA0AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgYAAAAAAADOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANAGAAAAAAAA0QYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AYAAAAAAADQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\nnodes"
					},
					"BwAAALkGAAAAAAAAugYAAAAAAAAAAAAAugYAAAAAAAC+BgAAAAAAAAAAAAC+BgAAAAAAAL8GAAAAAAAAAAAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADBBgAAAAAAAAAAAADBBgAAAAAAAMIGAAAAAAAAAAAAAMIGAAAAAAAAwwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMMGAAAAAAAAxAYAAAAAAAAAAAAAxAYAAAAAAADFBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwYAAAAAAADDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMUGAAAAAAAAxgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQYAAAAAAADFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"paste",
					null,
					"AQAAAMYGAAAAAAAA5AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgYAAAAAAADGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"right_delete",
					null,
					"BAAAAMYGAAAAAAAAxgYAAAAAAAAFAAAAbm9kZXPGBgAAAAAAAMYGAAAAAAAAAQAAACDGBgAAAAAAAMYGAAAAAAAAAQAAAD3GBgAAAAAAAMYGAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAxgYAAAAAAADLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "nodes"
					},
					"BgAAAOoGAAAAAAAA6wYAAAAAAAAAAAAA6wYAAAAAAADrBgAAAAAAAAkAAABHLm5vZGVzKCnrBgAAAAAAAOwGAAAAAAAAAAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gYAAAAAAADzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"indent",
					null,
					"EgAAAPEGAAAAAAAA9QYAAAAAAAAAAAAAEwcAAAAAAAAXBwAAAAAAAAAAAABnBwAAAAAAAGsHAAAAAAAAAAAAAIMHAAAAAAAAhwcAAAAAAAAAAAAApwcAAAAAAACrBwAAAAAAAAAAAAD+BwAAAAAAAAIIAAAAAAAAAAAAAB4IAAAAAAAAIggAAAAAAAAAAAAAQggAAAAAAABGCAAAAAAAAAAAAABgCAAAAAAAAGQIAAAAAAAAAAAAAIEIAAAAAAAAhQgAAAAAAAAAAAAAlAgAAAAAAACYCAAAAAAAAAAAAACtCAAAAAAAALEIAAAAAAAAAAAAAMoIAAAAAAAAzggAAAAAAAAAAAAA5AgAAAAAAADoCAAAAAAAAAAAAAABCQAAAAAAAAUJAAAAAAAAAAAAABAJAAAAAAAAFAkAAAAAAAAAAAAAJgkAAAAAAAAqCQAAAAAAAAAAAAA/CQAAAAAAAEMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAkAAAAAAADxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"left_delete",
					null,
					"AQAAAAMHAAAAAAAAAwcAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAABAcAAAAAAAAEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\nassignem"
					},
					"CgAAAEcJAAAAAAAASAkAAAAAAAAAAAAASAkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAAUgkAAAAAAABTCQAAAAAAAAAAAABTCQAAAAAAAFQJAAAAAAAAAAAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABWCQAAAAAAAFcJAAAAAAAAAAAAAFcJAAAAAAAAWAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwkAAAAAAABHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assignements"
					},
					"AgAAAFAJAAAAAAAAUAkAAAAAAAAIAAAAYXNzaWduZW1QCQAAAAAAAFwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAkAAAAAAABYCQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": ".append"
					},
					"BwAAAFwJAAAAAAAAXQkAAAAAAAAAAAAAXQkAAAAAAABeCQAAAAAAAAAAAABeCQAAAAAAAF8JAAAAAAAAAAAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAABhCQAAAAAAAGIJAAAAAAAAAAAAAGIJAAAAAAAAYwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAkAAAAAAABcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGMJAAAAAAAAZQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAAGQJAAAAAAAAZQkAAAAAAAAAAAAAZQkAAAAAAABmCQAAAAAAAAAAAABmCQAAAAAAAGcJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"left_delete",
					null,
					"AgAAAJ0JAAAAAAAAnQkAAAAAAAAZAAAAIGFzc2lnbm1lbnQxLCBhc3NpZ25tZW50MpwJAAAAAAAAnAkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAnQkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"paste",
					null,
					"AgAAAGQJAAAAAAAAbgkAAAAAAAAAAAAAbgkAAAAAAABuCQAAAAAAAAMAAABhc3M",
					"AQAAAAAAAAABAAAAZAkAAAAAAABnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "+assigne"
					},
					"CAAAAKQJAAAAAAAApQkAAAAAAAAAAAAApQkAAAAAAACmCQAAAAAAAAAAAACmCQAAAAAAAKcJAAAAAAAAAAAAAKcJAAAAAAAAqAkAAAAAAAAAAAAAqAkAAAAAAACpCQAAAAAAAAAAAACpCQAAAAAAAKoJAAAAAAAAAAAAAKoJAAAAAAAAqwkAAAAAAAAAAAAAqwkAAAAAAACsCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAkAAAAAAACkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "assignements"
					},
					"AgAAAKUJAAAAAAAApQkAAAAAAAAHAAAAYXNzaWduZaUJAAAAAAAAsQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAkAAAAAAACsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": ":list"
					},
					"BQAAALQGAAAAAAAAtQYAAAAAAAAAAAAAtQYAAAAAAAC2BgAAAAAAAAAAAAC2BgAAAAAAALcGAAAAAAAAAAAAALcGAAAAAAAAuAYAAAAAAAAAAAAAuAYAAAAAAAC5BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAYAAAAAAAC0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALkGAAAAAAAAuwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "ast.st"
					},
					"BgAAALoGAAAAAAAAuwYAAAAAAAAAAAAAuwYAAAAAAAC8BgAAAAAAAAAAAAC8BgAAAAAAAL0GAAAAAAAAAAAAAL0GAAAAAAAAvgYAAAAAAAAAAAAAvgYAAAAAAAC/BgAAAAAAAAAAAAC/BgAAAAAAAMAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugYAAAAAAAC6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":30,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "stmt"
					},
					"AgAAAL4GAAAAAAAAvgYAAAAAAAACAAAAc3S+BgAAAAAAAMIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAYAAAAAAADABgAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"View Package File"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/examples",
		"/C/dev/src/pylive/pylive/QtLiveApp"
	],
	"file_history":
	[
		"/C/dev/src/pylive/pylive/examples/python_function_graph/function_widget.py",
		"/C/dev/src/pylive/tests/test_unique.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/reportviews.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/multidigraph.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_with_exec.py",
		"/C/dev/src/pylive/pylive/examples/livescript OLD.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/digraph.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/file_link.py",
		"/C/dev/src/pylive/expreiments/inspect_functions_experiment.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/infinite_graphicsview_optimized.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/utils/unique.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
		"/C/dev/src/pylive/blog/2024_12_18-houdini-meats-python.md",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_model.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtTerminal/logwindow.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/abstract_graph_deletage.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/graphview_with_delegate.py",
		"/C/dev/src/pylive/pylive/python_function_graph/function_graph_view.py",
		"/C/dev/src/pylive/expreiments/inspect_available_functions.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/nx_graph_model.py",
		"/P/!!INSTALL!!/____Install 2024/TVPaint Animation 10 Pro 10.0.16 (32 Bit)/Install.Notes.nfo",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/Users/and/Desktop/TVPaint Animation 10 Pro 10.0.16 (32 Bit)/Install.Notes.nfo",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/abstract_graph_delegate.py",
		"/C/dev/src/pylive/expreiments/ListItemDelegate-example.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_node_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/ConnectableGraphicsItem.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/edge_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/QGraphicsArrowItem.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/Connectable.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_databased.py",
		"/C/dev/src/pylive/expreiments/built-a-dependency-graph-of-a-python-codebase.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_columnbased.py",
		"/C/dev/src/pylive/pylive/examples/livescript.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_databased.py",
		"/C/dev/src/pylive/docs/2024_12_06-hot-reloading-a-python-script.md",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/pylive/QtScriptEditor/cell_support.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/line_number_area.py",
		"/C/dev/src/pylive/tests/test_cells.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/tests/test_function_signatures.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/display.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_skeleton.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/IPython/utils/terminal.py",
		"/C/dev/src/pylive/pylive/QtTerminal/terminal_with_exec.py",
		"/C/dev/src/pylive/pylive/render_engine/render_layers.py",
		"/C/dev/src/pylive/script_examples_to_run_live/spherical_transform.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/script_cursor.py",
		"/C/dev/src/pylive/pylive/__main__.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_skeleton.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_with_exec.py",
		"/C/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_number_editor.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/invisibles_highlighter.py",
		"/C/dev/src/pylive/script_examples_to_run_live/livescript_demonstration.py",
		"/C/dev/src/pylive/script_examples_to_run_live/lorem_ipsum.md",
		"/C/dev/src/pylive/expreiments/file_textdocument_link.py",
		"/C/dev/src/pylive/pylive/__init__.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/__init__.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_with_qtconsole.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/asttokens/line_numbers.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/old_architecture/script_editor_simple.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
		"/C/dev/src/pylive/expreiments/glcanvas.py",
		"/C/dev/src/pylive/pylive/render_engine/regl/regl.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_skeleton.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/glcanvas.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLWindow_with_qopengl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget_with_request_animation.py",
		"/C/dev/src/pylive/pylive/render_engine/utils/__init__.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget-with_painting_signal.py",
		"/C/dev/src/pylive/pylive/render_engine/glwidget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWindow.py",
		"/C/Users/andris/AppData/Local/Temp/2ea7c807-5541-48c5-9e23-9d4d4826a0ed_Microsoft Office 2021 Pro Plus.zip.0ed/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/Users/andris/Downloads/Microsoft Office 2021 Pro Plus (365 ) + Patch/Microsoft Office 2021 Pro Plus/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/dev/src/pylive/expreiments/opengl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pygame_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/opengl_outside_window.py",
		"/C/dev/src/pylive/pylive/render_engine/orbit_control.py",
		"/C/dev/src/pylive/pylive/render_engine/lookAt_standalone.vert",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/linter_widget.py",
		"/C/dev/src/pylive/pylive/logwindow.py",
		"/C/dev/src/pylive/pylive/shaders/billboard.vert",
		"/C/dev/src/pylive/pylive/render_engine/resource_manager.py",
		"/C/dev/src/pylive/pylive/render_engine/examples/1 render layers.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/unified_titlebar.py",
		"/C/dev/src/pylive/pylive/render_engine/camera.py",
		"/C/dev/src/pylive/pylive/shaders/default_vertex_shader.vert",
		"/C/dev/src/pylive/pylive/shaders/flat_fragment_shader.frag",
		"/C/dev/src/pylive/gloo/render_layers.py",
		"/C/dev/src/pylive/gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/orbit_control.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_window_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/rendering_with_qt.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/qpygletwidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_1.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget (Not Working).py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_2.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_canvas_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyglet_on_QWidget.py",
		"/C/dev/src/pylive/expreiments/ipython/ipython_kernel.py",
		"/C/dev/src/pylive/expreiments/ipython/qtconsole_inprocess1.py",
		"/C/dev/src/pylive/expreiments/ipython/simple_console.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_ipython.py",
		"/C/dev/src/pylive/expreiments/simple_console.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_gpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notbook_with_chatgpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/live_framework.py",
		"/C/dev/src/pylive/expreiments/ipython_kernel.py"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Preview",
			"__qualname__",
			"__name",
			"evaluate",
			"sig.para",
			"signature.par",
			"param.kind",
			"getNodeProperty",
			"addEdge",
			"make_unique_name",
			"make)unique",
			"make_unique_name",
			"make_unique",
			"edgesAbout",
			"monospace",
			"evaluate",
			"edge",
			"key",
			"DiGraph",
			"disconnected",
			"connected",
			"onConn",
			"PanAndZoomGraphicsView",
			"QGraphicsTextItem",
			"PinWidget",
			"handleNodesProp",
			"handlenodesProp",
			"nodedele",
			"n = ",
			"NodeWidget",
			"print",
			"geometry",
			"createNodeW",
			"delegate",
			"initiate",
			"contextMenu",
			"eventFilter",
			"intersectLineWithRectangle",
			"intersectLineWithPath",
			"ellipse",
			"intersectRay",
			"rect_max[1]",
			"rect_min[1]",
			"rect_max[0]",
			"rect_min[0]",
			"print",
			"intersect",
			"intersectLineWithPath",
			"intersectLine",
			"intersect",
			"intersectRayWithPath",
			"intersectLine",
			"print",
			".target",
			".source",
			"def paint(",
			"def paint",
			"Signal",
			"scenePositionChanged",
			"scenePositionChan ged",
			"ItemScenePositionHasChanged",
			"print",
			"LiveScript",
			"cells",
			"cell",
			"insertbar",
			"trimesh",
			"self.cell",
			"setEditor",
			"cell",
			"status",
			"self._wi",
			"saveFile",
			"def setup",
			"def setu[",
			"setup",
			"self.document",
			"updateWindowTitle",
			"modified",
			"def open",
			"setPreview",
			"pylive.display",
			"get_line_at_offset",
			"updateLine",
			"LineNumberArea",
			"line number",
			"setAttribute(",
			"setAttribute",
			"get_context",
			"QOpenGLWindow",
			"import QOpenGLWindow",
			"Literal",
			"literal",
			"Searching",
			"Lityeral",
			"dtype",
			"\t\t'",
			"internal_format",
			"dtype",
			"mode",
			"varyings_capture_mode",
			"internal_format",
			"dtype",
			"internal_format",
			"dtype",
			"internal_format",
			"varyings_capture_mode",
			"self",
			"for",
			"framebuffers",
			"placeholder",
			"find",
			"fin",
			"clearNo",
			"showException",
			"evalu",
			"completer",
			"RopeC",
			"lineNumberArea",
			"completer",
			"print",
			"new file",
			"setWindowTitle",
			"modifie",
			"setPreviewCollapse",
			"contentChang",
			"setupMenui",
			"NodeW"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bottom",
			"top",
			"right",
			"left",
			"self._document",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "expreiments/inspect_functions_experiment.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1953,
						"regions":
						{
						},
						"selection":
						[
							[
								958,
								958
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/inspect_functions_experiment.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pylive/QtGraphEditor/dag_graph_graphics_scene.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33198,
						"regions":
						{
						},
						"selection":
						[
							[
								21299,
								21309
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8317.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9802,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										188,
										197
									],
									[
										461,
										470
									],
									[
										717,
										726
									],
									[
										1035,
										1044
									],
									[
										1116,
										1125
									],
									[
										1415,
										1424
									],
									[
										1494,
										1503
									],
									[
										1715,
										1724
									],
									[
										2019,
										2028
									],
									[
										2432,
										2441
									],
									[
										2797,
										2806
									],
									[
										3072,
										3081
									],
									[
										3354,
										3363
									],
									[
										3433,
										3442
									],
									[
										3727,
										3738
									],
									[
										3917,
										3928
									],
									[
										4168,
										4179
									],
									[
										4420,
										4431
									],
									[
										4436,
										4447
									],
									[
										4616,
										4627
									],
									[
										4665,
										4676
									],
									[
										4964,
										4975
									],
									[
										5262,
										5273
									],
									[
										5424,
										5435
									],
									[
										5693,
										5704
									],
									[
										5923,
										5934
									],
									[
										6269,
										6280
									],
									[
										6577,
										6588
									],
									[
										6950,
										6961
									],
									[
										7116,
										7127
									],
									[
										7257,
										7268
									],
									[
										7446,
										7457
									],
									[
										7657,
										7668
									],
									[
										7909,
										7920
									],
									[
										8181,
										8192
									],
									[
										8454,
										8465
									],
									[
										8774,
										8785
									],
									[
										8964,
										8975
									],
									[
										9211,
										9222
									],
									[
										9411,
										9422
									],
									[
										9629,
										9640
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								3574,
								3574
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"line_numbers": false,
							"lsp_uri": "buffer:83",
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1344.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pylive/utils/unique.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 728,
						"regions":
						{
						},
						"selection":
						[
							[
								727,
								727
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/utils/unique.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pylive/QtGraphEditor/nx_graph_model.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5888,
						"regions":
						{
						},
						"selection":
						[
							[
								3049,
								3070
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtGraphEditor/nx_graph_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 5,
					"file": "pylive/examples/python_function_graph/main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11578,
						"regions":
						{
						},
						"selection":
						[
							[
								1084,
								1084
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/examples/python_function_graph/main.py",
							"rulers":
							[
								80
							],
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.401144815825,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 240.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"geo",
				"pylive\\utils\\geo.py"
			],
			[
				"nx",
				"pylive\\QtGraphEditor\\NetrowkXGraphditor\\NXGraphView.py"
			],
			[
				"unique",
				"pylive\\pylive\\utils\\unique.py"
			],
			[
				"linenu",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"test",
				"pylive\\tests\\test_cells.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"linen",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"lineare",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"terminal",
				"pylive\\pylive\\QtTerminal\\terminal_with_exec.py"
			],
			[
				"termina",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\terminal.py"
			],
			[
				"scripte",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"script",
				"pylive\\pylive\\QtScriptEditor\\components\\script_cursor.py"
			],
			[
				"pyg",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"numbere",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"highlight",
				"pylive\\pylive\\QtScriptEditor\\components\\invisibles_highlighter.py"
			],
			[
				"glca",
				"pylive\\script_examples_to_run_live\\glcanvas_widget_with_moderngl.py"
			],
			[
				"filelink",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"displ",
				"pylive\\pylive\\QtLiveApp\\display.py"
			],
			[
				"line",
				"pylive\\.venv\\Lib\\site-packages\\asttokens\\line_numbers.py"
			],
			[
				"scri",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"main",
				"pylive\\pylive\\render_engine\\regl\\main.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "circle",
		"selected_items":
		[
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 307.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
