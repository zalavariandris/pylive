{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"error",
				"error_message"
			],
			[
				"trace",
				"traceback"
			],
			[
				"_nodes",
				"_node_selection"
			],
			[
				"_link",
				"_link_graphics_objects"
			],
			[
				"nodeW",
				"nodeWidgets"
			],
			[
				"_node",
				"_node_graphics_objects"
			],
			[
				"node",
				"nodeWidgets"
			],
			[
				"remove",
				"removeRow"
			],
			[
				"asserNo",
				"assertIsNotNone"
			],
			[
				"inde",
				"indexFromItem"
			],
			[
				"dr",
				"drawComplexControl"
			],
			[
				"setSe",
				"setSelectionModel"
			],
			[
				"MouseButton",
				"MouseButtonRelease"
			],
			[
				"Mouse",
				"MouseButtonPress"
			],
			[
				"QGraphicsMouse",
				"QGraphicsSceneMouseEvent"
			],
			[
				"event",
				"eventFilter"
			],
			[
				"nodes",
				"_nodes"
			],
			[
				"node_",
				"node_index"
			],
			[
				"update",
				"updateLinkPosition"
			],
			[
				"pos",
				"scenePos"
			],
			[
				"it",
				"itemAt"
			],
			[
				"_",
				"_inlets"
			],
			[
				"Drag",
				"DragResponse"
			],
			[
				"mouseP",
				"GraphicsSceneMousePress"
			],
			[
				"in",
				"in_edges"
			],
			[
				"Mult",
				"MultiDiGraph"
			],
			[
				"topol",
				"topological_sort"
			],
			[
				"default",
				"defaultlist"
			],
			[
				"defa",
				"defaultdict"
			],
			[
				"defaul",
				"defaultlist"
			],
			[
				"Multi",
				"MultiDiGraph"
			],
			[
				"setStyle",
				"setStyleSheet"
			],
			[
				"setPl",
				"setPlainText"
			],
			[
				"data",
				"dataChanged"
			],
			[
				"setSi",
				"setPreferredSize"
			],
			[
				"QDelegate",
				"QAbstractItemDelegate"
			],
			[
				"sib",
				"siblingAtColumn"
			],
			[
				"GraphicsM",
				"GraphicsSceneMouseDoubleClick"
			],
			[
				"setPs",
				"setPos"
			],
			[
				"curren",
				"current_node_index"
			],
			[
				"setTe",
				"setPlainText"
			],
			[
				"reve",
				"reverse"
			],
			[
				"co",
				"count"
			],
			[
				"cu",
				"currentIndex"
			],
			[
				"field",
				"field_item"
			],
			[
				"Uniq",
				"UniqueFunctionItem"
			],
			[
				"dir",
				"dirty="
			],
			[
				"insert",
				"insertFieldItem"
			],
			[
				"NotImpl",
				"NotImplementedError"
			],
			[
				"Ty",
				"ItemType"
			],
			[
				"func",
				"_functions"
			],
			[
				"inser",
				"insertFunction"
			],
			[
				"add",
				"addAction"
			],
			[
				"addA",
				"addAction"
			],
			[
				"read_",
				"read_abstract"
			],
			[
				"function",
				"functionName"
			],
			[
				"insertR",
				"insertRows"
			],
			[
				"text",
				"textwrap"
			],
			[
				"ex",
				"exit"
			],
			[
				"setS",
				"setStretch"
			],
			[
				"main",
				"main_layout"
			],
			[
				"edg",
				"edges_sheet_table_view"
			],
			[
				"st",
				"stop"
			],
			[
				"row",
				"row_group"
			],
			[
				"Sele",
				"SelectionMode"
			],
			[
				"prop",
				"property_editor"
			],
			[
				"re",
				"reverse="
			],
			[
				"selectionM",
				"selectionModel"
			],
			[
				"propert",
				"property_editor"
			],
			[
				"curre",
				"currentIndex"
			],
			[
				"remo",
				"removeRows"
			],
			[
				"cli",
				"clicked"
			],
			[
				"Field",
				"FieldItem"
			],
			[
				"property",
				"property_editor"
			],
			[
				"QW",
				"QWidget"
			],
			[
				"siblin",
				"siblingAtColumn"
			],
			[
				"sibl",
				"siblingAtColumn"
			],
			[
				"selection",
				"selectionChanged"
			],
			[
				"insp",
				"inspector_layout"
			],
			[
				"setStr",
				"setColumnStretch"
			],
			[
				"AlignB",
				"AlignBottom"
			],
			[
				"Align",
				"AlignCenter"
			],
			[
				"QAbstractIte",
				"QAbstractItemModel"
			],
			[
				"QWidget",
				"QWidgetItem"
			],
			[
				"he",
				"heading_area"
			],
			[
				"Item",
				"ItemDataRole"
			],
			[
				"grid",
				"grid_layout"
			],
			[
				"align",
				"AlignRight"
			],
			[
				"QLayout",
				"QLayoutItem"
			],
			[
				"chil",
				"children"
			],
			[
				"str",
				"stretch"
			],
			[
				"setD",
				"setDocumentMode"
			],
			[
				"defi",
				"definitions_list_view"
			],
			[
				"layout",
				"layout_item"
			],
			[
				"chi",
				"children"
			],
			[
				"QLa",
				"QLayout"
			],
			[
				"qt",
				"qtfactory"
			],
			[
				"QStandard",
				"QStandardItemModel"
			],
			[
				"Edges",
				"EdgesModel"
			],
			[
				"Defini",
				"DefinitionItem"
			],
			[
				"removeR",
				"removeRows"
			],
			[
				"group_con",
				"_group_consecutive_numbers_clever"
			],
			[
				"link_selecte",
				"link_selected_nodes"
			],
			[
				"sele",
				"selectedIndexes"
			],
			[
				"Selec",
				"SelectionMode"
			],
			[
				"setSele",
				"setSelectionMode"
			],
			[
				"Link",
				"LinksModel"
			],
			[
				"Node",
				"NodesModel"
			],
			[
				"Nod",
				"NodesModel"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"def",
				"definition="
			],
			[
				"inserR",
				"insertRows"
			],
			[
				"depre",
				"deprecated"
			],
			[
				"beginIN",
				"beginInsertRows"
			],
			[
				"QSTandard",
				"QStandardItemModel"
			],
			[
				"QPer",
				"QPersistentModelIndex"
			],
			[
				"QListMo",
				"QAbstractListModel"
			],
			[
				"endIns",
				"endInsertRows"
			],
			[
				"beginI",
				"beginInsertRows"
			],
			[
				"yaml",
				"yaml_string"
			],
			[
				"sign",
				"signalsBlocked"
			],
			[
				"Standart",
				"StandardButton"
			],
			[
				"QMe",
				"QMessageBox"
			],
			[
				"QInput",
				"QInputDialog"
			],
			[
				"QDial",
				"QDialog"
			],
			[
				"make",
				"make_bibliography"
			],
			[
				"ini",
				"init_definitions"
			],
			[
				"updat",
				"_update_document_viewer"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pylive/VisualCode_v4/main.py",
			"settings":
			{
				"buffer_size": 17520,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					51,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAALQ6AAAAAAAAtToAAAAAAAAAAAAAtToAAAAAAAC2OgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0OgAAAAAAALQ6AAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "result:"
					},
					"BwAAALU6AAAAAAAAtjoAAAAAAAAAAAAAtjoAAAAAAAC3OgAAAAAAAAAAAAC3OgAAAAAAALg6AAAAAAAAAAAAALg6AAAAAAAAuToAAAAAAAAAAAAAuToAAAAAAAC6OgAAAAAAAAAAAAC6OgAAAAAAALs6AAAAAAAAAAAAALs6AAAAAAAAvDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1OgAAAAAAALU6AAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAALs6AAAAAAAAuzoAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8OgAAAAAAALw6AAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAALs6AAAAAAAAvDoAAAAAAAAAAAAAvDoAAAAAAAC9OgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7OgAAAAAAALs6AAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAL46AAAAAAAAvzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+OgAAAAAAAL46AAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL06AAAAAAAAvzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9OgAAAAAAAL06AAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "result"
					},
					"BgAAAL46AAAAAAAAvzoAAAAAAAAAAAAAvzoAAAAAAADAOgAAAAAAAAAAAADAOgAAAAAAAME6AAAAAAAAAAAAAME6AAAAAAAAwjoAAAAAAAAAAAAAwjoAAAAAAADDOgAAAAAAAAAAAADDOgAAAAAAAMQ6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+OgAAAAAAAL46AAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAMY6AAAAAAAAxjoAAAAAAAAMAAAAK3N0cihyZXN1bHQp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGOgAAAAAAANI6AAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAALQ6AAAAAAAAtToAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0OgAAAAAAALQ6AAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "f\"{"
					},
					"BAAAADg7AAAAAAAAOTsAAAAAAAAAAAAAOTsAAAAAAAA5OwAAAAAAAAMAAABzdHI5OwAAAAAAADo7AAAAAAAAAAAAADo7AAAAAAAAOzsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4OwAAAAAAADs7AAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAADs7AAAAAAAAOzsAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8OwAAAAAAADw7AAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAAD47AAAAAAAAPjsAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/OwAAAAAAAD87AAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "}\""
					},
					"AgAAAD47AAAAAAAAPzsAAAAAAAAAAAAAPzsAAAAAAABAOwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+OwAAAAAAAD47AAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"paste",
					null,
					"AgAAANI7AAAAAAAA3DsAAAAAAAAAAAAA3DsAAAAAAADcOwAAAAAAAAkAAABzdHIoZXJyKSk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbOwAAAAAAANI7AAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAANI7AAAAAAAA0jsAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTOwAAAAAAANM7AAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "Error\\n"
					},
					"BwAAANQ7AAAAAAAA1TsAAAAAAAAAAAAA1TsAAAAAAADWOwAAAAAAAAAAAADWOwAAAAAAANc7AAAAAAAAAAAAANc7AAAAAAAA2DsAAAAAAAAAAAAA2DsAAAAAAADZOwAAAAAAAAAAAADZOwAAAAAAANo7AAAAAAAAAAAAANo7AAAAAAAA2zsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUOwAAAAAAANQ7AAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "Error\\n"
					},
					"BwAAADo7AAAAAAAAOzsAAAAAAAAAAAAAOzsAAAAAAAA8OwAAAAAAAAAAAAA8OwAAAAAAAD07AAAAAAAAAAAAAD07AAAAAAAAPjsAAAAAAAAAAAAAPjsAAAAAAAA/OwAAAAAAAAAAAAA/OwAAAAAAAEA7AAAAAAAAAAAAAEA7AAAAAAAAQTsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6OwAAAAAAADo7AAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAEc6AAAAAAAASDoAAAAAAAAAAAAASDoAAAAAAABUOgAAAAAAAAAAAABUOgAAAAAAAFU6AAAAAAAAAAAAAFU6AAAAAAAAYToAAAAAAAAAAAAASDoAAAAAAABIOgAAAAAAAAwAAAAgICAgICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHOgAAAAAAAEc6AAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAFE6AAAAAAAAUToAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVOgAAAAAAAFU6AAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BQAAAFE6AAAAAAAAUjoAAAAAAAAAAAAAUjoAAAAAAABTOgAAAAAAAAAAAABTOgAAAAAAAFQ6AAAAAAAAAAAAAFQ6AAAAAAAAVToAAAAAAAAAAAAAVToAAAAAAABWOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABROgAAAAAAAFE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFY6AAAAAAAAWDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWOgAAAAAAAFY6AAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"left_delete",
					null,
					"AQAAAEg6AAAAAAAASDoAAAAAAAAQAAAACiAgICAgICAgcHJpbnQoKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYOgAAAAAAAEg6AAAAAAAAAAAAAADAWkA"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEg6AAAAAAAASToAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIOgAAAAAAAEg6AAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					2,
					"left_delete",
					null,
					"AgAAAEg6AAAAAAAASDoAAAAAAAABAAAAPUc6AAAAAAAARzoAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJOgAAAAAAAEk6AAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAAI6AAAAAAAAAzoAAAAAAAAAAAAAAzoAAAAAAAALOgAAAAAAAAAAAAALOgAAAAAAAAw6AAAAAAAAAAAAAAw6AAAAAAAADToAAAAAAAAAAAAADToAAAAAAAAOOgAAAAAAAAAAAAAOOgAAAAAAAA86AAAAAAAAAAAAAA86AAAAAAAAEDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACOgAAAAAAAAI6AAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABA6AAAAAAAAEjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQOgAAAAAAABA6AAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABE6AAAAAAAAEzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAROgAAAAAAABE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "evaluate"
					},
					"CAAAABI6AAAAAAAAEzoAAAAAAAAAAAAAEzoAAAAAAAAUOgAAAAAAAAAAAAAUOgAAAAAAABU6AAAAAAAAAAAAABU6AAAAAAAAFjoAAAAAAAAAAAAAFjoAAAAAAAAXOgAAAAAAAAAAAAAXOgAAAAAAABg6AAAAAAAAAAAAABg6AAAAAAAAGToAAAAAAAAAAAAAGToAAAAAAAAaOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASOgAAAAAAABI6AAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABs6AAAAAAAAHDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbOgAAAAAAABs6AAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " cuirr"
					},
					"BgAAABw6AAAAAAAAHToAAAAAAAAAAAAAHToAAAAAAAAeOgAAAAAAAAAAAAAeOgAAAAAAAB86AAAAAAAAAAAAAB86AAAAAAAAIDoAAAAAAAAAAAAAIDoAAAAAAAAhOgAAAAAAAAAAAAAhOgAAAAAAACI6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcOgAAAAAAABw6AAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					3,
					"left_delete",
					null,
					"AwAAACE6AAAAAAAAIToAAAAAAAABAAAAciA6AAAAAAAAIDoAAAAAAAABAAAAch86AAAAAAAAHzoAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiOgAAAAAAACI6AAAAAAAAAAAAAAAA8L8"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "rr"
					},
					"AgAAAB86AAAAAAAAIDoAAAAAAAAAAAAAIDoAAAAAAAAhOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfOgAAAAAAAB86AAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":11,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "current_node_index"
					},
					"AgAAAB06AAAAAAAAHToAAAAAAAAEAAAAY3Vych06AAAAAAAALzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhOgAAAAAAACE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAF06AAAAAAAAXjoAAAAAAAAAAAAAXjoAAAAAAABmOgAAAAAAAAAAAABmOgAAAAAAAGo6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdOgAAAAAAAF06AAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"paste",
					null,
					"AQAAAGo6AAAAAAAAvjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqOgAAAAAAAGo6AAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "nothing"
					},
					"CAAAAIE6AAAAAAAAgjoAAAAAAAAAAAAAgjoAAAAAAACCOgAAAAAAABEAAAByZXN1bHRcbntyZXN1bHR9IoI6AAAAAAAAgzoAAAAAAAAAAAAAgzoAAAAAAACEOgAAAAAAAAAAAACEOgAAAAAAAIU6AAAAAAAAAAAAAIU6AAAAAAAAhjoAAAAAAAAAAAAAhjoAAAAAAACHOgAAAAAAAAAAAACHOgAAAAAAAIg6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSOgAAAAAAAIE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " selected-"
					},
					"CgAAAIg6AAAAAAAAiToAAAAAAAAAAAAAiToAAAAAAACKOgAAAAAAAAAAAACKOgAAAAAAAIs6AAAAAAAAAAAAAIs6AAAAAAAAjDoAAAAAAAAAAAAAjDoAAAAAAACNOgAAAAAAAAAAAACNOgAAAAAAAI46AAAAAAAAAAAAAI46AAAAAAAAjzoAAAAAAAAAAAAAjzoAAAAAAACQOgAAAAAAAAAAAACQOgAAAAAAAJE6AAAAAAAAAAAAAJE6AAAAAAAAkjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIOgAAAAAAAIg6AAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAJI6AAAAAAAAkzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSOgAAAAAAAJI6AAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAIE6AAAAAAAAgjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBOgAAAAAAAIE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAACM7AAAAAAAAJDsAAAAAAAAAAAAAJDsAAAAAAAAwOwAAAAAAAAAAAAAwOwAAAAAAADE7AAAAAAAAAAAAADE7AAAAAAAAMjsAAAAAAAAAAAAAMjsAAAAAAAAzOwAAAAAAAAAAAAAzOwAAAAAAADQ7AAAAAAAAAAAAADQ7AAAAAAAANTsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjOwAAAAAAACM7AAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADU7AAAAAAAANzsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1OwAAAAAAADU7AAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "res"
					},
					"AwAAADY7AAAAAAAANzsAAAAAAAAAAAAANzsAAAAAAAA4OwAAAAAAAAAAAAA4OwAAAAAAADk7AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2OwAAAAAAADY7AAAAAAAAAAAAAAAA8L8"
				],
				[
					221,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":77,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAADY7AAAAAAAANjsAAAAAAAADAAAAcmVzNjsAAAAAAAA8OwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5OwAAAAAAADk7AAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACg8AAAAAAAAKTwAAAAAAAAAAAAAKTwAAAAAAAA1PAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoPAAAAAAAACg8AAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"paste",
					null,
					"AQAAADU8AAAAAAAAQjwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1PAAAAAAAADU8AAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "err"
					},
					"BAAAADs8AAAAAAAAPDwAAAAAAAAAAAAAPDwAAAAAAAA8PAAAAAAAAAYAAAByZXN1bHQ8PAAAAAAAAD08AAAAAAAAAAAAAD08AAAAAAAAPjwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7PAAAAAAAAEE8AAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOA8AAAAAAAA4TwAAAAAAAAAAAAA4TwAAAAAAADtPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgPAAAAAAAAOA8AAAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"paste",
					null,
					"AQAAAO08AAAAAAAA9zwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtPAAAAAAAAO08AAAAAAAAAAAAAAAA8L8"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAADs8AAAAAAAAPDwAAAAAAAAAAAAAPDwAAAAAAAA9PAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7PAAAAAAAADs8AAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "evaluate"
					},
					"CAAAADw8AAAAAAAAPTwAAAAAAAAAAAAAPTwAAAAAAAA+PAAAAAAAAAAAAAA+PAAAAAAAAD88AAAAAAAAAAAAAD88AAAAAAAAQDwAAAAAAAAAAAAAQDwAAAAAAABBPAAAAAAAAAAAAABBPAAAAAAAAEI8AAAAAAAAAAAAAEI8AAAAAAAAQzwAAAAAAAAAAAAAQzwAAAAAAABEPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8PAAAAAAAADw8AAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": " error:"
					},
					"BwAAAEQ8AAAAAAAARTwAAAAAAAAAAAAARTwAAAAAAABGPAAAAAAAAAAAAABGPAAAAAAAAEc8AAAAAAAAAAAAAEc8AAAAAAAASDwAAAAAAAAAAAAASDwAAAAAAABJPAAAAAAAAAAAAABJPAAAAAAAAEo8AAAAAAAAAAAAAEo8AAAAAAAASzwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEPAAAAAAAAEQ8AAAAAAAAAAAAAAAA8L8"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEw8AAAAAAAATTwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMPAAAAAAAAEw8AAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE08AAAAAAAATjwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNPAAAAAAAAE08AAAAAAAAAAAAAAAA8L8"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAADY7AAAAAAAANzsAAAAAAAAAAAAANzsAAAAAAAA4OwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2OwAAAAAAADY7AAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "evaluate"
					},
					"CAAAADc7AAAAAAAAODsAAAAAAAAAAAAAODsAAAAAAAA5OwAAAAAAAAAAAAA5OwAAAAAAADo7AAAAAAAAAAAAADo7AAAAAAAAOzsAAAAAAAAAAAAAOzsAAAAAAAA8OwAAAAAAAAAAAAA8OwAAAAAAAD07AAAAAAAAAAAAAD07AAAAAAAAPjsAAAAAAAAAAAAAPjsAAAAAAAA/OwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3OwAAAAAAADc7AAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " result:"
					},
					"CAAAAD87AAAAAAAAQDsAAAAAAAAAAAAAQDsAAAAAAABBOwAAAAAAAAAAAABBOwAAAAAAAEI7AAAAAAAAAAAAAEI7AAAAAAAAQzsAAAAAAAAAAAAAQzsAAAAAAABEOwAAAAAAAAAAAABEOwAAAAAAAEU7AAAAAAAAAAAAAEU7AAAAAAAARjsAAAAAAAAAAAAARjsAAAAAAABHOwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/OwAAAAAAAD87AAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEg7AAAAAAAASTsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIOwAAAAAAAEg7AAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEk7AAAAAAAASjsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJOwAAAAAAAEk7AAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"paste",
					null,
					"AgAAABQ9AAAAAAAAMT0AAAAAAAAAAAAAMT0AAAAAAAAxPQAAAAAAAAoAAABwcmludChlcnIp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAePQAAAAAAABQ9AAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					1,
					"paste",
					null,
					"AgAAAFk8AAAAAAAAZDwAAAAAAAAAAAAAZDwAAAAAAABkPAAAAAAAAAUAAABlcnJvcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZPAAAAAAAAF48AAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"paste",
					null,
					"AgAAACo9AAAAAAAAMz0AAAAAAAAAAAAAMz0AAAAAAAAzPQAAAAAAAAUAAABlcnJvcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqPQAAAAAAAC89AAAAAAAAAAAAAAAA8L8"
				],
				[
					342,
					2,
					"left_delete",
					null,
					"AgAAAHAAAAAAAAAAcAAAAAAAAAAdAAAAZnJvbSBuZXR3b3JreCBpbXBvcnQgcmV2ZXJzZQpvAAAAAAAAAG8AAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAHAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					345,
					1,
					"left_delete",
					null,
					"AQAAAMcsAAAAAAAAxywAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADILAAAAAAAAMgsAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"left_delete",
					null,
					"AQAAAKobAAAAAAAAqhsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrGwAAAAAAAKsbAAAAAAAAAAAAAAAA8L8"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKI5AAAAAAAAozkAAAAAAAAAAAAAozkAAAAAAACnOQAAAAAAAAAAAACnOQAAAAAAAKs5AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiOQAAAAAAAKI5AAAAAAAAAAAAAAAgfEA"
				],
				[
					408,
					1,
					"paste",
					null,
					"AQAAAKs5AAAAAAAAAToAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrOQAAAAAAAKs5AAAAAAAAAAAAAAAA8L8"
				],
				[
					412,
					1,
					"left_delete",
					null,
					"AQAAAN85AAAAAAAA3zkAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjOQAAAAAAAOM5AAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EwAAAH89AAAAAAAAgT0AAAAAAAAAAAAAUT0AAAAAAABTPQAAAAAAAAAAAAAcPQAAAAAAAB49AAAAAAAAAAAAAOo8AAAAAAAA7DwAAAAAAAAAAAAAyTwAAAAAAADLPAAAAAAAAAAAAACwPAAAAAAAALI8AAAAAAAAAAAAAIA8AAAAAAAAgjwAAAAAAAAAAAAASzwAAAAAAABNPAAAAAAAAAAAAAAZPAAAAAAAABs8AAAAAAAAAAAAAPY7AAAAAAAA+DsAAAAAAAAAAAAAyzsAAAAAAADNOwAAAAAAAAAAAACVOwAAAAAAAJc7AAAAAAAAAAAAAGc7AAAAAAAAaTsAAAAAAAAAAAAAKjsAAAAAAAAsOwAAAAAAAAAAAAAdOwAAAAAAAB87AAAAAAAAAAAAAAQ7AAAAAAAABjsAAAAAAAAAAAAA2ToAAAAAAADbOgAAAAAAAAAAAAChOgAAAAAAAKM6AAAAAAAAAAAAAHQ6AAAAAAAAdjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPPQAAAAAAAGw6AAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "\nself.preview"
					},
					"DgAAAGs6AAAAAAAAbDoAAAAAAAAAAAAAbDoAAAAAAAB0OgAAAAAAAAAAAAB0OgAAAAAAAHU6AAAAAAAAAAAAAHU6AAAAAAAAdjoAAAAAAAAAAAAAdjoAAAAAAAB3OgAAAAAAAAAAAAB3OgAAAAAAAHg6AAAAAAAAAAAAAHg6AAAAAAAAeToAAAAAAAAAAAAAeToAAAAAAAB6OgAAAAAAAAAAAAB6OgAAAAAAAHs6AAAAAAAAAAAAAHs6AAAAAAAAfDoAAAAAAAAAAAAAfDoAAAAAAAB9OgAAAAAAAAAAAAB9OgAAAAAAAH46AAAAAAAAAAAAAH46AAAAAAAAfzoAAAAAAAAAAAAAfzoAAAAAAACAOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrOgAAAAAAAGs6AAAAAAAAAAAAAAAA8L8"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": ".setT"
					},
					"BQAAAIA6AAAAAAAAgToAAAAAAAAAAAAAgToAAAAAAACCOgAAAAAAAAAAAACCOgAAAAAAAIM6AAAAAAAAAAAAAIM6AAAAAAAAhDoAAAAAAAAAAAAAhDoAAAAAAACFOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAOgAAAAAAAIA6AAAAAAAAAAAAAAAA8L8"
				],
				[
					421,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":55,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setText"
					},
					"AgAAAIE6AAAAAAAAgToAAAAAAAAEAAAAc2V0VIE6AAAAAAAAiDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFOgAAAAAAAIU6AAAAAAAAAAAAAAAA8L8"
				],
				[
					422,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIg6AAAAAAAAijoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIOgAAAAAAAIg6AAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAIk6AAAAAAAAijoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJOgAAAAAAAIk6AAAAAAAAAAAAAAAA8L8"
				],
				[
					424,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAIo6AAAAAAAAjDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKOgAAAAAAAIo6AAAAAAAAAAAAAAAA8L8"
				],
				[
					425,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIs6AAAAAAAAjToAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLOgAAAAAAAIs6AAAAAAAAAAAAAAAA8L8"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "time."
					},
					"BQAAAIw6AAAAAAAAjToAAAAAAAAAAAAAjToAAAAAAACOOgAAAAAAAAAAAACOOgAAAAAAAI86AAAAAAAAAAAAAI86AAAAAAAAkDoAAAAAAAAAAAAAkDoAAAAAAACROgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMOgAAAAAAAIw6AAAAAAAAAAAAAAAA8L8"
				],
				[
					427,
					5,
					"left_delete",
					null,
					"BQAAAJA6AAAAAAAAkDoAAAAAAAABAAAALo86AAAAAAAAjzoAAAAAAAABAAAAZY46AAAAAAAAjjoAAAAAAAABAAAAbY06AAAAAAAAjToAAAAAAAABAAAAaYw6AAAAAAAAjDoAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACROgAAAAAAAJE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": "datetime."
					},
					"CQAAAIw6AAAAAAAAjToAAAAAAAAAAAAAjToAAAAAAACOOgAAAAAAAAAAAACOOgAAAAAAAI86AAAAAAAAAAAAAI86AAAAAAAAkDoAAAAAAAAAAAAAkDoAAAAAAACROgAAAAAAAAAAAACROgAAAAAAAJI6AAAAAAAAAAAAAJI6AAAAAAAAkzoAAAAAAAAAAAAAkzoAAAAAAACUOgAAAAAAAAAAAACUOgAAAAAAAJU6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMOgAAAAAAAIw6AAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "datetime"
					},
					"CAAAAJU6AAAAAAAAljoAAAAAAAAAAAAAljoAAAAAAACXOgAAAAAAAAAAAACXOgAAAAAAAJg6AAAAAAAAAAAAAJg6AAAAAAAAmToAAAAAAAAAAAAAmToAAAAAAACaOgAAAAAAAAAAAACaOgAAAAAAAJs6AAAAAAAAAAAAAJs6AAAAAAAAnDoAAAAAAAAAAAAAnDoAAAAAAACdOgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVOgAAAAAAAJU6AAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ06AAAAAAAAnzoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdOgAAAAAAAJ06AAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "\nfrom"
					},
					"BgAAAGs6AAAAAAAAbDoAAAAAAAAAAAAAbDoAAAAAAAB0OgAAAAAAAAAAAAB0OgAAAAAAAHU6AAAAAAAAAAAAAHU6AAAAAAAAdjoAAAAAAAAAAAAAdjoAAAAAAAB3OgAAAAAAAAAAAAB3OgAAAAAAAHg6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrOgAAAAAAAGs6AAAAAAAAAAAAAABgdkA"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": " datetime"
					},
					"CQAAAHg6AAAAAAAAeToAAAAAAAAAAAAAeToAAAAAAAB6OgAAAAAAAAAAAAB6OgAAAAAAAHs6AAAAAAAAAAAAAHs6AAAAAAAAfDoAAAAAAAAAAAAAfDoAAAAAAAB9OgAAAAAAAAAAAAB9OgAAAAAAAH46AAAAAAAAAAAAAH46AAAAAAAAfzoAAAAAAAAAAAAAfzoAAAAAAACAOgAAAAAAAAAAAACAOgAAAAAAAIE6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4OgAAAAAAAHg6AAAAAAAAAAAAAAAA8L8"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAIE6AAAAAAAAgjoAAAAAAAAAAAAAgjoAAAAAAACDOgAAAAAAAAAAAACDOgAAAAAAAIQ6AAAAAAAAAAAAAIQ6AAAAAAAAhToAAAAAAAAAAAAAhToAAAAAAACGOgAAAAAAAAAAAACGOgAAAAAAAIc6AAAAAAAAAAAAAIc6AAAAAAAAiDoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBOgAAAAAAAIE6AAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": " datetime"
					},
					"CQAAAIg6AAAAAAAAiToAAAAAAAAAAAAAiToAAAAAAACKOgAAAAAAAAAAAACKOgAAAAAAAIs6AAAAAAAAAAAAAIs6AAAAAAAAjDoAAAAAAAAAAAAAjDoAAAAAAACNOgAAAAAAAAAAAACNOgAAAAAAAI46AAAAAAAAAAAAAI46AAAAAAAAjzoAAAAAAAAAAAAAjzoAAAAAAACQOgAAAAAAAAAAAACQOgAAAAAAAJE6AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIOgAAAAAAAIg6AAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "now"
					},
					"BAAAALs6AAAAAAAAvDoAAAAAAAAAAAAAvDoAAAAAAAC8OgAAAAAAAAgAAABkYXRldGltZbw6AAAAAAAAvToAAAAAAAAAAAAAvToAAAAAAAC+OgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7OgAAAAAAAMM6AAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EwAAAPs9AAAAAAAA+z0AAAAAAAACAAAAIyDLPQAAAAAAAMs9AAAAAAAAAgAAACMglD0AAAAAAACUPQAAAAAAAAIAAAAjIGA9AAAAAAAAYD0AAAAAAAACAAAAIyA9PQAAAAAAAD09AAAAAAAAAgAAACMgIj0AAAAAAAAiPQAAAAAAAAIAAAAjIPA8AAAAAAAA8DwAAAAAAAACAAAAIyC5PAAAAAAAALk8AAAAAAAAAgAAACMghTwAAAAAAACFPAAAAAAAAAIAAAAjIGA8AAAAAAAAYDwAAAAAAAACAAAAIyAzPAAAAAAAADM8AAAAAAAAAgAAACMg+zsAAAAAAAD7OwAAAAAAAAIAAAAjIMs7AAAAAAAAyzsAAAAAAAACAAAAIyCMOwAAAAAAAIw7AAAAAAAAAgAAACMgfTsAAAAAAAB9OwAAAAAAAAIAAAAjIGI7AAAAAAAAYjsAAAAAAAACAAAAIyA1OwAAAAAAADU7AAAAAAAAAgAAACMg+zoAAAAAAAD7OgAAAAAAAAIAAAAjIMw6AAAAAAAAzDoAAAAAAAACAAAAIyA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANPgAAAAAAAMQ6AAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAIY7AAAAAAAAiDsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfOwAAAAAAAJ87AAAAAAAAAAAAAAAA8L8"
				],
				[
					461,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAIY7AAAAAAAAhjsAAAAAAAACAAAAIyA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4OwAAAAAAALg7AAAAAAAAAAAAAAAA8L8"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGo1AAAAAAAAazUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqNQAAAAAAAGo1AAAAAAAAAAAAAAAA8L8"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGs1AAAAAAAAbDUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrNQAAAAAAAGs1AAAAAAAAAAAAAAAA8L8"
				],
				[
					475,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGw1AAAAAAAAbjUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsNQAAAAAAAGw1AAAAAAAAAAAAAAAA8L8"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": "no"
					},
					"AgAAAG01AAAAAAAAbjUAAAAAAAAAAAAAbjUAAAAAAABvNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtNQAAAAAAAG01AAAAAAAAAAAAAAAA8L8"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": " item"
					},
					"BQAAAG81AAAAAAAAcDUAAAAAAAAAAAAAcDUAAAAAAABxNQAAAAAAAAAAAABxNQAAAAAAAHI1AAAAAAAAAAAAAHI1AAAAAAAAczUAAAAAAAAAAAAAczUAAAAAAAB0NQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABvNQAAAAAAAG81AAAAAAAAAAAAAAAA8L8"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": " must"
					},
					"BQAAAHQ1AAAAAAAAdTUAAAAAAAAAAAAAdTUAAAAAAAB2NQAAAAAAAAAAAAB2NQAAAAAAAHc1AAAAAAAAAAAAAHc1AAAAAAAAeDUAAAAAAAAAAAAAeDUAAAAAAAB5NQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0NQAAAAAAAHQ1AAAAAAAAAAAAAAAA8L8"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHk1AAAAAAAAejUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5NQAAAAAAAHk1AAAAAAAAAAAAAAAA8L8"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "be"
					},
					"AgAAAHo1AAAAAAAAezUAAAAAAAAAAAAAezUAAAAAAAB8NQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6NQAAAAAAAHo1AAAAAAAAAAAAAAAA8L8"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAHw1AAAAAAAAfTUAAAAAAAAAAAAAfTUAAAAAAAB+NQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8NQAAAAAAAHw1AAAAAAAAAAAAAAAA8L8"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " Uniq"
					},
					"BQAAAH41AAAAAAAAfzUAAAAAAAAAAAAAfzUAAAAAAACANQAAAAAAAAAAAACANQAAAAAAAIE1AAAAAAAAAAAAAIE1AAAAAAAAgjUAAAAAAAAAAAAAgjUAAAAAAACDNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+NQAAAAAAAH41AAAAAAAAAAAAAAAA8L8"
				],
				[
					483,
					22,
					"left_delete",
					null,
					"FgAAAII1AAAAAAAAgjUAAAAAAAABAAAAcYE1AAAAAAAAgTUAAAAAAAABAAAAaYA1AAAAAAAAgDUAAAAAAAABAAAAbn81AAAAAAAAfzUAAAAAAAABAAAAVX41AAAAAAAAfjUAAAAAAAABAAAAIH01AAAAAAAAfTUAAAAAAAABAAAAYXw1AAAAAAAAfDUAAAAAAAABAAAAIHs1AAAAAAAAezUAAAAAAAABAAAAZXo1AAAAAAAAejUAAAAAAAABAAAAYnk1AAAAAAAAeTUAAAAAAAABAAAAIHg1AAAAAAAAeDUAAAAAAAABAAAAdHc1AAAAAAAAdzUAAAAAAAABAAAAc3Y1AAAAAAAAdjUAAAAAAAABAAAAdXU1AAAAAAAAdTUAAAAAAAABAAAAbXQ1AAAAAAAAdDUAAAAAAAABAAAAIHM1AAAAAAAAczUAAAAAAAABAAAAbXI1AAAAAAAAcjUAAAAAAAABAAAAZXE1AAAAAAAAcTUAAAAAAAABAAAAdHA1AAAAAAAAcDUAAAAAAAABAAAAaW81AAAAAAAAbzUAAAAAAAABAAAAIG41AAAAAAAAbjUAAAAAAAABAAAAb201AAAAAAAAbTUAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDNQAAAAAAAIM1AAAAAAAAAAAAAAAA8L8"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": "Only"
					},
					"BAAAAG01AAAAAAAAbjUAAAAAAAAAAAAAbjUAAAAAAABvNQAAAAAAAAAAAABvNQAAAAAAAHA1AAAAAAAAAAAAAHA1AAAAAAAAcTUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtNQAAAAAAAG01AAAAAAAAAAAAAAAA8L8"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": " Uniq"
					},
					"BQAAAHE1AAAAAAAAcjUAAAAAAAAAAAAAcjUAAAAAAABzNQAAAAAAAAAAAABzNQAAAAAAAHQ1AAAAAAAAAAAAAHQ1AAAAAAAAdTUAAAAAAAAAAAAAdTUAAAAAAAB2NQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxNQAAAAAAAHE1AAAAAAAAAAAAAAAA8L8"
				],
				[
					495,
					1,
					"paste",
					null,
					"AgAAAHI1AAAAAAAAgDUAAAAAAAAAAAAAgDUAAAAAAACANQAAAAAAAAQAAABVbmlx",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByNQAAAAAAAHY1AAAAAAAAAAAAAAAA8L8"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " kind"
					},
					"BQAAAIA1AAAAAAAAgTUAAAAAAAAAAAAAgTUAAAAAAACCNQAAAAAAAAAAAACCNQAAAAAAAIM1AAAAAAAAAAAAAIM1AAAAAAAAhDUAAAAAAAAAAAAAhDUAAAAAAACFNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACANQAAAAAAAIA1AAAAAAAAAAAAAAAA8L8"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAIU1AAAAAAAAhjUAAAAAAAAAAAAAhjUAAAAAAACHNQAAAAAAAAAAAACHNQAAAAAAAIg1AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFNQAAAAAAAIU1AAAAAAAAAAAAAAAA8L8"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": " supported"
					},
					"CgAAAIg1AAAAAAAAiTUAAAAAAAAAAAAAiTUAAAAAAACKNQAAAAAAAAAAAACKNQAAAAAAAIs1AAAAAAAAAAAAAIs1AAAAAAAAjDUAAAAAAAAAAAAAjDUAAAAAAACNNQAAAAAAAAAAAACNNQAAAAAAAI41AAAAAAAAAAAAAI41AAAAAAAAjzUAAAAAAAAAAAAAjzUAAAAAAACQNQAAAAAAAAAAAACQNQAAAAAAAJE1AAAAAAAAAAAAAJE1AAAAAAAAkjUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACINQAAAAAAAIg1AAAAAAAAAAAAAAAA8L8"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJI1AAAAAAAAkzUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSNQAAAAAAAJI1AAAAAAAAAAAAAAAA8L8"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": " got:"
					},
					"BQAAAJM1AAAAAAAAlDUAAAAAAAAAAAAAlDUAAAAAAACVNQAAAAAAAAAAAACVNQAAAAAAAJY1AAAAAAAAAAAAAJY1AAAAAAAAlzUAAAAAAAAAAAAAlzUAAAAAAACYNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTNQAAAAAAAJM1AAAAAAAAAAAAAAAA8L8"
				],
				[
					505,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJg1AAAAAAAAmjUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYNQAAAAAAAJg1AAAAAAAAAAAAAAAA8L8"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "nde_i"
					},
					"BQAAAJk1AAAAAAAAmjUAAAAAAAAAAAAAmjUAAAAAAACbNQAAAAAAAAAAAACbNQAAAAAAAJw1AAAAAAAAAAAAAJw1AAAAAAAAnTUAAAAAAAAAAAAAnTUAAAAAAACeNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZNQAAAAAAAJk1AAAAAAAAAAAAAAAA8L8"
				],
				[
					507,
					4,
					"left_delete",
					null,
					"BAAAAJ01AAAAAAAAnTUAAAAAAAABAAAAaZw1AAAAAAAAnDUAAAAAAAABAAAAX5s1AAAAAAAAmzUAAAAAAAABAAAAZZo1AAAAAAAAmjUAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeNQAAAAAAAJ41AAAAAAAAAAAAAAAA8L8"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "ode_"
					},
					"BAAAAJo1AAAAAAAAmzUAAAAAAAAAAAAAmzUAAAAAAACcNQAAAAAAAAAAAACcNQAAAAAAAJ01AAAAAAAAAAAAAJ01AAAAAAAAnjUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaNQAAAAAAAJo1AAAAAAAAAAAAAAAA8L8"
				],
				[
					509,
					1,
					"insert_completion",
					{
						"completion": "node_item",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "node_item"
					},
					"AgAAAJk1AAAAAAAAmTUAAAAAAAAFAAAAbm9kZV+ZNQAAAAAAAKI1AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeNQAAAAAAAJ41AAAAAAAAAAAAAAAA8L8"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAGw1AAAAAAAAbTUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsNQAAAAAAAGw1AAAAAAAAAAAAAAAA8L8"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": ".kind"
					},
					"BQAAAKM1AAAAAAAApDUAAAAAAAAAAAAApDUAAAAAAAClNQAAAAAAAAAAAAClNQAAAAAAAKY1AAAAAAAAAAAAAKY1AAAAAAAApzUAAAAAAAAAAAAApzUAAAAAAACoNQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjNQAAAAAAAKM1AAAAAAAAAAAAAAAA8L8"
				],
				[
					521,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKg1AAAAAAAAqjUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoNQAAAAAAAKg1AAAAAAAAAAAAAAAA8L8"
				],
				[
					526,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFY1AAAAAAAAWDUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWNQAAAAAAAFY1AAAAAAAAAAAAAAAA8L8"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAKgYAAAAAAAAqRgAAAAAAAAAAAAAqRgAAAAAAACqGAAAAAAAAAAAAACqGAAAAAAAAKsYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoGAAAAAAAAKgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAKsYAAAAAAAArBgAAAAAAAAAAAAArBgAAAAAAACtGAAAAAAAAAAAAACtGAAAAAAAAK4YAAAAAAAAAAAAAK4YAAAAAAAArxgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrGAAAAAAAAKsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": " None"
					},
					"BQAAAK8YAAAAAAAAsBgAAAAAAAAAAAAAsBgAAAAAAACxGAAAAAAAAAAAAACxGAAAAAAAALIYAAAAAAAAAAAAALIYAAAAAAAAsxgAAAAAAAAAAAAAsxgAAAAAAAC0GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvGAAAAAAAAK8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALQYAAAAAAAAtRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0GAAAAAAAALQYAAAAAAAAAAAAAAAA8L8"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAALUYAAAAAAAAthgAAAAAAAAAAAAAthgAAAAAAAC3GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1GAAAAAAAALUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					545,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALcYAAAAAAAAuRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3GAAAAAAAALcYAAAAAAAAAAAAAAAA8L8"
				],
				[
					546,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALgYAAAAAAAAuhgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4GAAAAAAAALgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "node"
					},
					"BAAAALkYAAAAAAAAuhgAAAAAAAAAAAAAuhgAAAAAAAC7GAAAAAAAAAAAAAC7GAAAAAAAALwYAAAAAAAAAAAAALwYAAAAAAAAvRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5GAAAAAAAALkYAAAAAAAAAAAAAAAA8L8"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": " ite"
					},
					"BAAAAL0YAAAAAAAAvhgAAAAAAAAAAAAAvhgAAAAAAAC/GAAAAAAAAAAAAAC/GAAAAAAAAMAYAAAAAAAAAAAAAMAYAAAAAAAAwRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9GAAAAAAAAL0YAAAAAAAAAAAAAAAA8L8"
				],
				[
					549,
					8,
					"left_delete",
					null,
					"CAAAAMAYAAAAAAAAwBgAAAAAAAABAAAAZb8YAAAAAAAAvxgAAAAAAAABAAAAdL4YAAAAAAAAvhgAAAAAAAABAAAAab0YAAAAAAAAvRgAAAAAAAABAAAAILwYAAAAAAAAvBgAAAAAAAABAAAAZbsYAAAAAAAAuxgAAAAAAAABAAAAZLoYAAAAAAAAuhgAAAAAAAABAAAAb7kYAAAAAAAAuRgAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBGAAAAAAAAMEYAAAAAAAAAAAAAAAA8L8"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "must"
					},
					"BAAAALgYAAAAAAAAuRgAAAAAAAAAAAAAuRgAAAAAAAC6GAAAAAAAAAAAAAC6GAAAAAAAALsYAAAAAAAAAAAAALsYAAAAAAAAvBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4GAAAAAAAALgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALwYAAAAAAAAvRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8GAAAAAAAALwYAAAAAAAAAAAAAAAA8L8"
				],
				[
					553,
					5,
					"left_delete",
					null,
					"BQAAALwYAAAAAAAAvBgAAAAAAAABAAAAILsYAAAAAAAAuxgAAAAAAAABAAAAdLoYAAAAAAAAuhgAAAAAAAABAAAAc7kYAAAAAAAAuRgAAAAAAAABAAAAdbgYAAAAAAAAuBgAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9GAAAAAAAAL0YAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "cant"
					},
					"BAAAALgYAAAAAAAAuRgAAAAAAAAAAAAAuRgAAAAAAAC6GAAAAAAAAAAAAAC6GAAAAAAAALsYAAAAAAAAAAAAALsYAAAAAAAAvBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4GAAAAAAAALgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": " be"
					},
					"AwAAALwYAAAAAAAAvRgAAAAAAAAAAAAAvRgAAAAAAAC+GAAAAAAAAAAAAAC+GAAAAAAAAL8YAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8GAAAAAAAALwYAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": " none"
					},
					"BQAAAL8YAAAAAAAAwBgAAAAAAAAAAAAAwBgAAAAAAADBGAAAAAAAAAAAAADBGAAAAAAAAMIYAAAAAAAAAAAAAMIYAAAAAAAAwxgAAAAAAAAAAAAAwxgAAAAAAADEGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/GAAAAAAAAL8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					4,
					"left_delete",
					null,
					"BAAAAMMYAAAAAAAAwxgAAAAAAAABAAAAZcIYAAAAAAAAwhgAAAAAAAABAAAAbsEYAAAAAAAAwRgAAAAAAAABAAAAb8AYAAAAAAAAwBgAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEGAAAAAAAAMQYAAAAAAAAAAAAAAAA8L8"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "None,"
					},
					"BQAAAMAYAAAAAAAAwRgAAAAAAAAAAAAAwRgAAAAAAADCGAAAAAAAAAAAAADCGAAAAAAAAMMYAAAAAAAAAAAAAMMYAAAAAAAAxBgAAAAAAAAAAAAAxBgAAAAAAADFGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAGAAAAAAAAMAYAAAAAAAAAAAAAAAA8L8"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": " got:"
					},
					"BQAAAMUYAAAAAAAAxhgAAAAAAAAAAAAAxhgAAAAAAADHGAAAAAAAAAAAAADHGAAAAAAAAMgYAAAAAAAAAAAAAMgYAAAAAAAAyRgAAAAAAAAAAAAAyRgAAAAAAADKGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFGAAAAAAAAMUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					560,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoYAAAAAAAAyxgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKGAAAAAAAAMoYAAAAAAAAAAAAAAAA8L8"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "node_"
					},
					"BQAAAMwYAAAAAAAAzRgAAAAAAAAAAAAAzRgAAAAAAADOGAAAAAAAAAAAAADOGAAAAAAAAM8YAAAAAAAAAAAAAM8YAAAAAAAA0BgAAAAAAAAAAAAA0BgAAAAAAADRGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMGAAAAAAAAMwYAAAAAAAAAAAAAAAA8L8"
				],
				[
					563,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "node_item"
					},
					"AgAAAMwYAAAAAAAAzBgAAAAAAAAFAAAAbm9kZV/MGAAAAAAAANUYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRGAAAAAAAANEYAAAAAAAAAAAAAAAA8L8"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANs8AAAAAAAA3DwAAAAAAAAAAAAA3DwAAAAAAADkPAAAAAAAAAAAAADkPAAAAAAAAOg8AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbPAAAAAAAANs8AAAAAAAAAAAAAAAA8L8"
				],
				[
					580,
					1,
					"paste",
					null,
					"AQAAAOg8AAAAAAAADj0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoPAAAAAAAAOg8AAAAAAAAAAAAAAAA8L8"
				],
				[
					585,
					1,
					"reindent",
					null,
					"AQAAAN87AAAAAAAA6zsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfOwAAAAAAAN87AAAAAAAAAAAAAAAA8L8"
				],
				[
					586,
					1,
					"left_delete",
					null,
					"AQAAAOc7AAAAAAAA5zsAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrOwAAAAAAAOs7AAAAAAAAAAAAAAAA8L8"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAOc7AAAAAAAA6DsAAAAAAAAAAAAA6DsAAAAAAADpOwAAAAAAAAAAAADpOwAAAAAAAOo7AAAAAAAAAAAAAOo7AAAAAAAA6zsAAAAAAAAAAAAA6zsAAAAAAADsOwAAAAAAAAAAAADsOwAAAAAAAO07AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnOwAAAAAAAOc7AAAAAAAAAAAAAAAA8L8"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": " trace"
					},
					"BgAAAO07AAAAAAAA7jsAAAAAAAAAAAAA7jsAAAAAAADvOwAAAAAAAAAAAADvOwAAAAAAAPA7AAAAAAAAAAAAAPA7AAAAAAAA8TsAAAAAAAAAAAAA8TsAAAAAAADyOwAAAAAAAAAAAADyOwAAAAAAAPM7AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtOwAAAAAAAO07AAAAAAAAAAAAAAAA8L8"
				],
				[
					590,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "traceback"
					},
					"AgAAAO47AAAAAAAA7jsAAAAAAAAFAAAAdHJhY2XuOwAAAAAAAPc7AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzOwAAAAAAAPM7AAAAAAAAAAAAAAAA8L8"
				],
				[
					593,
					1,
					"cut",
					null,
					"AQAAAOc7AAAAAAAA5zsAAAAAAAAQAAAAaW1wb3J0IHRyYWNlYmFjaw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3OwAAAAAAAOc7AAAAAAAAAAAAAAAA8L8"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAOM8AAAAAAAA5DwAAAAAAAAAAAAA5DwAAAAAAADsPAAAAAAAAAAAAADsPAAAAAAAAPA8AAAAAAAAAAAAAN87AAAAAAAA3zsAAAAAAAAIAAAAICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjPAAAAAAAAOM8AAAAAAAAAAAAAAAA8L8"
				],
				[
					597,
					1,
					"paste",
					null,
					"AQAAAOg8AAAAAAAA+DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoPAAAAAAAAOg8AAAAAAAAAAAAAAAA8L8"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "\\nerro"
					},
					"BgAAAFs9AAAAAAAAXD0AAAAAAAAAAAAAXD0AAAAAAABdPQAAAAAAAAAAAABdPQAAAAAAAF49AAAAAAAAAAAAAF49AAAAAAAAXz0AAAAAAAAAAAAAXz0AAAAAAABgPQAAAAAAAAAAAABgPQAAAAAAAGE9AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbPQAAAAAAAFs9AAAAAAAAAAAAAAAA8L8"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGE9AAAAAAAAYj0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhPQAAAAAAAGE9AAAAAAAAAAAAAAAA8L8"
				],
				[
					602,
					5,
					"left_delete",
					null,
					"BQAAAGE9AAAAAAAAYT0AAAAAAAABAAAAcmA9AAAAAAAAYD0AAAAAAAABAAAAb189AAAAAAAAXz0AAAAAAAABAAAAcl49AAAAAAAAXj0AAAAAAAABAAAAcl09AAAAAAAAXT0AAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiPQAAAAAAAGI9AAAAAAAAAAAAAAAA8L8"
				],
				[
					603,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAF09AAAAAAAAXz0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdPQAAAAAAAF09AAAAAAAAAAAAAAAA8L8"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BQAAAF49AAAAAAAAXz0AAAAAAAAAAAAAXz0AAAAAAABgPQAAAAAAAAAAAABgPQAAAAAAAGE9AAAAAAAAAAAAAGE9AAAAAAAAYj0AAAAAAAAAAAAAYj0AAAAAAABjPQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABePQAAAAAAAF49AAAAAAAAAAAAAAAA8L8"
				],
				[
					608,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":66,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "error_message"
					},
					"AgAAAF49AAAAAAAAXj0AAAAAAAAFAAAAZXJyb3JePQAAAAAAAGs9AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjPQAAAAAAAGM9AAAAAAAAAAAAAAAA8L8"
				],
				[
					614,
					1,
					"paste",
					null,
					"AgAAABo+AAAAAAAAoD4AAAAAAAAAAAAAoD4AAAAAAACgPgAAAAAAACUAAABzZWxmLnByZXZpZXcuc2V0VGV4dChmIkVycm9yXG57ZXJyfSIp",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/PgAAAAAAABo+AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "expreiments/parse_exception_traceback.py",
			"settings":
			{
				"buffer_size": 824,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 281 files for \"format_exception\" (case sensitive)\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\ScriptEditor_OLD.py:\n   39  \n   40  \tdef setTextFromException(self, exception):\n   41: \t\ttraceback_text = \"\".join(traceback.format_exception(exception))\n   42  \t\tself.setText(traceback_text)\n   43  \n\n1 match in 1 file\n\n\nSearching 281 files for \"StandardEdgeItem\" (case sensitive)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\main.py:\n   16  from fields_model import FieldsModel, FieldItem\n   17  from nodes_model import NodesModel, UniqueFunctionItem\n   18: from graph_editor.standard_edges_model import StandardEdgesModel, StandardEdgeItem\n   19  \n   20  from pylive.utils.unique import make_unique_id, make_unique_name\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graph_editor_view.py:\n   54  \n   55  from pylive.VisualCode_v4.graph_editor.standard_graph_delegate import StandardGraphDelegate\n   56: from pylive.VisualCode_v4.graph_editor.standard_edges_model import StandardEdgesModel, StandardEdgeItem\n   57  \n   58  @runtime_checkable\n   ..\n  756                  assert self._edges\n  757                  target_node_index, inlet_name = target_inlet_id\n  758:                 self._edges.appendEdgeItem(StandardEdgeItem(\n  759                      QPersistentModelIndex(source_node_index), \n  760                      QPersistentModelIndex(target_node_index),\n  ...\n  780                  assert self._edges\n  781                  target_node_index, outlet_name = target_outlet_id\n  782:                 self._edges.appendEdgeItem(StandardEdgeItem(\n  783                      QPersistentModelIndex(target_node_index),\n  784                      QPersistentModelIndex(source_node_index), \n  ...\n  808                  self._edges.removeRow(edge_row)\n  809                  # create\n  810:                 self._edges.appendEdgeItem(StandardEdgeItem(\n  811                      source = QPersistentModelIndex(edge_source_node_index),\n  812                      target= QPersistentModelIndex(inlet_at_mouse[0]),\n  ...\n  834                  self._edges.removeRow(edge_row)\n  835                  # create\n  836:                 self._edges.appendEdgeItem(StandardEdgeItem(\n  837                      source = QPersistentModelIndex(outlet_at_mouse[0]),\n  838                      target= QPersistentModelIndex(edge_target_node_index),\n  ...\n  951      nodes = MyNodesModel()\n  952      nodes.setHeaderData(0, Qt.Orientation.Horizontal, \"name\")\n  953:     from pylive.VisualCode_v4.graph_editor.standard_edges_model import StandardEdgeItem, StandardEdgesModel\n  954      edges = StandardEdgesModel(nodes=nodes)\n  955      node_selection = QItemSelectionModel(nodes)\n  ...\n  998              assert source_node_index.isValid()\n  999  \n 1000:             edges.appendEdgeItem(StandardEdgeItem(\n 1001                  source=QPersistentModelIndex(source_node_index),\n 1002                  target=QPersistentModelIndex(target_node_index),\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py:\n   11  \n   12  @dataclass\n   13: class StandardEdgeItem:\n   14      source: QPersistentModelIndex\n   15      target: QPersistentModelIndex\n   ..\n   28  \n   29          self._DAG:nx.MultiDiGraph[T] = nx.MultiDiGraph()\n   30:         self._edges_list:list[StandardEdgeItem] = []\n   31  \n   32      def nodes(self)->QAbstractItemModel|None:\n   ..\n   41          return self._nodes.index(edge_item.target.row(), 0), edge_item.inlet\n   42  \n   43:     def appendEdgeItem(self, edge:StandardEdgeItem):\n   44          assert isinstance(edge.source, (QModelIndex, QPersistentModelIndex)) \n   45          assert isinstance(edge.target, (QModelIndex, QPersistentModelIndex))\n   ..\n  152          return None\n  153  \n  154:     def in_edges(self, target_node_index:QModelIndex|QPersistentModelIndex)->Sequence[StandardEdgeItem]:\n  155          if not target_node_index.isValid() or target_node_index.model() != self._nodes:\n  156              return []\n  157  \n  158:         edge_items:list[StandardEdgeItem] = []\n  159          for u, v, k in self._DAG.in_edges([QPersistentModelIndex(target_node_index)], keys=True):\n  160              edge_item = self._DAG.edges[ (u,v,k) ][\"item\"]\n  161:             assert isinstance(edge_item, StandardEdgeItem), f\"got: {edge_item}\"\n  162              edge_items.append( edge_item )\n  163  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\tests\\test_graph_editor.py:\n   11  \n   12  from pylive.VisualCode_v4.graph_editor.graph_editor_view import GraphEditorView\n   13: from pylive.VisualCode_v4.graph_editor.standard_edges_model import StandardEdgeItem, StandardEdgesModel\n   14  \n   15  class MyNodesModel(QStandardItemModel):\n\n15 matches across 4 files\n\n\nSearching 281 files for \"class StandardEdgeItem\" (case sensitive)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py:\n   11  \n   12  @dataclass\n   13: class StandardEdgeItem:\n   14      source: QPersistentModelIndex\n   15      target: QPersistentModelIndex\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 5016,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"contents": "from re import sub\nfrom typing import *\n\nfrom PySide6.QtCore import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtWidgets import *\n\nfrom dataclasses import dataclass\n\nfrom pylive.utils import group_consecutive_numbers\n\n@dataclass\nclass StandardEdgeItem:\n    source: QPersistentModelIndex\n    target: QPersistentModelIndex\n    outlet: str\n    inlet:str\n    \n\nimport networkx as nx\n\n\nclass StandardEdgesModel(QAbstractItemModel):\n    def __init__(self, nodes:QAbstractItemModel, parent: QObject|None=None) -> None:\n        super().__init__(parent)\n        self._nodes = nodes\n        nodes.rowsRemoved.connect(self._onRelatedModelRowsRemoved)\n\n        self._DAG:nx.MultiDiGraph[T] = nx.MultiDiGraph()\n        self._edges_list:list[StandardEdgeItem] = []\n\n    def nodes(self)->QAbstractItemModel|None:\n        return self._nodes\n\n    def source(self, row:int)->tuple[QModelIndex, str]:\n        edge_item = self.edgeItem(row)\n        return self._nodes.index(edge_item.source.row(), 0), edge_item.outlet\n\n    def target(self, row:int)->tuple[QModelIndex, str]:\n        edge_item = self.edgeItem(row)\n        return self._nodes.index(edge_item.target.row(), 0), edge_item.inlet\n\n    def appendEdgeItem(self, edge:StandardEdgeItem):\n        assert isinstance(edge.source, (QModelIndex, QPersistentModelIndex)) \n        assert isinstance(edge.target, (QModelIndex, QPersistentModelIndex))\n        assert isinstance(edge.outlet, str)\n        assert isinstance(edge.inlet, str)\n        assert edge.source.model() == self._nodes\n        assert edge.target.model() == self._nodes\n\n        assert edge.source.column() == 0\n        assert edge.target.column() == 0\n\n        \"\"\"Inserts rows into the model.\"\"\"\n        if not isinstance(edge.source, (QModelIndex, QPersistentModelIndex)):\n            return False\n\n        if edge.source.model() != self._nodes:\n            return False\n\n        if not isinstance(edge.source, (QModelIndex, QPersistentModelIndex)):\n            return False\n        if edge.target.model() != self._nodes:\n            return False\n\n        parent = QModelIndex()\n        row = self.rowCount()\n        count=1\n        self.beginInsertRows(parent, row, row + count - 1)\n        for _ in range(count):\n            source = QPersistentModelIndex(edge.source)\n            target = QPersistentModelIndex(edge.target)\n            self._edges_list.insert(row, edge)\n            self._DAG.add_edge(edge.source, edge.target, (edge.outlet, edge.inlet), item=edge )\n        self.endInsertRows()\n        return True\n\n    def edgeItem(self, row:int):\n        return self._edges_list[row]\n\n    def removeRows(self, row:int, count:int, parent=QModelIndex()):\n        \"\"\"Removes rows from the model.\"\"\"\n        if row < 0 or row + count > len(self._edges_list):\n            return False\n\n        self.beginRemoveRows(parent, row, row + count - 1)\n        for row in reversed(range(row, row+count)):\n            edge = self._edges_list[row]\n            self._DAG.remove_edge(edge.source, edge.target, (edge.outlet, edge.inlet))\n            del self._edges_list[row]\n        self.endRemoveRows()\n        return True\n\n    def _onRelatedModelRowsRemoved(self, parent:QModelIndex, first:int, last:int):\n        edge_rows_to_remove = []\n        for row, edge in enumerate(self._edges_list):\n            SourceExists = first <= edge.source.row() <= last\n            TargetExists = first <= edge.target.row() <= last\n            if SourceExists or TargetExists:\n                edge_rows_to_remove.append(row)\n\n        edge_row_groups = [_ for _ in group_consecutive_numbers(edge_rows_to_remove)]\n        print(edge_row_groups)\n        for edge_range in edge_row_groups:\n            self.removeRows(edge_range.start, count=edge_range.stop-edge_range.start)\n\n    def rowCount(self, parent=QModelIndex()):\n        \"\"\"Returns the number of rows in the model.\"\"\"\n        return len(self._edges_list)\n        # return len(self._edges)\n\n    def headerData(self, section: int, orientation: Qt.Orientation, role: int = Qt.ItemDataRole.DisplayRole) -> Any:\n        if orientation == Qt.Orientation.Horizontal and role==Qt.ItemDataRole.DisplayRole:\n            return [\"source\", \"outlet\", \"target\", \"inlet\"][section]\n        else:\n            return super().headerData(section, orientation, role)\n\n    def columnCount(self, parent: QModelIndex|QPersistentModelIndex = QModelIndex()) -> int:\n        return 4\n\n    def setData(self, index: QModelIndex|QPersistentModelIndex, value:Any, role: int = Qt.ItemDataRole.DisplayRole) -> Any:\n        raise NotImplementedError(\"edges are immutable and not allow to edit\")\n\n    def data(self, index: QModelIndex|QPersistentModelIndex, role: int = Qt.ItemDataRole.DisplayRole) -> Any:\n        if not index.isValid() or not 0 <= index.row() < len(self._edges_list):\n            return None\n\n        item = self._edges_list[index.row()]\n        from pylive.VisualCode_v4.graph_editor.graph_editor_view import GraphEditorView\n        # if role==Qt.ItemDataRole.DisplayRole or role==Qt.ItemDataRole.EditRole:\n        match index.column():\n            case 0: # source node\n                match role:\n                    case Qt.ItemDataRole.DisplayRole:\n                        return self._nodes.data(item.source, Qt.ItemDataRole.DisplayRole)\n\n            case 1: # source outlet\n                match role:\n                    case Qt.ItemDataRole.DisplayRole:\n                        return f\"{item.outlet}\"\n\n            case 2: # target node\n                match role:\n                    case Qt.ItemDataRole.DisplayRole:\n                        return self._nodes.data(item.target, Qt.ItemDataRole.DisplayRole)\n                \n            case 3: # target inlet\n                match role:\n                    case Qt.ItemDataRole.DisplayRole:\n                        return f\"{item.inlet}\"\n\n        return None\n\n    def in_edges(self, target_node_index:QModelIndex|QPersistentModelIndex)->Sequence[StandardEdgeItem]:\n        if not target_node_index.isValid() or target_node_index.model() != self._nodes:\n            return []\n\n        edge_items:list[StandardEdgeItem] = []\n        for u, v, k in self._DAG.in_edges([QPersistentModelIndex(target_node_index)], keys=True):\n            edge_item = self._DAG.edges[ (u,v,k) ][\"item\"] \n            assert isinstance(edge_item, StandardEdgeItem), f\"got: {edge_item}\"\n            edge_items.append( edge_item )\n\n        return edge_items\n\n    # #deprecate\n    # def source(self, index: QModelIndex|QPersistentModelIndex)->QPersistentModelIndex:\n    #     item = self._edges_list[index.row()]\n    #     return item.source\n\n    # #deprecate\n    # def target(self, index: QModelIndex|QPersistentModelIndex)->QPersistentModelIndex:\n    #     item = self._edges_list[index.row()]\n    #     return item.target\n\n    # #deprecate\n    # def ancestors(self, node_index:QModelIndex, topological=True)->Iterable[QPersistentModelIndex]:\n    #     if not nx.is_directed_acyclic_graph(self._DAG):\n    #         raise ValueError(\"the graph must be a DAG\")\n    #     for n in nx.ancestors(self._DAG, QPersistentModelIndex(node_index)):\n    #         yield n\n\n\n    def topologicalSort(self, nodes:Iterable[QModelIndex])->Sequence[QPersistentModelIndex]:\n        subgraph:nx.MultiDiGraph = self._DAG.subgraph([QPersistentModelIndex(_) for _ in nodes])\n        return [cast(QPersistentModelIndex, _) for _ in nx.topological_sort(subgraph)]\n\n    def flags(self, index):\n        \"\"\"Returns the item flags for the given index.\"\"\"\n        if not index.isValid():\n            return Qt.ItemFlag.NoItemFlags\n\n        flags = Qt.ItemFlag.ItemIsSelectable | Qt.ItemFlag.ItemIsEnabled\n        return flags\n\n    def index(self, row:int, column:int, parent=QModelIndex()):\n        if parent.isValid():\n            return QModelIndex()\n\n        return self.createIndex(row, column)\n\n    def parent(self, index:QModelIndex|QPersistentModelIndex)->QModelIndex:\n        return QModelIndex()  # No parent for this flat model\n\n\n\n",
			"file": "pylive/VisualCode_v4/graph_editor/standard_edges_model.py",
			"file_size": 8167,
			"file_write_time": 133838611639605783,
			"settings":
			{
				"buffer_size": 7962,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKsYAAAAAAAArBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrGAAAAAAAAKsYAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwYAAAAAAAArRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsGAAAAAAAAKwYAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAK0YAAAAAAAArhgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtGAAAAAAAAK0YAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAK4YAAAAAAAAsBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuGAAAAAAAAK4YAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "got:"
					},
					"BAAAAK8YAAAAAAAAsBgAAAAAAAAAAAAAsBgAAAAAAACxGAAAAAAAAAAAAACxGAAAAAAAALIYAAAAAAAAAAAAALIYAAAAAAAAsxgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvGAAAAAAAAK8YAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALMYAAAAAAAAtBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzGAAAAAAAALMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALQYAAAAAAAAthgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0GAAAAAAAALQYAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "edge_"
					},
					"BQAAALUYAAAAAAAAthgAAAAAAAAAAAAAthgAAAAAAAC3GAAAAAAAAAAAAAC3GAAAAAAAALgYAAAAAAAAAAAAALgYAAAAAAAAuRgAAAAAAAAAAAAAuRgAAAAAAAC6GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1GAAAAAAAALUYAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "edge_item"
					},
					"AgAAALUYAAAAAAAAtRgAAAAAAAAFAAAAZWRnZV+1GAAAAAAAAL4YAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6GAAAAAAAALoYAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAOsAAAAAAAAA+wAAAAAAAAAAAAAA+wAAAAAAAAD7AAAAAAAAABAAAABTdGFuZGFyZEVkZ2VJdGVt",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAAAAAAAAAPsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\nassert"
					},
					"CAAAAHAYAAAAAAAAcRgAAAAAAAAAAAAAcRgAAAAAAAB9GAAAAAAAAAAAAAB9GAAAAAAAAH4YAAAAAAAAAAAAAH4YAAAAAAAAfxgAAAAAAAAAAAAAfxgAAAAAAACAGAAAAAAAAAAAAACAGAAAAAAAAIEYAAAAAAAAAAAAAIEYAAAAAAAAghgAAAAAAAAAAAAAghgAAAAAAACDGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwGAAAAAAAAHAYAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " isin"
					},
					"BQAAAIMYAAAAAAAAhBgAAAAAAAAAAAAAhBgAAAAAAACFGAAAAAAAAAAAAACFGAAAAAAAAIYYAAAAAAAAAAAAAIYYAAAAAAAAhxgAAAAAAAAAAAAAhxgAAAAAAACIGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDGAAAAAAAAIMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					15,
					"left_delete",
					null,
					"DwAAAIcYAAAAAAAAhxgAAAAAAAABAAAAboYYAAAAAAAAhhgAAAAAAAABAAAAaYUYAAAAAAAAhRgAAAAAAAABAAAAc4QYAAAAAAAAhBgAAAAAAAABAAAAaYMYAAAAAAAAgxgAAAAAAAABAAAAIIIYAAAAAAAAghgAAAAAAAABAAAAdIEYAAAAAAAAgRgAAAAAAAABAAAAcoAYAAAAAAAAgBgAAAAAAAABAAAAZX8YAAAAAAAAfxgAAAAAAAABAAAAc34YAAAAAAAAfhgAAAAAAAABAAAAc30YAAAAAAAAfRgAAAAAAAABAAAAYXkYAAAAAAAAeRgAAAAAAAAEAAAAICAgIHUYAAAAAAAAdRgAAAAAAAAEAAAAICAgIHEYAAAAAAAAcRgAAAAAAAAEAAAAICAgIHAYAAAAAAAAcBgAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACIGAAAAAAAAIgYAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAYAAAAAAAAcRgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwGAAAAAAAAHAYAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debugg",
				"Debugger: Quit"
			],
			[
				"debugger: st",
				"Debugger: Start (no debug)"
			],
			[
				"deb",
				"Debugger: Open"
			],
			[
				"debu",
				"Debugger: Open"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"debug",
				"Package Control: Disable Debug Mode"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/assets",
		"/C/dev/src/pylive/expreiments",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/utils"
	],
	"file_history":
	[
		"/C/dev/src/pylive/pylive/VisualCode_v4/nodes_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graph_editor_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/test_graph_editor.py",
		"/C/dev/src/pylive/tests/test_bilist.py",
		"/C/dev/src/pylive/pylive/utils/bilist.py",
		"/C/dev/src/pylive/expreiments/qstyle_draw_ptimitive_elements.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_editor_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/widgets/standard_node_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nodes_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/edges_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/main_py_functions.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qt_graph_editor_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qt_graph_editor_scene.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/fields_model.py",
		"/C/dev/src/pylive/pylive/NXPythonGraphEditor/python_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/standard_node_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qt_graph_editor_view.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene.py",
		"/C/dev/src/pylive/pylive.sublime-project",
		"/C/dev/src/pylive/pylive/utils/evaluate_python.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/list_tile_delegate.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.2288.0_x64__qbz5n2kfra8p0/Lib/pathlib.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/reportviews.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tests/website_builder.yaml",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tests/test_edge_model.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_item_view.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/python_graph_model.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/parse_python.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/definitions_model.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/bidict/_base.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tests/test_py_functions_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/py_functions_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tests/test_file_open_save.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/website_builder.yaml",
		"/C/dev/src/pylive/pylive/utils/qtfactory.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/test_scene_description_serialization.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/yaml/parser.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/inspector_widget_component.py",
		"/C/dev/src/pylive/pylive/utils/__init__.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/main_python functions.py",
		"/C/dev/src/pylive/tests/test_py_functions_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tile_widget.py",
		"/C/dev/src/pylive/expreiments/live_graphics_scene.py",
		"/C/dev/src/pylive/pylive/qt_options_dialog.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/multidigraph.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/PySide6/qml/QtQuick/Controls/designer/TextFieldSpecifics.qml",
		"/C/dev/src/pylive/expreiments/PeopleModel.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/document_file_link.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_shapes.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/website_builder.py",
		"/C/dev/src/pylive/pylive/SQLPythonGraphEditor/sql_graph_view.py",
		"/C/dev/src/pylive/pylive/SQLPythonGraphEditor/main.py",
		"/C/dev/src/pylive/pylive/SQLPythonGraphEditor/sql_graph_model.py",
		"/C/dev/src/pylive/tests/test_sql_graph_model.py",
		"/C/dev/src/pylive/expreiments/QSql_table_model_signals.py",
		"/C/dev/src/pylive/pylive/SQLPythonGraphEditor/sql_grph_view.py",
		"/C/dev/src/pylive/pylive/utils/diff.py",
		"/C/dev/src/pylive/expreiments/rx_state_difference/reactivex_and_state_to_change.py",
		"/C/dev/src/pylive/expreiments/reactive/reactive_qt.py",
		"/C/dev/src/reactive-tkinter/main.py",
		"/C/dev/src/pylive/pylive/NXPythonGraphEditor/python_graph_scene_delegate.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/main-network_example.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene_outlet_to_inlet.py",
		"/C/dev/src/pylive/pylive/NXPythonGraphEditor/main.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene_delegate.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_newtwork_subgraph_view.py",
		"/C/dev/src/pylive/expreiments/edifice_youtube_playlist/youtube_main.py",
		"/C/dev/src/pylive/expreiments/edifice_youtube_playlist/youtube_helpers.py",
		"/C/dev/src/music_library_manager/main.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_node_inspector_view.py",
		"/C/dev/src/pylive/pylive/NXPythonGraphEditor/python_data_viewer.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.2288.0_x64__qbz5n2kfra8p0/Lib/contextlib.py",
		"/C/dev/src/pylive/pylive/utils/qt.py",
		"/C/dev/src/pylive/pylive/NXPythonGraphEditor/<class 'networkx.utils.decorators.argmap'> compilation 8",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/algorithms/dag.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/algorithms/traversal/breadth_first_search.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/digraph.py",
		"/C/dev/src/pylive/tests/test_python_graphmodel.py",
		"/C/dev/src/pylive/tests/test_nx_graph_model.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/filters.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/function.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/graph.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_node_inspector_delegate.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_model.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_node_proxy_model.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_standard_network_delegate.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/main-graph_example.py",
		"/C/dev/src/pylive/pylive/OLD QtGraphEditor/mindmap_example.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/examples/livescript OLD.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/PythonGraphEditor/main.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/PythonGraphEditor/python_data_viewer.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/PythonGraphEditor/function_inspector_view.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/PythonGraphEditor/python_graph_model.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/PythonGraphEditor/python_graph_delegate.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/__init__.py",
		"/C/dev/src/pylive/model-view-delegate-pattern-template.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_python_graph_with_exec.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/OLD nx_graph_view.py",
		"/C/dev/src/pylive/pylive/OLD QtGraphEditor/graphview_with_delegate.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_model.py",
		"/C/dev/src/pylive/expreiments/qml/main.qml",
		"/C/dev/src/pylive/expreiments/qml/main.py",
		"/C/dev/src/pylive/expreiments/qml/qml-simple-demo.qml",
		"/C/Users/and/Downloads/Main.qml",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_selection_model.py",
		"/C/dev/src/pylive/pylive/utils/graph.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/algorithms/traversal/depth_first_search.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/function_widget.py",
		"/C/dev/src/pylive/pylive/utils/graph_layout.py",
		"/C/dev/src/pylive/expreiments/QGraphicsColorizeEffect_with_QGraphicsItem_Example.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/tests/nx_netowrk_model.py",
		"/C/Users/and/AppData/Local/Sublime Text/Package Storage/LSP-pyright/20.17.0/language-server/node_modules/pyright/dist/typeshed-fallback/stubs/networkx/networkx/classes/multidigraph.pyi",
		"/C/dev/src/pylive/expreiments/inspect_functions_experiment.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/direct/tkpanels/Inspector.py",
		"/C/dev/src/pylive/expreiments/inspect_available_functions.py",
		"/C/dev/src/pylive/pylive/options_dialog.py",
		"/C/dev/src/pylive/pylive/examples/visual_coding.py",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/dev/src/pylive/script_examples_to_run_live/rounded_link_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_with_exec.py"
	],
	"find":
	{
		"height": 25.3333333333
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"class StandardEdgeItem",
			"StandardEdgeItem",
			"format_exception",
			"self._node_selection",
			"evaluate",
			"CE_PushButton",
			"self._node_gr",
			"layout(",
			"removeItem",
			"addItem",
			"selectionChanged",
			"print",
			"create_new_node",
			"self._edges",
			"subgraph",
			"topologi",
			"ancestors",
			"self.preview.",
			"evaluate(",
			"NodeItem",
			"UniqueFunctionItem",
			"self.preview",
			"self.pre",
			"self.preview",
			"self.functions",
			"input",
			"source",
			"relations",
			"PropertyTabl",
			"edges_sheet_table_view",
			"prin",
			"add edge",
			"node editor created",
			"print",
			"remove",
			"nodes_list_view",
			"PropertyEditor",
			"Property",
			"INSPECTOR",
			"nodein",
			"fromColumn",
			"fromRow",
			"int",
			"insertRows",
			"edges.insert",
			"insertRows",
			"_edges",
			"range",
			"print",
			"moveAtt",
			"definitions_model",
			"serialize",
			"filelink",
			"self.watcher",
			"parentWi",
			"watcher",
			"self.filepath",
			"document_viewer",
			"init_definitions",
			"document",
			"QGraphEditorScene",
			"changed",
			"commit",
			"):\n",
			"signal",
			"EMPTY",
			"print",
			"logging",
			"print",
			"selection_model",
			"nodeAttributesAb",
			"push",
			"blockSignals",
			"block",
			"updateAttr",
			"updateAttri",
			"_selectionModel",
			"StandardNodeItem",
			"prop",
			"_Node",
			"PythonGraphDelegate",
			"Q.",
			"addFunction",
			"nodesPropertiesChanged",
			"nodesChanged",
			"nodesPropertiesChanged",
			"onNodesCreated",
			"_property_editors",
			"_node_graphics_objects",
			"delegate",
			"fn",
			"getFunction",
			"selectedNodes()[0]",
			"selectedNodes[0]",
			"onNodesProperiesChanged",
			"PythonGraphDelegate",
			"None",
			"setNodePropertyEditor",
			"createPropertyEditor",
			"):\n",
			"setNodeProp",
			"createPropert",
			"NXNetworkModel",
			"createProp",
			"isin",
			"nodesPropertiesChanged.connect",
			"class Change",
			"nodesPropertiesChanged",
			"nodePropertiesChanged",
			"class Change",
			"Change",
			"selectionmodel",
			"options",
			"createNode",
			"creatNode",
			"AbstractS",
			"makeArrow",
			"Rounded",
			"LinkId",
			"_inletEditorAt",
			"selectionmodel",
			"selectionodel",
			"QSplitter",
			"ConnectionEnterType",
			"grabM",
			"NXGraphScene",
			"move(",
			"_target_graphics_objects"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nodesChanged",
			"EdgeId",
			"LinkEvent",
			"VertexWidget",
			"LinkWidget",
			"ConnectionEvent",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pylive/VisualCode_v4/main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17520,
						"regions":
						{
						},
						"selection":
						[
							[
								15447,
								15447
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v4/main.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5032.66666667,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "expreiments/parse_exception_traceback.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 824,
						"regions":
						{
						},
						"selection":
						[
							[
								824,
								824
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/parse_exception_traceback.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5016,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										242,
										258
									],
									[
										637,
										653
									],
									[
										1010,
										1026
									],
									[
										1230,
										1246
									],
									[
										1558,
										1574
									],
									[
										1858,
										1874
									],
									[
										2179,
										2195
									],
									[
										2545,
										2561
									],
									[
										2796,
										2812
									],
									[
										3075,
										3091
									],
									[
										3290,
										3306
									],
									[
										3513,
										3529
									],
									[
										3835,
										3851
									],
									[
										4017,
										4033
									],
									[
										4259,
										4275
									],
									[
										4593,
										4609
									],
									[
										4891,
										4913
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								4714,
								4714
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"line_numbers": false,
							"lsp_uri": "buffer:200",
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1760.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pylive/VisualCode_v4/graph_editor/standard_edges_model.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7962,
						"regions":
						{
						},
						"selection":
						[
							[
								6258,
								6258
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v4/graph_editor/standard_edges_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1947.33333333,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.3333333333
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.50758391031,
			0.901432068544,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 343.0
	},
	"output.Debugger Console":
	{
		"height": 240.0
	},
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 261.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 46.6666666667
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"standard",
				"pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py"
			],
			[
				"standardNode",
				"pylive\\QtGraphEditor\\widgets\\standard_node_widget.py"
			],
			[
				"nodesD",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"node",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"standardN",
				"pylive\\QtGraphEditor\\standard_node_item.py"
			],
			[
				"edgesM",
				"pylive\\QtGraphEditor\\edges_model.py"
			],
			[
				"script",
				"pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"fields om",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"execute",
				"pylive\\utils\\execute_function.py"
			],
			[
				"definition",
				"pylive\\QtGraphEditor\\definitions_model.py"
			],
			[
				"py func",
				"pylive\\QtGraphEditor\\py_functions_model.py"
			],
			[
				"qtf",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"qtfa",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"main py",
				"pylive\\QtGraphEditor\\main_py_functions.py"
			],
			[
				"py function",
				"pylive\\QtGraphEditor\\py_functions_model.py"
			],
			[
				"test py",
				"tests\\test_py_functions_model.py"
			],
			[
				"fieldsmode",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"nodesmodel",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"fields mode",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"fields mo",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"fieldsmo",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"graph scene",
				"expreiments\\live_graphics_scene.py"
			],
			[
				"nodesmo",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"qtfac",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"nodes mode",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"definit",
				"pylive\\QtGraphEditor\\definitions_model.py"
			],
			[
				"fields",
				".venv\\Lib\\site-packages\\PySide6\\qml\\QtQuick\\Controls\\designer\\TextFieldSpecifics.qml"
			],
			[
				"main pyth",
				"pylive\\QtGraphEditor\\main_python functions.py"
			],
			[
				"document",
				"pylive\\QtLiveApp\\document_file_link.py"
			],
			[
				"nx python gr",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"nxgrap",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraph",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"python ",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"data view",
				"pylive\\NXPythonGraphEditor\\python_data_viewer.py"
			],
			[
				"python gr",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"nx node ins",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_view.py"
			],
			[
				"nx graph",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx graph model",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx node inspector dele",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_delegate.py"
			],
			[
				"inspector",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_view.py"
			],
			[
				"nx netw",
				"pylive\\NetworkXGraphEditor\\nx_network_model.py"
			],
			[
				"nx grap",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx network",
				"pylive\\NetworkXGraphEditor\\nx_network_model.py"
			],
			[
				"nx graph mod",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"graph model",
				"pylive\\examples\\python_function_graph\\graph_model.py"
			],
			[
				"nx",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx graph mode",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraph se",
				"pylive\\NetworkXGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"test n",
				"tests\\test_nx_graph_model.py"
			],
			[
				"nx ",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraphm",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgr",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"shapes",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx network sce",
				"pylive\\NetworkXGraphEditor\\nx_network_scene_outlet-to-inlet.py"
			],
			[
				"geo",
				"pylive\\utils\\geo.py"
			],
			[
				"shape",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx net",
				"pylive\\NetworkXGraphEditor\\nx_network_scene.py"
			],
			[
				"round",
				"script_examples_to_run_live\\rounded_link_item.py"
			],
			[
				"nx graph s",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx graph mo",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"icons",
				"expreiments\\display_builtin_icons.py"
			],
			[
				"nxselection",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"nx graph graphics",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nx graph grap",
				"pylive\\QtGraphEditor\\nx_graph_view.py"
			],
			[
				"nx gr",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene_with_ports.py"
			],
			[
				"arrowi",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\qgraphics_arrow_item.py"
			],
			[
				"link",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\link_graphics_items.py"
			],
			[
				"DagSc",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"dag graphics ",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"main",
				"pylive\\examples\\python_function_graph\\main.py"
			],
			[
				"nxgraphmo",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"graphmodel",
				"pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py"
			],
			[
				"graphview",
				"pylive\\pylive\\QtGraphEditor\\graphview_databased.py"
			],
			[
				"build-a",
				"pylive\\expreiments\\built-a-dependency-graph-of-a-python-codebase.py"
			],
			[
				"conne",
				"pylive\\expreiments\\connect_to_ipython.py"
			],
			[
				"number",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"lint",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"script_",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"scriptedit",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"live_framewo",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"link file",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "setSelec",
		"selected_items":
		[
			[
				"setSelec",
				"setSelectionModel"
			],
			[
				"setSource",
				"setSourceOutlet"
			],
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
