{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Props",
				"PropsDiff"
			],
			[
				"Py",
				"PySide6"
			],
			[
				"dt",
				"dtype"
			],
			[
				"uin",
				"uint8"
			],
			[
				"cu",
				"currentIndex"
			],
			[
				"_sele",
				"_node_selection_model"
			],
			[
				"mode",
				"_model"
			],
			[
				"add",
				"addWidget"
			],
			[
				"QAbstractItem",
				"QAbstractItemModel"
			],
			[
				"Inspe",
				"InspectorView"
			],
			[
				"node_",
				"node_key"
			],
			[
				"setS",
				"setSourceModel"
			],
			[
				"pro",
				"proxy_model"
			],
			[
				"Item",
				"ItemDataRole"
			],
			[
				"isf",
				"isfunction"
			],
			[
				"Function",
				"FunctionsModel"
			],
			[
				"QStand",
				"QStandardItemModel"
			],
			[
				"mod",
				"module"
			],
			[
				"Modu",
				"ModuleType"
			],
			[
				"QStandardItem",
				"QStandardItemModel"
			],
			[
				"setP",
				"setPath"
			],
			[
				"setC",
				"setCurrentWidget"
			],
			[
				"sta",
				"stacked_widget"
			],
			[
				"si",
				"siblingAtColumn"
			],
			[
				"selec",
				"node_selection_model"
			],
			[
				"QMapp",
				"QDataWidgetMapper"
			],
			[
				"E",
				"ElideNone"
			],
			[
				"Eli",
				"ElideLeft"
			],
			[
				"ope",
				"getOpenFileName"
			],
			[
				"QfileD",
				"QFileDialog"
			],
			[
				"QFileD",
				"QFileDialog"
			],
			[
				"par",
				"parentWidget"
			],
			[
				"trigg",
				"setEditTriggers"
			],
			[
				"value",
				"'value-path'"
			],
			[
				"val",
				"'value-int'"
			],
			[
				"named",
				"named_args="
			],
			[
				"cac",
				"_result_cache"
			],
			[
				"ca",
				"_result_cache"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"pathl",
				"pathlib"
			],
			[
				"QDouble",
				"QDoubleSpinBox"
			],
			[
				"crate",
				"createEditor"
			],
			[
				"Ed",
				"EditRole"
			],
			[
				"chil",
				"children"
			],
			[
				"path",
				"pathChanged"
			],
			[
				"place",
				"placeholder"
			],
			[
				"curren",
				"currentIndexChanged"
			],
			[
				"current",
				"currentText"
			],
			[
				"Call",
				"Callable"
			],
			[
				"currentIn",
				"currentIndexChanged"
			],
			[
				"insert",
				"insertItems"
			],
			[
				"kind",
				"kind_editor_map"
			],
			[
				"setCur",
				"setCurrentText"
			],
			[
				"setCurrent",
				"setCurrentText"
			],
			[
				"_",
				"_createContentEditor"
			],
			[
				"copile",
				"compile_to_state"
			],
			[
				"use",
				"use_effect"
			],
			[
				"crea",
				"_createContentEditor"
			],
			[
				"setPa",
				"setPath"
			],
			[
				"v",
				"value"
			],
			[
				"dele",
				"deleteLater"
			],
			[
				"setModel",
				"_setModelData"
			],
			[
				"value-",
				"value-str"
			],
			[
				"main",
				"main_layout"
			],
			[
				"in",
				"inspector"
			],
			[
				"label",
				"label_text"
			],
			[
				"pyl",
				"pylive"
			],
			[
				"Vi",
				"VisualCode_v6"
			],
			[
				"inl",
				"inlet_key"
			],
			[
				"inlet",
				"inletsReset"
			],
			[
				"curr",
				"_current"
			],
			[
				"rev",
				"reverse"
			],
			[
				"QForm",
				"QFormLayout"
			],
			[
				"link",
				"linkNodes"
			],
			[
				"set",
				"setImports"
			],
			[
				"unp",
				"unpack_comp"
			],
			[
				"close",
				"closeEvent"
			],
			[
				"QItemS",
				"QItemSelectionModel"
			],
			[
				"PyPr",
				"PyProxyNodeModel"
			],
			[
				"node",
				"node_proxy_model"
			],
			[
				"PyNode",
				"PyProxyNodeModel"
			],
			[
				"setM",
				"setModel"
			],
			[
				"setEd",
				"_setEditorData"
			],
			[
				"inspector",
				"InspectorWidget"
			],
			[
				"data",
				"dataChanged"
			],
			[
				"_setu",
				"_setupPreivew"
			],
			[
				"_s",
				"_setupInspector"
			],
			[
				"set_node_",
				"set_node_preview"
			],
			[
				"selection",
				"selectionChanged"
			],
			[
				"setB",
				"setBrush"
			],
			[
				"Var",
				"VAR_POSITIONAL"
			],
			[
				"file",
				"filepath"
			],
			[
				"previ",
				"_previous_parent"
			],
			[
				"QSCroll",
				"QScrollArea"
			],
			[
				"preview",
				"preview_panel"
			],
			[
				"pre",
				"preview_label"
			],
			[
				"setnode",
				"set_node_model"
			],
			[
				"edito",
				"editor"
			],
			[
				"remove",
				"removeWidget"
			],
			[
				"co",
				"count"
			],
			[
				"PyPro",
				"PyProxyNodeModel"
			],
			[
				"sele",
				"selectedItems"
			],
			[
				"impor",
				"importsReset"
			],
			[
				"module",
				"module_watcher_connections"
			],
			[
				"mo",
				"module_watcher"
			],
			[
				"is",
				"is_dir"
			],
			[
				"QListW",
				"QListWidgetItem"
			],
			[
				"inser",
				"insertItem"
			],
			[
				"_mo",
				"_model"
			],
			[
				"import",
				"imports_list"
			],
			[
				"impo",
				"imports_panel"
			],
			[
				"module_",
				"module_enabled"
			],
			[
				"endRe",
				"endResetModel"
			],
			[
				"beginR",
				"beginResetModel"
			],
			[
				"modu",
				"_modules_model"
			],
			[
				"ItemIs",
				"ItemIsEditable"
			],
			[
				"hover",
				"hoverEnterEvent"
			],
			[
				"Visu",
				"VisualCode_v6"
			],
			[
				"M",
				"Minimum"
			],
			[
				"setSize",
				"setSizePolicy"
			],
			[
				"QScro",
				"QScrollArea"
			],
			[
				"QScroll",
				"QScrollArea"
			],
			[
				"setPl",
				"setPlainText"
			],
			[
				"con",
				"contextScript"
			],
			[
				"QSize",
				"QSizePolicy"
			],
			[
				"setSi",
				"setSizePolicy"
			],
			[
				"inspe",
				"inspector_panel"
			],
			[
				"disa",
				"setDisabled"
			]
		]
	},
	"buffers":
	[
		{
			"file": "expreiments/ColorGrade_with_Edifice/main.py",
			"settings":
			{
				"buffer_size": 7364,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAAJEGAAAAAAAAkQYAAAAAAAAUAAAAICAgICAgICByZXR1cm4gRmFsc2WQBgAAAAAAAJAGAAAAAAAAAQAAAAo",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClBgAAAAAAAJEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAL8GAAAAAAAAvwYAAAAAAABNAAAACiAgICAgICAgcmV0dXJuIG5wLmFycmF5X2VxdWFsKHNlbGYubnBfYXJyYXksIG90aGVyLm5wX2FycmF5LCBlcXVhbF9uYW49VHJ1ZSk",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMBwAAAAAAAL8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"cut",
					null,
					"AQAAAFcBAAAAAAAAVwEAAAAAAACKAQAAZGVmIHRpbWVpdChmdW5jKToKICAgIEB3cmFwcyhmdW5jKQogICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBzdGFydF90aW1lID0gdGltZS5wZXJmX2NvdW50ZXIoKSAgIyBtb3JlIHByZWNpc2UgdGhhbiB0aW1lLnRpbWUoKQogICAgICAgIHJlc3VsdCA9IGZ1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgIGVuZF90aW1lID0gdGltZS5wZXJmX2NvdW50ZXIoKQogICAgICAgIGV4ZWN1dGlvbl90aW1lID0gZW5kX3RpbWUgLSBzdGFydF90aW1lCiAgICAgICAgcHJpbnQoZiJGdW5jdGlvbiAne2Z1bmMuX19uYW1lX199JyBleGVjdXRlZCBpbiB7ZXhlY3V0aW9uX3RpbWU6LjRmfSBzZWNvbmRzIikKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICByZXR1cm4gd3JhcHBlcg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAgAAAAAAAFcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADYFAAAAAAAANwUAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2BQAAAAAAADYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"cut",
					null,
					"AQAAADcFAAAAAAAANwUAAAAAAABrAwAACmNsYXNzIEZpbGVJbnB1dChDdXN0b21XaWRnZXRbUVB1c2hCdXR0b25dKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXRoPSIiLCBvbl9jaGFuZ2U9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgc2VsZi5fcmVnaXN0ZXJfcHJvcHMoCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogcGF0aCwKICAgICAgICAgICAgICAgICJvbl9jaGFuZ2UiOiBvbl9jaGFuZ2UsCiAgICAgICAgICAgIH0KICAgICAgICApCgogICAgZGVmIGNyZWF0ZV93aWRnZXQoc2VsZik6CiAgICAgICAgYnV0dG9uID0gUVB1c2hCdXR0b24oIlNlbGVjdCBGaWxlLi4uIikKICAgICAgICBkZWYgb25fY2xpY2soKToKICAgICAgICAgICAgZmlsZV9wYXRoLCBfID0gUUZpbGVEaWFsb2cuZ2V0T3BlbkZpbGVOYW1lKGJ1dHRvbiwgIlNlbGVjdCBhIGZpbGUiLCBzZWxmLnByb3BzWyJwYXRoIl0pCiAgICAgICAgICAgIGlmIGZpbGVfcGF0aCBhbmQgc2VsZi5wcm9wc1sib25fY2hhbmdlIl06CiAgICAgICAgICAgICAgICBzZWxmLnByb3BzWyJvbl9jaGFuZ2UiXShmaWxlX3BhdGgpCiAgICAgICAgYnV0dG9uLnByZXNzZWQuY29ubmVjdChvbl9jbGljaykKICAgICAgICByZXR1cm4gYnV0dG9uCgogICAgZGVmIHVwZGF0ZShzZWxmLCB3aWRnZXQ6IFFQdXNoQnV0dG9uLCBkaWZmX3Byb3BzOiBQcm9wc0RpZmYpOgogICAgICAgICMgVGhpcyBmdW5jdGlvbiBzaG91bGQgdXBkYXRlIHRoZSB3aWRnZXQKICAgICAgICBtYXRjaCBkaWZmX3Byb3BzLmdldCgicGF0aCIpOgogICAgICAgICAgICBjYXNlIF9wcm9wb2xkLCBwcm9wbmV3OgogICAgICAgICAgICAgICAgd2lkZ2V0LnNldFRleHQocHJvcG5ldyk",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3BQAAAAAAAKIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAAEAOAAAAAAAAQA4AAAAAAAABAAAACg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBDgAAAAAAAEEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"cut",
					null,
					"AQAAABwSAAAAAAAAHBIAAAAAAAB8BQAACmNsYXNzIE51bXB5SW1hZ2VWaWV3ZXIoQ3VzdG9tV2lkZ2V0W1BhbkFuZFpvb21HcmFwaGljc1ZpZXddKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzcmM6TXlOdW1weUFycmF5LCAqKmt3YXJncyk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygqKmt3YXJncykKICAgICAgICBzZWxmLl9yZWdpc3Rlcl9wcm9wcygKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNyYyI6IHNyYywKICAgICAgICAgICAgfQogICAgICAgICkKCiAgICBkZWYgY3JlYXRlX3dpZGdldChzZWxmKToKICAgICAgICB2aWV3ID0gUGFuQW5kWm9vbUdyYXBoaWNzVmlldygpCiAgICAgICAgdmlldy5zZXRWaWV3cG9ydChRT3BlbkdMV2lkZ2V0KCkgKQogICAgICAgIHNjZW5lID0gUUdyYXBoaWNzU2NlbmUoKQogICAgICAgIHBpeG1hcF9pdGVtID0gUUdyYXBoaWNzUGl4bWFwSXRlbSgpCiAgICAgICAgc2NlbmUuYWRkSXRlbShwaXhtYXBfaXRlbSkKICAgICAgICB2aWV3LnNldFNjZW5lKHNjZW5lKQogICAgICAgIHNlbGYucGl4bWFwX2l0ZW0gPSBwaXhtYXBfaXRlbQogICAgICAgIHBpeG1hcCA9IFFQaXhtYXAuZnJvbUltYWdlKHFpbWFnZTJuZGFycmF5LmFycmF5MnFpbWFnZShzZWxmLnByb3BzWyJzcmMiXS5ucF9hcnJheSkpCiAgICAgICAgc2VsZi5waXhtYXBfaXRlbS5zZXRQaXhtYXAocGl4bWFwKQogICAgICAgIHZpZXcuc2V0UmVuZGVySGludChRUGFpbnRlci5SZW5kZXJIaW50LkFudGlhbGlhc2luZykKCiAgICAgICAgIyBzY2VuZS5hZGRQaXhtYXAoKQogICAgICAgIHZpZXcuc2V0U2NlbmUoc2NlbmUpCgogICAgICAgIHJldHVybiB2aWV3CgogICAgZGVmIHVwZGF0ZShzZWxmLCB3aWRnZXQ6IFBhbkFuZFpvb21HcmFwaGljc1ZpZXcsIGRpZmZfcHJvcHM6IFByb3BzRGlmZik6CiAgICAgICAgbWF0Y2ggZGlmZl9wcm9wcy5nZXQoInNyYyIpOgogICAgICAgICAgICBjYXNlIF8sIG5ld19pbWFnZToKICAgICAgICAgICAgICAgIGltZyA9IG5ld19pbWFnZS5ucF9hcnJheQogICAgICAgICAgICAgICAgcWltZyA9IG51bXB5X3RvX3FpbWFnZShpbWcpCiAgICAgICAgICAgICAgICBwaXhtYXAgPSBRUGl4bWFwLmZyb21JbWFnZShxaW1nKQogICAgICAgICAgICAgICAgaWYgbm90IHBpeG1hcC5pc051bGwoKToKICAgICAgICAgICAgICAgICAgICBzZWxmLnBpeG1hcF9pdGVtLnNldFBpeG1hcChwaXhtYXApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJUT0RPOiBGYWlsZWQgdG8gY29udmVydCBudW1weSBhcnJheSB0byBRSW1hZ2UiKSAjVE9ETzogSGFuZGxlIHRoaXMgY2FzZSBwcm9wZXJseQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiU2hhcGU6IHtpbWcuc2hhcGV9LCBEdHlwZToge2ltZy5kdHlwZX0iKQogICAgICAgICAgICAgICAg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcEgAAAAAAAJgXAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					1,
					"cut",
					null,
					"AQAAAOMGAAAAAAAA4wYAAAAAAADTBAAAY2xhc3MgT3BlbkdMVGV4dHVyZUl0ZW0oUUdyYXBoaWNzSXRlbSk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdGV4dHVyZV9pZCwgdGV4dHVyZV9zaXplKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLl90ZXh0dXJlX2lkID0gdGV4dHVyZV9pZAogICAgICAgIHNlbGYuX3RleHR1cmVfc2l6ZSA9IHRleHR1cmVfc2l6ZQoKICAgIGRlZiBib3VuZGluZ1JlY3Qoc2VsZikgLT4gUVJlY3RGOgogICAgICAgIHJldHVybiBRUmVjdEYoMCwgMCwgc2VsZi5fdGV4dHVyZV9zaXplLndpZHRoKCksIHNlbGYuX3RleHR1cmVfc2l6ZS5oZWlnaHQoKSkKICAgIAogICAgZGVmIHNldFRleHR1cmUoc2VsZiwgdGV4dHVyZV9pZDogaW50LCB0ZXh0dXJlX3NpemU6IFFTaXplKToKICAgICAgICAiIiJTZXQgdGhlIE9wZW5HTCB0ZXh0dXJlIElEIGFuZCBzaXplLiIiIgogICAgICAgIHNlbGYuX3RleHR1cmVfaWQgPSB0ZXh0dXJlX2lkCiAgICAgICAgc2VsZi5fdGV4dHVyZV9zaXplID0gdGV4dHVyZV9zaXplCiAgICAgICAgc2VsZi51cGRhdGUoKQoKICAgIGRlZiBwYWludChzZWxmLCBwYWludGVyOiBRUGFpbnRlciwgb3B0aW9uLCB3aWRnZXQ9Tm9uZSk6CiAgICAgICAgaWYgbm90IFFPcGVuR0xDb250ZXh0LmN1cnJlbnRDb250ZXh0KCk6CiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBwYWludGVyLmJlZ2luTmF0aXZlUGFpbnRpbmcoKQoKICAgICAgICBnbEVuYWJsZShHTF9URVhUVVJFXzJEKQogICAgICAgIGdsQmluZFRleHR1cmUoR0xfVEVYVFVSRV8yRCwgc2VsZi5fdGV4dHVyZV9pZCkKCiAgICAgICAgZ2xCZWdpbihHTF9RVUFEUykKICAgICAgICBnbFRleENvb3JkMmYoMCwgMSk7IGdsVmVydGV4MmYoMCwgMCkKICAgICAgICBnbFRleENvb3JkMmYoMSwgMSk7IGdsVmVydGV4MmYoc2VsZi5fdGV4dHVyZV9zaXplLndpZHRoKCksIDApCiAgICAgICAgZ2xUZXhDb29yZDJmKDEsIDApOyBnbFZlcnRleDJmKHNlbGYuX3RleHR1cmVfc2l6ZS53aWR0aCgpLCBzZWxmLl90ZXh0dXJlX3NpemUuaGVpZ2h0KCkpCiAgICAgICAgZ2xUZXhDb29yZDJmKDAsIDApOyBnbFZlcnRleDJmKDAsIHNlbGYuX3RleHR1cmVfc2l6ZS5oZWlnaHQoKSkKICAgICAgICBnbEVuZCgpCgogICAgICAgIGdsQmluZFRleHR1cmUoR0xfVEVYVFVSRV8yRCwgMCkKICAgICAgICBnbERpc2FibGUoR0xfVEVYVFVSRV8yRCkKCiAgICAgICAgcGFpbnRlci5lbmROYXRpdmVQYWludGluZygpCgo",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2CwAAAAAAAOMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"cut",
					null,
					"AQAAABsGAAAAAAAAGwYAAAAAAADGAAAAZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCBRUGFpbnRlciwgUUltYWdlCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0IFFSZWN0RiwgUVNpemUKZnJvbSBQeVNpZGU2LlF0T3BlbkdMV2lkZ2V0cyBpbXBvcnQgUU9wZW5HTFdpZGdldApmcm9tIE9wZW5HTC5HTCBpbXBvcnQgKgpmcm9tIFB5U2lkZTYuUXRHdWkgaW1wb3J0IFFPcGVuR0xDb250ZXh0",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhBgAAAAAAABsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAIMMAAAAAAAAgwwAAAAAAAABAAAACg",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEDAAAAAAAAIQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"cut",
					null,
					"AQAAAIUMAAAAAAAAhQwAAAAAAAAfAAAAZnJvbSBzcGxpdHZpZXcgaW1wb3J0IFNwbGl0Vmlldw",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkDAAAAAAAAIUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAAJkFAAAAAAAAuAUAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBQAAAAAAAJkFAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"cut",
					null,
					"AQAAADkFAAAAAAAAOQUAAAAAAABfAAAAZnJvbSBweWxpdmUucXRfY29tcG9uZW50cy5wYW5fYW5kX3pvb21fZ3JhcGhpY3N2aWV3X25vdF9vcHRpbWl6ZWQgaW1wb3J0IFBhbkFuZFpvb21HcmFwaGljc1ZpZXc",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYBQAAAAAAADkFAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 354 files for \"QItemSelection\"\n\nC:\\dev\\src\\pylive\\expreiments\\live_coding\\livecoding_with_qtgui\\QtExpressionChain.py:\n   10  \t\tself.chainmodel = QStandardItemModel()\n   11  \t\tself.chainmodel.setHorizontalHeaderLabels([\"name\", \"expression\", \"result\"])\n   12: \t\tself.selectionmodel = QItemSelectionModel(self.chainmodel)\n   13  \n   14  \t\tself.chainview = QTableView()\n\nC:\\dev\\src\\pylive\\pylive\\examples\\livegraph.py:\n   21  \t\t# setup model\n   22  \t\tself.scriptgraph = GraphModel()\n   23: \t\tself.node_selection = QItemSelectionModel(self.scriptgraph.nodes)\n   24  \t\tself.node_selection.currentRowChanged.connect(\n   25  \t\t\tlambda current, previous: self.on_current_changed(NodeIndex(current), NodeIndex(previous))\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_SQL\\UI\\main.py:\n   71  \n   72          self.model = SQLGraphModel()\n   73:         self.graph_selection = QItemSelectionModel(self.model.graphs)\n   74:         self.node_selection = QItemSelectionModel(self.model.nodes)\n   75:         self.edge_selection = QItemSelectionModel(self.model.edges)\n   76          \n   77          ### Views\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\detailsview_columnbased.py:\n  157  \t\tself.setCurrentModelIndex(None)\n  158  \n  159: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  160  \t\tself.nodes_selectionmodel = nodes_selectionmodel\n  161  \t\tself.nodes_selectionmodel.currentRowChanged.connect(self.setCurrentModelIndex)\n  ...\n  191  \t\t\t# Initialize the GraphModel\n  192  \t\t\tself.graph_model = GraphModel()\n  193: \t\t\tself.nodes_selectionmodel = QItemSelectionModel(self.graph_model._nodeTable)\n  194  \n  195  \t\t\t# Add some example nodes and edges\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\detailsview_rolebased.py:\n   50  \t\tself.mapper.addMapping(self.posy_edit, 3)\n   51  \n   52: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n   53  \t\tif nodes_selectionmodel.model() !=self.graph.nodeList:\n   54  \t\t\traise ValueError(\"selection model is not the graph nodes list\")\n   ..\n   90  \t\t\t# Initialize the GraphModel\n   91  \t\t\tself.graph_model = GraphModel()\n   92: \t\t\tself.nodes_selectionmodel = QItemSelectionModel(self.graph_model.nodeList)\n   93  \n   94  \t\t\t# Add some example nodes and edges\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphview_columnbased.py:\n  477  \n  478  \t\t# \tif self.nodes_selectionmodel:\n  479: \t\t# \t\titem_selection = QItemSelection()\n  480  \t\t# \t\tfor node in node_selection:\n  481: \t\t# \t\t\titem_selection.merge(QItemSelection(node, node), QItemSelectionModel.SelectionFlag.Select)\n  482: \t\t# \t\tself.nodes_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  483  \n  484  \t\t# \t\tif node_selection:\n  485: \t\t# \t\t\tself.nodes_selectionmodel.setCurrentIndex(node_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  486  \t\t# \t\telse:\n  487: \t\t# \t\t\tself.nodes_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  488  \n  489  \t\t# \tif self.edges_selectionmodel:\n  490: \t\t# \t\titem_selection = QItemSelection()\n  491  \t\t# \t\tfor edge in edge_selection:\n  492: \t\t# \t\t\titem_selection.merge(QItemSelection(edge, edge), QItemSelectionModel.SelectionFlag.Select)\n  493: \t\t# \t\tself.edges_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  494  \n  495  \t\t# \t\tif edge_selection:\n  496: \t\t# \t\t\tself.edges_selectionmodel.setCurrentIndex(edge_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  497  \t\t# \t\telse:\n  498: \t\t# \t\t\tself.edges_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  499  \n  500  \tdef pinAt(self, pos:QPoint):\n  ...\n  872  \t\t\t\t\t\t\tinlet_item.label.setText(new_name)\n  873  \n  874: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  875  \t\tself.nodes_selectionmodel = nodes_selectionmodel\n  876  \t\tself.nodes_selectionmodel.selectionChanged.connect(self.handleNodesSelectionChanged)\n  877  \n  878: \tdef setEdgesSelectionModel(self, edges_selectionmodel:QItemSelectionModel):\n  879  \t\tself.edges_selectionmodel = edges_selectionmodel\n  880  \t\tself.edges_selectionmodel.selectionChanged.connect(self.handleEdgesSelectionChanged)\n  881  \n  882: \t@Slot(QItemSelection, QItemSelection)\n  883: \tdef handleNodesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  884  \t\tif not self.graph_model:\n  885  \t\t\treturn\n  ...\n  895  \t\tself.scene().blockSignals(False)\n  896  \n  897: \tdef handleEdgesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  898  \t\tif not self.graph_model:\n  899  \t\t\treturn\n  ...\n  982  \t\t\t# Initialize the GraphModel\n  983  \t\t\tself.graph_model = GraphModel()\n  984: \t\t\tself.nodes_selectionmodel = QItemSelectionModel(self.graph_model._nodeTable)\n  985: \t\t\tself.edges_selectionmodel = QItemSelectionModel(self.graph_model._edgeTable)\n  986  \n  987  \t\t\t# Add some example nodes and edges\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphview_databased.py:\n  464  \n  465  \t\t# \tif self.nodes_selectionmodel:\n  466: \t\t# \t\titem_selection = QItemSelection()\n  467  \t\t# \t\tfor node in node_selection:\n  468: \t\t# \t\t\titem_selection.merge(QItemSelection(node, node), QItemSelectionModel.SelectionFlag.Select)\n  469: \t\t# \t\tself.nodes_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  470  \n  471  \t\t# \t\tif node_selection:\n  472: \t\t# \t\t\tself.nodes_selectionmodel.setCurrentIndex(node_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  473  \t\t# \t\telse:\n  474: \t\t# \t\t\tself.nodes_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  475  \n  476  \t\t# \tif self.edges_selectionmodel:\n  477: \t\t# \t\titem_selection = QItemSelection()\n  478  \t\t# \t\tfor edge in edge_selection:\n  479: \t\t# \t\t\titem_selection.merge(QItemSelection(edge, edge), QItemSelectionModel.SelectionFlag.Select)\n  480: \t\t# \t\tself.edges_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  481  \n  482  \t\t# \t\tif edge_selection:\n  483: \t\t# \t\t\tself.edges_selectionmodel.setCurrentIndex(edge_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  484  \t\t# \t\telse:\n  485: \t\t# \t\t\tself.edges_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  486  \n  487  \tdef pinAt(self, pos:QPoint):\n  ...\n  808  \n  809  \t# Selection\n  810: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  811  \t\tself.nodes_selectionmodel = nodes_selectionmodel\n  812  \t\tself.nodes_selectionmodel.selectionChanged.connect(self.handleNodesSelectionChanged)\n  813  \n  814: \tdef setEdgesSelectionModel(self, edges_selectionmodel:QItemSelectionModel):\n  815  \t\tself.edges_selectionmodel = edges_selectionmodel\n  816  \t\tself.edges_selectionmodel.selectionChanged.connect(self.handleEdgesSelectionChanged)\n  817  \n  818: \t@Slot(QItemSelection, QItemSelection)\n  819: \tdef handleNodesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  820  \t\tif not self.graph_model:\n  821  \t\t\treturn\n  ...\n  831  \t\tself.scene().blockSignals(False)\n  832  \n  833: \tdef handleEdgesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  834  \t\tif not self.graph_model:\n  835  \t\t\treturn\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphview_rolebased.py:\n  434  \t\t\t\t\tassert isinstance(edge_index, EdgeIndex)\n  435  \t\t\t\t\tif value == 1:\n  436: \t\t\t\t\t\tedges_selectionmodel.select(edge_index, QItemSelectionModel.SelectionFlag.Select)\n  437  \t\t\t\t\telif value == 0:\n  438: \t\t\t\t\t\tedges_selectionmodel.select(edge_index, QItemSelectionModel.SelectionFlag.Deselect)\n  439  \t\t\t\telse:\n  440  \t\t\t\t\tpass\n  ...\n  531  \n  532  \t\t\tif self.nodes_selectionmodel:\n  533: \t\t\t\titem_selection = QItemSelection()\n  534  \t\t\t\tfor node in node_selection:\n  535: \t\t\t\t\titem_selection.merge(QItemSelection(node, node), QItemSelectionModel.SelectionFlag.Select)\n  536: \t\t\t\tself.nodes_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  537  \n  538  \t\t\t\tif node_selection:\n  539: \t\t\t\t\tself.nodes_selectionmodel.setCurrentIndex(node_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  540  \t\t\t\telse:\n  541: \t\t\t\t\tself.nodes_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  542  \n  543  \t\t\tif self.edges_selectionmodel:\n  544: \t\t\t\titem_selection = QItemSelection()\n  545  \t\t\t\tfor edge in edge_selection:\n  546: \t\t\t\t\titem_selection.merge(QItemSelection(edge, edge), QItemSelectionModel.SelectionFlag.Select)\n  547: \t\t\t\tself.edges_selectionmodel.select(item_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  548  \n  549  \t\t\t\tif edge_selection:\n  550: \t\t\t\t\tself.edges_selectionmodel.setCurrentIndex(edge_selection[-1], QItemSelectionModel.SelectionFlag.Current)\n  551  \t\t\t\telse:\n  552: \t\t\t\t\tself.edges_selectionmodel.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  553  \n  554  \n  ...\n  680  \t\tself.graph_model.edgeList.rowsAboutToBeRemoved.connect(self.handleEdgesRemoved)\n  681  \n  682: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  683  \t\tself.nodes_selectionmodel = nodes_selectionmodel\n  684  \t\tself.nodes_selectionmodel.selectionChanged.connect(self.handleNodesSelectionChanged)\n  685  \n  686: \tdef setEdgesSelectionModel(self, edges_selectionmodel:QItemSelectionModel):\n  687  \t\tself.edges_selectionmodel = edges_selectionmodel\n  688  \t\tself.edges_selectionmodel.selectionChanged.connect(self.handleEdgesSelectionChanged)\n  ...\n  690  \t\tself.zoom_factor=1.2\n  691  \n  692: \t@Slot(QItemSelection, QItemSelection)\n  693: \tdef handleNodesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  694  \n  695  \t\tself.scene().blockSignals(True)\n  ...\n  705  \t\tself.scene().blockSignals(False)\n  706  \n  707: \tdef handleEdgesSelectionChanged(self, selected:QItemSelection, deselected:QItemSelection):\n  708  \t\tself.scene().blockSignals(True)\n  709  \t\tfor index in [index for index in selected.indexes() if index.column()==0]:\n  ...\n 1034  \t\t\t# Initialize the GraphModel\n 1035  \t\t\tself.graph_model = GraphModel()\n 1036: \t\t\tself.nodes_selectionmodel = QItemSelectionModel(self.graph_model.nodes)\n 1037: \t\t\tself.edges_selectionmodel = QItemSelectionModel(self.graph_model.edges)\n 1038  \n 1039  \t\t\t# Add some example nodes and edges\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\grraphview_with_NodeGraphQt.py:\n  356  \n  357          @nodes_selectionmodel.selectionChanged.connect\n  358:         def selectionChanged(selected:QItemSelection, deselected: QItemSelection):\n  359              selected_rows = {index.row() for index in selected.indexes()}\n  360              for row in selected_rows:\n  ...\n  380  \n  381              # Create a selection object\n  382:             item_selection = QItemSelection()\n  383              for index in selected_indexes:\n  384                  item_selection.select(index, index)\n  ...\n  388              self._nodes_selectionmodel.select(\n  389                  item_selection, \n  390:                 QItemSelectionModel.ClearAndSelect | QItemSelectionModel.SelectCurrent | QItemSelectionModel.Rows\n  391              )\n  392  \n  393              # Set the last selected index as the current one\n  394              if selected_indexes:\n  395:                 self._nodes_selectionmodel.setCurrentIndex(selected_indexes[-1], QItemSelectionModel.Current)\n  396  \n  397  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\listview_rolebased.py:\n  133  \t\tself.edges_list_view.setModel(self.graphmodel.edgeList)\n  134  \n  135: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  136  \t\tself.nodes_list_view.setSelectionModel(nodes_selectionmodel)\n  137  \n  138: \tdef setInletsSelectionModel(self, inlets_selectionmodel:QItemSelectionModel):\n  139  \t\tself.inlets_list_view.setSelectionModel(inlets_selectionmodel)\n  140  \n  141: \tdef setOutletsSelectionModel(self, outlets_selectionmodel:QItemSelectionModel):\n  142  \t\tself.outlets_list_view.setSelectionModel(outlets_selectionmodel)\n  143  \n  144: \tdef setEdgesSelectionModel(self, edges_selectionmodel:QItemSelectionModel):\n  145  \t\tself.edges_list_view.setSelectionModel(edges_selectionmodel)\n  146  \n  ...\n  214  \tedge = graph_model.addEdge(outlet_id, inlet_id)\n  215  \n  216: \tnodes_selectionmodel =   QItemSelectionModel(graph_model.nodeList)\n  217: \tinlets_selectionmodel =  QItemSelectionModel(graph_model.inletList)\n  218: \toutlets_selectionmodel = QItemSelectionModel(graph_model.outletList)\n  219: \tedges_selectionmodel =   QItemSelectionModel(graph_model.edgeList)\n  220  \n  221  \tgraph_view1 = GraphListView()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\nodesheet_and_details_view.py:\n  148          model = self.graphmodel.nodes\n  149  \n  150:         self.nodes_selectionmodel =   QItemSelectionModel(self.graphmodel.nodes)\n  151:         self.inlets_selectionmodel =  QItemSelectionModel(self.graphmodel.inlets)\n  152:         self.outlets_selectionmodel = QItemSelectionModel(self.graphmodel.outlets)\n  153:         self.edges_selectionmodel =   QItemSelectionModel(self.graphmodel.edges)\n  154  \n  155          self.read(\"script_cache_test.py\")\n  ...\n  288              new_index = self.graphmodel.nodes.index(self.graphmodel.nodes.rowCount()-1, 0)  # Select the last node added\n  289              self.nodes_selectionmodel.clearSelection()\n  290:             self.nodes_selectionmodel.setCurrentIndex(new_index, QItemSelectionModel.Select | QItemSelectionModel.Rows)\n  291  \n  292              self.graphmodel.addInlet(node_id, \"in\")\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\tableview_columnbased.py:\n  144  \t\tself.edges_sheet_view.setModel(self.graphmodel._edgeTable)\n  145  \n  146: \tdef setNodesSelectionModel(self, nodes_selectionmodel:QItemSelectionModel):\n  147  \t\tself.nodes_sheet_view.setSelectionModel(nodes_selectionmodel)\n  148  \n  149: \tdef setInletsSelectionModel(self, inlets_selectionmodel:QItemSelectionModel):\n  150  \t\tself.inlets_sheet_view.setSelectionModel(inlets_selectionmodel)\n  151  \n  152: \tdef setOutletsSelectionModel(self, outlets_selectionmodel:QItemSelectionModel):\n  153  \t\tself.outlets_sheet_view.setSelectionModel(outlets_selectionmodel)\n  154  \n  155: \tdef setEdgesSelectionModel(self, edges_selectionmodel:QItemSelectionModel):\n  156  \t\tself.edges_sheet_view.setSelectionModel(edges_selectionmodel)\n  157  \n  ...\n  224  \tedge = graph_model.addEdge(outlet_id, inlet_id)\n  225  \n  226: \tnodes_selectionmodel =   QItemSelectionModel(graph_model._nodeTable)\n  227: \tinlets_selectionmodel =  QItemSelectionModel(graph_model._inletTable)\n  228: \toutlets_selectionmodel = QItemSelectionModel(graph_model._outletTable)\n  229: \tedges_selectionmodel =   QItemSelectionModel(graph_model._edgeTable)\n  230  \n  231  \tgraph_view1 = GraphTableView()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\main.py:\n   45          self.node_proxy_model:PyProxyNodeModel = self.link_proxy_model.itemsModel()\n   46          assert self.node_proxy_model\n   47:         self.node_selection_model = QItemSelectionModel(self.node_proxy_model)\n   48:         self.link_selection_model = QItemSelectionModel(self.link_proxy_model)\n   49  \n   50          ### UI\n   ..\n   81              \n   82              if selection.count()>0:\n   83:                 self.node_selection_model.select(selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n   84:                 self.node_selection_model.setCurrentIndex(selection.indexes()[0], QItemSelectionModel.SelectionFlag.Current)\n   85              else:\n   86                  self.node_selection_model.clearSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\py_proxy_model.py:\n  106          return node\n  107  \n  108:     def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  109          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  110          ranges = group_consecutive_numbers(list(rows))\n  111  \n  112:         item_selection = QItemSelection()\n  113          for r in ranges:\n  114              r.start\n  115              r.stop\n  116  \n  117:             selection_range = QItemSelectionRange(\n  118                  self.index(r.start, 0), \n  119                  self.index(r.stop-1, self.columnCount()-1)\n  ...\n  124          return item_selection\n  125  \n  126:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[str]:\n  127          \"\"\"on selection model changed\"\"\"\n  128  \n  ...\n  284          return link\n  285  \n  286:     def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n  287          rows = sorted([self.mapFromSource(link).row() for link in links])\n  288          ranges = group_consecutive_numbers(list(rows))\n  289  \n  290:         item_selection = QItemSelection()\n  291          for r in ranges:\n  292              r.start\n  293              r.stop\n  294  \n  295:             selection_range = QItemSelectionRange(\n  296                  self.index(r.start, 0), \n  297                  self.index(r.stop, self.columnCount()-1)\n  ...\n  302          return item_selection\n  303  \n  304:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[tuple[str, str, str, str]]:\n  305          \"\"\"on selection model changed\"\"\"\n  306  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\_ARCHIVE\\node_tree_model.py:\n  104      })\n  105  \n  106:     selection = QItemSelectionModel(nodes)\n  107      node_list = QListView()\n  108      node_list.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\_ARCHIVE\\py_functions_model.py:\n  167      model = PyFunctionsModel()\n  168  \n  169:     selection = QItemSelectionModel(model)\n  170      table_view = QTableView()\n  171      table_view.setSelectionBehavior(QTableView.SelectionBehavior.SelectRows)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graph_editor_view.py:\n  560      def __init__(self, delegate=None, parent: QWidget | None = None):\n  561          super().__init__(delegate, parent)\n  562:         self._node_selection:QItemSelectionModel|None = None\n  563:         self._link_selection:QItemSelectionModel|None = None\n  564  \n  565:     def setSelectionModel(self, node_selection:QItemSelectionModel|None, link_selection:QItemSelectionModel|None):\n  566          # assert id(node_selection.model()) != id(self._nodes), f\"trying to set selection model, that works on a different model\\n  {node_selection.model()}\\n  !=\\n  {self._nodes}\"\n  567          if node_selection:\n  ...\n  577          self._link_selection = link_selection\n  578  \n  579:     def _onSelectionChanged(self, selected: QItemSelection, deselected: QItemSelection):\n  580          \"\"\"on selection model changed\"\"\"\n  581          assert self._node_selection, \"_node_selection is None\"\n  ...\n  602  \n  603          ### get LINK widget selection change\n  604:         # def selection_diff(selection_model:QItemSelectionModel, widget_mapping:dict[QPersistentModelIndex, QGraphicsItem]):\n  605          #     ...\n  606          selected_link_indexes = set([\n  ...\n  644          selected_node_rows = sorted(node_index.row() for node_index in selected_node_indexes)\n  645          selected_row_ranges = list( group_consecutive_numbers(selected_node_rows) )\n  646:         new_node_selection = QItemSelection()\n  647          for row_range in selected_row_ranges:\n  648              top_left = self._nodes.index(row_range.start, 0)\n  649              bottom_right = self._nodes.index(row_range.stop-1, self._nodes.columnCount()-1)\n  650:             selection_range = QItemSelectionRange(top_left, bottom_right)\n  651              new_node_selection.append(selection_range)\n  652  \n  653          if new_node_selection.count()>0:\n  654:             self._node_selection.setCurrentIndex(new_node_selection.at(0).topLeft(), QItemSelectionModel.SelectionFlag.Current)\n  655          else:\n  656:             self._node_selection.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  657:         self._node_selection.select(new_node_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  658  \n  659      def _syncLinkSelectionModel(self):\n  ...\n  668          selected_link_rows = sorted(index.row() for index in selected_link_indexes)\n  669          selected_link_row_ranges = list( group_consecutive_numbers(selected_link_rows) )\n  670:         new_link_selection = QItemSelection()\n  671          for row_range in selected_link_row_ranges:\n  672              top_left = self._edges.index(row_range.start, 0)\n  673              bottom_right = self._edges.index(row_range.stop-1, self._edges.columnCount()-1)\n  674:             selection_range = QItemSelectionRange(top_left, bottom_right)\n  675              new_link_selection.append(selection_range)\n  676  \n  677          if new_link_selection.count()>0:\n  678:             self._link_selection.setCurrentIndex(new_link_selection.at(0).topLeft(), QItemSelectionModel.SelectionFlag.Current)\n  679          else:\n  680:             self._link_selection.setCurrentIndex(QModelIndex(), QItemSelectionModel.SelectionFlag.Clear)\n  681:         self._link_selection.select(new_link_selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  682  \n  683  \n  ...\n 1369      edges = StandardLinkModel(nodes)\n 1370  \n 1371:     node_selection = QItemSelectionModel(nodes)\n 1372:     edge_selection = QItemSelectionModel(edges)\n 1373  \n 1374  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graphtree_editor_view.py:\n  558              super().__init__(parent=parent)\n  559              self._model:QStandardItemModel|None=QStandardItemModel()\n  560:             self._selection = QItemSelectionModel(self._model)\n  561  \n  562              self.setupUI()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\main.py:\n   52          self.node_proxy_model = PyProxyNodeModel(self.graph_model)\n   53          assert self.node_proxy_model\n   54:         self.node_selection_model = QItemSelectionModel(self.node_proxy_model)\n   55:         self.link_selection_model = QItemSelectionModel(self.link_proxy_model)\n   56  \n   57          ### UI\n   ..\n  208              \n  209              if selection.count()>0:\n  210:                 self.node_selection_model.select(selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  211:                 self.node_selection_model.setCurrentIndex(selection.indexes()[0], QItemSelectionModel.SelectionFlag.Current)\n  212              else:\n  213                  self.node_selection_model.clearSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_link_model.py:\n   85          return link\n   86  \n   87:     def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n   88          rows = sorted([self.mapFromSource(link).row() for link in links])\n   89          ranges = group_consecutive_numbers(list(rows))\n   90  \n   91:         item_selection = QItemSelection()\n   92          for r in ranges:\n   93              r.start\n   94              r.stop\n   95  \n   96:             selection_range = QItemSelectionRange(\n   97                  self.index(r.start, 0), \n   98                  self.index(r.stop, self.columnCount()-1)\n   ..\n  103          return item_selection\n  104  \n  105:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[tuple[str, str, str, str]]:\n  106          \"\"\"on selection model changed\"\"\"\n  107  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_node_model.py:\n  111          return node\n  112  \n  113:     def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  114          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  115          ranges = group_consecutive_numbers(list(rows))\n  116  \n  117:         item_selection = QItemSelection()\n  118          for r in ranges:\n  119              r.start\n  120              r.stop\n  121  \n  122:             selection_range = QItemSelectionRange(\n  123                  self.index(r.start, 0), \n  124                  self.index(r.stop-1, self.columnCount()-1)\n  ...\n  129          return item_selection\n  130  \n  131:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[str]:\n  132          \"\"\"on selection model changed\"\"\"\n  133  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\main.py:\n  178          self.link_proxy_model = PyProxyLinkModel()\n  179          self.node_proxy_model = PyProxyNodeModel()\n  180:         self.node_selection_model = QItemSelectionModel(self.node_proxy_model)\n  181:         self.link_selection_model = QItemSelectionModel(self.link_proxy_model)\n  182  \n  183          ### UI\n  ...\n  379              \n  380              if selection.count()>0:\n  381:                 self.node_selection_model.select(selection, QItemSelectionModel.SelectionFlag.ClearAndSelect)\n  382:                 self.node_selection_model.setCurrentIndex(selection.indexes()[0], QItemSelectionModel.SelectionFlag.Current)\n  383              else:\n  384                  self.node_selection_model.clearSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_link_model.py:\n   86          return link\n   87  \n   88:     def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n   89          rows = sorted([self.mapFromSource(link).row() for link in links])\n   90          ranges = group_consecutive_numbers(list(rows))\n   91  \n   92:         item_selection = QItemSelection()\n   93          for r in ranges:\n   94              r.start\n   95              r.stop\n   96  \n   97:             selection_range = QItemSelectionRange(\n   98                  self.index(r.start, 0), \n   99                  self.index(r.stop, self.columnCount()-1)\n  ...\n  104          return item_selection\n  105  \n  106:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[tuple[str, str, str, str]]:\n  107          \"\"\"on selection model changed\"\"\"\n  108  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_node_model.py:\n  114          return node\n  115  \n  116:     def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  117          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  118          ranges = group_consecutive_numbers(list(rows))\n  119  \n  120:         item_selection = QItemSelection()\n  121          for r in ranges:\n  122:             selection_range = QItemSelectionRange(\n  123                  self.index(r.start, 0), \n  124                  self.index(r.stop-1, self.columnCount()-1)\n  ...\n  129          return item_selection\n  130  \n  131:     def mapSelectionToSource(self, proxySelection: QItemSelection)->Sequence[str]:\n  132          \"\"\"on selection model changed\"\"\"\n  133  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\views\\inspector_view.py:\n   15  \n   16          self._model:PyProxyNodeModel|None=None\n   17:         self._node_selection_model:QItemSelectionModel|None=None\n   18          self._current:str|None=None\n   19          self._model_connections = []\n   ..\n   35          self._model = model\n   36  \n   37:     def setSelectionModel(self, selection:QItemSelectionModel):\n   38          assert self._model is not None, \"cant set selection model without a model\"\n   39  \n   ..\n  203  #         self._model:PyGraphModel|None=None\n  204  #         self.node_proxy_model:PyProxyNodeModel|None = None\n  205: #         self.node_selection_model:QItemSelectionModel|None=None\n  206  #         self._current:str|None=None\n  207  #         self._model_connections = []\n  ...\n  273  #         self._setCurrent(None)\n  274  \n  275: #     def setSelectionModel(self, selection:QItemSelectionModel|None, proxy:PyProxyNodeModel|None):\n  276  #         assert all([selection is None, proxy is None]) or all([selection is not None, proxy is not None])\n  277          \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\views\\preview.py:\n   20          self._model:PyGraphModel|None=None\n   21          self.node_proxy_model:PyProxyNodeModel|None = None\n   22:         self.node_selection_model:QItemSelectionModel|None=None\n   23          self._current:str|None=None\n   24          self._model_connections = []\n   ..\n   42          self._model = model\n   43  \n   44:     def setSelectionModel(self, selection:QItemSelectionModel|None, proxy:PyProxyNodeModel|None):\n   45          assert all([selection is None, proxy is None]) or all([selection is not None, proxy is not None])\n   46          \n\n168 matches across 26 files\n\n\nSearching 354 files for \"SelectionRange\"\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\py_proxy_model.py:\n  115              r.stop\n  116  \n  117:             selection_range = QItemSelectionRange(\n  118                  self.index(r.start, 0), \n  119                  self.index(r.stop-1, self.columnCount()-1)\n  ...\n  293              r.stop\n  294  \n  295:             selection_range = QItemSelectionRange(\n  296                  self.index(r.start, 0), \n  297                  self.index(r.stop, self.columnCount()-1)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graph_editor_view.py:\n  648              top_left = self._nodes.index(row_range.start, 0)\n  649              bottom_right = self._nodes.index(row_range.stop-1, self._nodes.columnCount()-1)\n  650:             selection_range = QItemSelectionRange(top_left, bottom_right)\n  651              new_node_selection.append(selection_range)\n  652  \n  ...\n  672              top_left = self._edges.index(row_range.start, 0)\n  673              bottom_right = self._edges.index(row_range.stop-1, self._edges.columnCount()-1)\n  674:             selection_range = QItemSelectionRange(top_left, bottom_right)\n  675              new_link_selection.append(selection_range)\n  676  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_link_model.py:\n   94              r.stop\n   95  \n   96:             selection_range = QItemSelectionRange(\n   97                  self.index(r.start, 0), \n   98                  self.index(r.stop, self.columnCount()-1)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_node_model.py:\n  120              r.stop\n  121  \n  122:             selection_range = QItemSelectionRange(\n  123                  self.index(r.start, 0), \n  124                  self.index(r.stop-1, self.columnCount()-1)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_link_model.py:\n   95              r.stop\n   96  \n   97:             selection_range = QItemSelectionRange(\n   98                  self.index(r.start, 0), \n   99                  self.index(r.stop, self.columnCount()-1)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_node_model.py:\n  120          item_selection = QItemSelection()\n  121          for r in ranges:\n  122:             selection_range = QItemSelectionRange(\n  123                  self.index(r.start, 0), \n  124                  self.index(r.stop-1, self.columnCount()-1)\n\n8 matches across 6 files\n\n\nSearching 354 files for \"group_conse\"\n\nC:\\dev\\src\\pylive\\pylive\\utils\\__init__.py:\n   16  from itertools import groupby\n   17  \n   18: def _group_consecutive_numbers_clever(numbers:Iterable[int])->Iterable[range]:\n   19      from itertools import groupby\n   20      from operator import itemgetter\n   ..\n   28      return ranges\n   29  \n   30: def _group_consecutive_numbers_readable(numbers:list[int])->Iterable[range]:\n   31      if not len(numbers)>0:\n   32          return []\n   ..\n   42  \n   43  \n   44: group_consecutive_numbers = _group_consecutive_numbers_readable\n   45  \n   46  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphmodel_columnbased.py:\n  488  \n  489  \t\t# self._nodeTable.blockSignals(False)\n  490: \t\t# for start, end in group_consecutive_numbers(columnsChanged):\n  491  \t\t# \tself._nodeTable.dataChanged.emit(node.siblingAtColumn(start), node.siblingAtColumn(end))\n  492  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphmodel_rolebased.py:\n   19  from typing import *\n   20  \n   21: def group_consecutive_numbers(data):\n   22  \tfrom itertools import groupby\n   23  \tfrom operator import itemgetter\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\py_proxy_model.py:\n    8  logger = logging.getLogger(__name__)\n    9  \n   10: from pylive.utils import group_consecutive_numbers\n   11  \n   12  from pylive.VisualCode_v4.py_data_model import PyDataModel\n   ..\n   80          indexes = [self.mapFromSource(node) for node in nodes]\n   81          rows = set([idx.row() for idx in indexes])\n   82:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   83          for r in reversed(ranges):\n   84              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n   ..\n   87          indexes = [self.mapFromSource(node) for node in nodes]\n   88          rows = set([idx.row() for idx in indexes])\n   89:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   90          for range_group in reversed(ranges):\n   91              for row in reversed(range_group):\n   ..\n  108      def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  109          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  110:         ranges = group_consecutive_numbers(list(rows))\n  111  \n  112          item_selection = QItemSelection()\n  ...\n  262          indexes = [self.mapFromSource(link) for link in links]\n  263          rows = set([idx.row() for idx in indexes])\n  264:         ranges = list(group_consecutive_numbers(sorted(rows)))\n  265          for r in reversed(ranges):\n  266              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n  ...\n  269          indexes = [self.mapFromSource(link) for link in links]\n  270          rows = set([idx.row() for idx in indexes])\n  271:         ranges = list(group_consecutive_numbers(sorted(rows)))\n  272          for range_group in reversed(ranges):\n  273              for row in reversed(range_group):\n  ...\n  286      def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n  287          rows = sorted([self.mapFromSource(link).row() for link in links])\n  288:         ranges = group_consecutive_numbers(list(rows))\n  289  \n  290          item_selection = QItemSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graph_editor_view.py:\n   60  logging.basicConfig(level=logging.DEBUG)\n   61  logger = logging.getLogger(__name__)\n   62: from pylive.utils import group_consecutive_numbers\n   63  from textwrap import dedent\n   64  \n   ..\n  643          selected_node_indexes = [self._node_widgets.inverse[node_widget] for node_widget in selected_node_widgets]\n  644          selected_node_rows = sorted(node_index.row() for node_index in selected_node_indexes)\n  645:         selected_row_ranges = list( group_consecutive_numbers(selected_node_rows) )\n  646          new_node_selection = QItemSelection()\n  647          for row_range in selected_row_ranges:\n  ...\n  667          selected_link_indexes = [self._edge_widgets.inverse[widget] for widget in selected_link_widgets]\n  668          selected_link_rows = sorted(index.row() for index in selected_link_indexes)\n  669:         selected_link_row_ranges = list( group_consecutive_numbers(selected_link_rows) )\n  670          new_link_selection = QItemSelection()\n  671          for row_range in selected_link_row_ranges:\n  ...\n 1467          rows = set(index.row() for index in node_selection.selectedIndexes())\n 1468          if len(rows)>0:\n 1469:             ranges = list(group_consecutive_numbers(sorted(rows)))\n 1470              for r in reversed(ranges):\n 1471                  nodes.removeRows(r.start, len(r), QModelIndex())\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\graphtree_editor_view.py:\n   60  logging.basicConfig(level=logging.DEBUG)\n   61  logger = logging.getLogger(__name__)\n   62: from pylive.utils import group_consecutive_numbers\n   63  from textwrap import dedent\n   64  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py:\n    8  from dataclasses import dataclass\n    9  \n   10: from pylive.utils import group_consecutive_numbers\n   11  from pylive.VisualCode_v4.graph_editor.graph_data_roles import GraphDataRole\n   12  \n   ..\n  114                  edge_rows_to_remove.append(row)\n  115  \n  116:         edge_row_groups = [_ for _ in group_consecutive_numbers(edge_rows_to_remove)]\n  117          for edge_range in edge_row_groups:\n  118              self.removeRows(edge_range.start, count=edge_range.stop-edge_range.start)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_link_model.py:\n    6  \n    7  from pylive.VisualCode_v5.py_graph_model import PyGraphModel\n    8: from pylive.utils import group_consecutive_numbers\n    9  \n   10  \n   ..\n   63          indexes = [self.mapFromSource(link) for link in links]\n   64          rows = set([idx.row() for idx in indexes])\n   65:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   66          for r in reversed(ranges):\n   67              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n   ..\n   70          indexes = [self.mapFromSource(link) for link in links]\n   71          rows = set([idx.row() for idx in indexes])\n   72:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   73          for range_group in reversed(ranges):\n   74              for row in reversed(range_group):\n   ..\n   87      def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n   88          rows = sorted([self.mapFromSource(link).row() for link in links])\n   89:         ranges = group_consecutive_numbers(list(rows))\n   90  \n   91          item_selection = QItemSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\py_proxy_node_model.py:\n    6  \n    7  from pylive.VisualCode_v5.py_graph_model import PyGraphModel\n    8: from pylive.utils import group_consecutive_numbers\n    9  \n   10  \n   ..\n   85          indexes = [self.mapFromSource(node) for node in nodes]\n   86          rows = set([idx.row() for idx in indexes])\n   87:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   88          for r in reversed(ranges):\n   89              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n   ..\n   92          indexes = [self.mapFromSource(node) for node in nodes]\n   93          rows = set([idx.row() for idx in indexes])\n   94:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   95          for range_group in reversed(ranges):\n   96              for row in reversed(range_group):\n   ..\n  113      def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  114          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  115:         ranges = group_consecutive_numbers(list(rows))\n  116  \n  117          item_selection = QItemSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_link_model.py:\n    6  \n    7  from pylive.VisualCode_v6.py_graph_model import PyGraphModel\n    8: from pylive.utils import group_consecutive_numbers\n    9  \n   10  \n   ..\n   64          indexes = [self.mapFromSource(link) for link in links]\n   65          rows = set([idx.row() for idx in indexes])\n   66:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   67          for r in reversed(ranges):\n   68              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n   ..\n   71          indexes = [self.mapFromSource(link) for link in links]\n   72          rows = set([idx.row() for idx in indexes])\n   73:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   74          for range_group in reversed(ranges):\n   75              for row in reversed(range_group):\n   ..\n   88      def mapSelectionFromSource(self, links:Sequence[tuple[str, str, str, str]])->QItemSelection:\n   89          rows = sorted([self.mapFromSource(link).row() for link in links])\n   90:         ranges = group_consecutive_numbers(list(rows))\n   91  \n   92          item_selection = QItemSelection()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v6\\py_proxy_node_model.py:\n    7  \n    8  from pylive.VisualCode_v6.py_graph_model import PyGraphModel\n    9: from pylive.utils import group_consecutive_numbers\n   10  \n   11  \n   ..\n   88          indexes = [self.mapFromSource(node) for node in nodes]\n   89          rows = set([idx.row() for idx in indexes])\n   90:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   91          for r in reversed(ranges):\n   92              self.rowsAboutToBeRemoved.emit(QModelIndex(), r.start, r.stop-1)\n   ..\n   95          indexes = [self.mapFromSource(node) for node in nodes]\n   96          rows = set([idx.row() for idx in indexes])\n   97:         ranges = list(group_consecutive_numbers(sorted(rows)))\n   98          for range_group in reversed(ranges):\n   99              for row in reversed(range_group):\n  ...\n  116      def mapSelectionFromSource(self, nodes:Sequence[str])->QItemSelection:\n  117          rows = sorted([self.mapFromSource(node).row() for node in nodes])\n  118:         ranges = group_consecutive_numbers(list(rows))\n  119  \n  120          item_selection = QItemSelection()\n\n36 matches across 11 files\n\n\nSearching 355 files for \"arrow\"\n\nC:\\dev\\src\\pylive\\expreiments\\ColorSpace-chair.ipynb:\n 1205         \"function(){console.warn(&quot;THREE.AudioAnalyser: .getData() is now .getFrequencyData().&quot;);return this.getFrequencyData()};Gc.prototype.updateCubeMap=function(a,b){console.warn(&quot;THREE.CubeCamera: .updateCubeMap() is now .update().&quot;);return this.update(a,b)};Lb.crossOrigin=void 0;Lb.loadTexture=function(a,b,c,d){console.warn(&quot;THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.&quot;);var e=new ef;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a};\\n\",\n 1206         \"Lb.loadTextureCube=function(a,b,c,d){console.warn(&quot;THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.&quot;);var e=new df;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a};Lb.loadCompressedTexture=function(){console.error(&quot;THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.&quot;)};Lb.loadCompressedTextureCube=function(){console.error(&quot;THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.&quot;)};\\n\",\n 1207: <skipped 187 characters> ...ing=5;k.AddEquation=100;k.AddOperation=2;k.AdditiveBlending=2;k.AlphaFormat=1021;k.AlwaysDepth=1;k.AlwaysStencilFunc=519;k.AmbientLight=mf;k.AmbientLightProbe=Fg;k.AnimationClip=Qa;k.AnimationLoader=wg;k.AnimationMixer=Mg;k.AnimationObjectGroup=oi;k.AnimationUtils=R;k.ArcCurve=gd;k.ArrayCamera=Pe;k.ArrowHelper=xb;k.Audio=id;k.AudioAnalyser=Kg;k.AudioContext=\\n\",\n 1208         \"Ig;k.AudioListener=Hg;k.AudioLoader=tf;k.AxesHelper=ve;k.AxisHelper=function(a){console.warn(&quot;THREE.AxisHelper has been renamed to THREE.AxesHelper.&quot;);return new ve(a)};k.BackSide=1;k.BasicDepthPacking=3200;k.BasicShadowMap=0;k.BinaryTextureLoader=function(a){console.warn(&quot;THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.&quot;);return new cf(a)};k.Bone=pg;k.BooleanKeyframeTrack=Ze;k.BoundingBoxHelper=function(a,b){console.warn(&quot;THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.&quot;);\\n\",\n 1209         \"return new wb(a,b)};k.Box2=Qg;k.Box3=Sa;k.Box3Helper=te;k.BoxBufferGeometry=Jd;k.BoxGeometry=nh;k.BoxHelper=wb;k.BufferAttribute=M;k.BufferGeometry=C;k.BufferGeometryLoader=rf;k.ByteType=1010;k.Cache=vc;k.Camera=db;k.CameraHelper=se;k.CanvasRenderer=function(){console.error(&quot;THREE.CanvasRenderer has been removed&quot;)};k.CanvasTexture=Sd;k.CatmullRomCurve3=pa;k.CineonToneMapping=4;k.CircleBufferGeometry=cd;k.CircleGeometry=me;k.ClampToEdgeWrapping=1001;k.Clock=Gg;k.ClosedSplineCurve3=Fi;k.Color=A;k.ColorKeyframeTrack=\\n\",\n\nC:\\dev\\src\\pylive\\expreiments\\qstyle_draw_ptimitive_elements.py:\n   42              \"Widget\": QStyle.PrimitiveElement.PE_Widget,\n   43              \"CustomBase\": QStyle.PrimitiveElement.PE_CustomBase,\n   44:             \"IndicatorArrowUp\": QStyle.PrimitiveElement.PE_IndicatorArrowUp,\n   45:             \"IndicatorArrowDown\": QStyle.PrimitiveElement.PE_IndicatorArrowDown,\n   46:             \"IndicatorArrowRight\": QStyle.PrimitiveElement.PE_IndicatorArrowRight,\n   47:             \"IndicatorArrowLeft\": QStyle.PrimitiveElement.PE_IndicatorArrowLeft,\n   48              \"IndicatorButtonDropDown\": QStyle.PrimitiveElement.PE_IndicatorButtonDropDown,\n   49              \"IndicatorBranch\": QStyle.PrimitiveElement.PE_IndicatorBranch,\n   50:             \"IndicatorColumnViewArrow\": QStyle.PrimitiveElement.PE_IndicatorColumnViewArrow,\n   51              \"IndicatorCheckBox\": QStyle.PrimitiveElement.PE_IndicatorCheckBox,\n   52              \"IndicatorDockWidgetResizeHandle\": QStyle.PrimitiveElement.PE_IndicatorDockWidgetResizeHandle,\n   ..\n   57              \"IndicatorItemViewItemCheck\": QStyle.PrimitiveElement.PE_IndicatorItemViewItemCheck,\n   58              \"IndicatorItemViewItemDrop\": QStyle.PrimitiveElement.PE_IndicatorItemViewItemDrop,\n   59:             \"IndicatorHeaderArrow\": QStyle.PrimitiveElement.PE_IndicatorHeaderArrow,\n   60              \"IndicatorMenuCheckMark\": QStyle.PrimitiveElement.PE_IndicatorMenuCheckMark,\n   61              \"IndicatorProgressChunk\": QStyle.PrimitiveElement.PE_IndicatorProgressChunk,\n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\graph_view.py:\n   13      makeLineBetweenShapes,\n   14  )\n   15: from pylive.QtGraphEditor.NetrowkXGraphEditor.qgraphics_arrow_item import (\n   16:     QGraphicsArrowItem,\n   17  )\n   18  \n   ..\n   96          self, view, graph, source_node, target_node\n   97      ) -> QGraphicsItem:\n   98:         arrow = QGraphicsArrowItem()\n   99          pen = QPen(view.palette().color(QPalette.ColorRole.Text), 1.5)\n  100:         arrow.setPen(pen)\n  101  \n  102          def update_link():\n  103:             arrow.setLine(\n  104                  makeLineBetweenShapes(\n  105                      source_node.geometry(), target_node.geometry()\n  ...\n  111          source_node.geometryChanged.connect(update_link)\n  112          target_node.geometryChanged.connect(update_link)\n  113:         return arrow\n  114  \n  115  \n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\standard_graph_delegate.py:\n   10      makeLineBetweenShapes,\n   11  )\n   12: from pylive.QtGraphEditor.NetrowkXGraphEditor.qgraphics_arrow_item import (\n   13:     QGraphicsArrowItem,\n   14  )\n   15  from graph_model import GraphModel\n   ..\n   44  \n   45  \n   46: class StandardLinkWidget(QGraphicsArrowItem):\n   47      def __init__(self, parent=None):\n   48          super().__init__(parent=parent)\n   ..\n   88          source: QGraphicsWidget,\n   89          target: QGraphicsWidget,\n   90:     ) -> QGraphicsArrowItem:\n   91          link = StandardLinkWidget()\n   92  \n   ..\n  107          graph: GraphModel,\n  108          e: Tuple[Hashable, Hashable],\n  109:         widget: QGraphicsArrowItem,\n  110          **props\n  111      ):\n  ...\n  116          graph: GraphModel,\n  117          e: Tuple[Hashable, Hashable],\n  118:         widget: QGraphicsArrowItem,\n  119          **props\n  120      ):\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py:\n  185  \t\t\t\treturn max_width + scrollbar_width + 2 * item_margin\n  186  \n  187: \t\t\t# Ensure the popup isn't too narrow or too wide\n  188  \t\t\ttotal_width = popup_width()\n  189  \t\t\tmin_width = 5\n\nC:\\dev\\src\\pylive\\pylive\\render_engine\\render_layers.py:\n  186  \n  187  \n  188: class ArrowLayer(RenderLayer):\n  189  \tBILLBOARD = dedent('''\\\n  190  \t\t// Decompose the view matrix to remove its rotational part\n  ...\n  287  \n  288  \t\t    (0.0, 1.0, 0.0),  # Top of the shaft\n  289: \t\t    (-0.1, 0.9, 0.0),  # Left of the arrowhead\n  290  \t\t    \n  291  \t\t    (0.0, 1.0, 0.0),  # Top of the shaft\n  292: \t\t    (0.1, 0.9, 0.0)   # Right of the arrowhead\n  293  \t\t], dtype=np.float32).flatten()\n  294  \t\n  ...\n  318  \t\tsuper().__init__()\n  319  \n  320: \t\tself.xarrow = ArrowLayer(camera, \n  321  \t\t\tmodel=glm.rotate(90*math.pi/180, glm.vec3(1,0,0)),\n  322  \t\t\tcolor=glm.vec4(1,0,0,1)\n  323  \t\t), # X\n  324: \t\tself.yarrow = ArrowLayer(camera,\n  325  \t\t\tcolor=glm.vec4(0,1,0,1),\n  326  \t\t\tmodel=glm.mat4(1)\n  327  \t\t), # Y\n  328  \n  329: \t\tself.zarrow = ArrowLayer(camera, \n  330  \t\t\tmodel=glm.rotate(90*math.pi/180, glm.vec3(0,0,1)),\n  331  \t\t\tcolor=glm.vec4(0,0,1,1)\n\nC:\\dev\\src\\pylive\\pylive\\utils\\geo.py:\n  336      return line\n  337  \n  338: def makeArrowShape(line:QLineF, width=1.0):\n  339:     # arrow shape\n  340      head_width, head_length = width*2, width*4\n  341:     # create an arrow on X+ axis with line length\n  342  \n  343      vertices = [\n  ...\n  352      ]\n  353  \n  354:     arrow_polygon = QPolygonF([QPointF(x, y) for x, y in vertices])\n  355      transform = QTransform()\n  356      transform.translate(line.p1().x(), line.p1().y())\n  ...\n  358  \n  359      path = QPainterPath()\n  360:     path.addPolygon(transform.map(arrow_polygon))\n  361  \n  362      return path\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_NetworkX\\python_graph_scene_delegate.py:\n    9  from pylive.VisualCode_NetworkX.UI.nx_network_scene_delegate import NXNetworkSceneDelegate\n   10  from pylive.VisualCode_NetworkX.UI.nx_graph_shapes import (\n   11:     ArrowLinkShape, RoundedLinkShape,\n   12      BaseNodeItem,\n   13      BaseLinkItem, \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_NetworkX\\UI\\nx_graph_shapes.py:\n   18  from PySide6.QtWidgets import *\n   19  \n   20: from pylive.utils.geo import makeArrowShape\n   21  from pylive.utils.geo import makeLineBetweenShapes, makeVerticalRoundedPath, makeHorizontalRoundedPath\n   22  \n   ..\n  188  \n  189  \n  190: class ArrowLinkShape(InteractiveShape, BaseLinkItem):\n  191      \"\"\"Graphics item representing an edge in a graph.\"\"\"\n  192  \n  ...\n  264          )\n  265  \n  266:         ### draw arrow shape\n  267:         arrow_shape = makeArrowShape(self._line, self.pen().widthF())\n  268  \n  269:         # use the pen as brush to draw the arrow shape\n  270          import math\n  271  \n  ...\n  277          if self._label:\n  278              painter.setClipRegion(text_clip)\n  279:         painter.drawPath(arrow_shape)\n  280  \n  281      def shape(self) -> QPainterPath:\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_NetworkX\\UI\\nx_network_scene_delegate.py:\n    5  \n    6  from pylive.VisualCode_NetworkX.UI.nx_graph_shapes import (\n    7:     ArrowLinkShape, RoundedLinkShape,\n    8      BaseNodeItem,\n    9      BaseLinkItem, \n   ..\n   57  \n   58          assert isinstance(k, tuple)\n   59:         link = ArrowLinkShape(f\"{k[1]}\" if k[1] else \"\")\n   60          link.setZValue(-1)\n   61          return link\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphview_with_delegate.py:\n    8  \n    9  from link_graphics_items import makeLineBetweenShapes\n   10: from qgraphics_arrow_item import QGraphicsArrowItem\n   11  \n   12  \n   ..\n   32  \n   33  \n   34: class StandardLinkWidget(QGraphicsArrowItem):\n   35  \tdef __init__(self, parent=None):\n   36  \t\tsuper().__init__(parent=parent)\n   ..\n   69  \t\tgraph.setNodeProperties(n, **props)\n   70  \n   71: \tdef createEdgeWidget(self, graph:'NXGraphModel', source:QGraphicsWidget, target:QGraphicsWidget)->QGraphicsArrowItem:\n   72  \t\tlink = StandardLinkWidget()\n   73  \n   ..\n   82  \t\treturn link\n   83  \n   84: \tdef setEdgeWidgetProps(self, graph:'NXGraphModel', e:Tuple[Hashable, Hashable], widget:QGraphicsArrowItem, **props):\n   85  \t\t...\n   86  \n   87: \tdef setEdgeModelProps(self, graph:'NXGraphModel', e:Tuple[Hashable, Hashable], widget:QGraphicsArrowItem, **props):\n   88  \t\t...\n   89  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\qgraphics_arrow_item.py:\n    4  from PySide6.QtWidgets import *\n    5  \n    6: from pylive.utils.geo import makeArrowShape\n    7  \n    8: class QGraphicsArrowItem(QGraphicsLineItem):\n    9  \tdef shape(self)->QPainterPath:\n   10: \t\treturn makeArrowShape(self.line(), self.pen().width())\n   11  \n   12  \tdef paint(self, painter, option, widget=None):\n   13: \t\t# draw arrow body\n   14  \t\tpainter.setPen(Qt.PenStyle.NoPen)\n   15  \t\tpainter.setBrush(self.pen().color())\n   16: \t\tpath = makeArrowShape(self.line(), self.pen().width())\n   17  \t\tpainter.drawPath(path)\n   18  \n   ..\n   25  \t\n   26  \n   27: \t# create and configure arrow\n   28: \tarrow = QGraphicsArrowItem(0,0,200,200)\n   29: \tarrow.setPen(QPen(QPalette().color(QPalette.ColorRole.Text), 4))\n   30  \n   31: \t# show arrow\n   32  \tscene = QGraphicsScene()\n   33: \tscene.addItem(arrow)\n   34  \tview = QGraphicsView()\n   35  \tview.setRenderHints(QPainter.RenderHint.Antialiasing)\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v4\\graph_editor\\standard_link_widget.py:\n    9  from pylive.utils.geo import makeHorizontalRoundedPath, makeVerticalRoundedPath\n   10  \n   11: from pylive.utils.geo import makeArrowShape\n   12  class StandardLinkPath(QGraphicsLineItem):\n   13      def __init__(self, parent:QGraphicsItem|None=None):\n   ..\n   19  \n   20      def paint(self, painter:QPainter, option:QStyleOption, widget:QWidget|None=None):\n   21:         path = makeArrowShape(self.line(), 2)\n   22          palette = widget.palette() if widget else QPalette()\n   23          painter.setBrush(Qt.BrushStyle.NoBrush)\n   ..\n   40      def paint(self, painter:QPainter, option:QStyleOption, widget:QWidget|None=None):\n   41          path = makeVerticalRoundedPath(self.line())\n   42:         # path = makeArrowShape(self.line(), 2)\n   43  \n   44          palette = widget.palette() if widget else QPalette()\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v5\\layered_layout.py:\n  122              node_color='lightblue', \n  123              node_size=500, \n  124:             arrows=True)\n  125      plt.title(\"Sugiyama Layout Visualization\")\n  126      plt.show()\n\n72 matches across 14 files\n\n\nSearching 355 files for \"QGraphicsArrowItem\"\n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\graph_view.py:\n   14  )\n   15  from pylive.QtGraphEditor.NetrowkXGraphEditor.qgraphics_arrow_item import (\n   16:     QGraphicsArrowItem,\n   17  )\n   18  \n   ..\n   96          self, view, graph, source_node, target_node\n   97      ) -> QGraphicsItem:\n   98:         arrow = QGraphicsArrowItem()\n   99          pen = QPen(view.palette().color(QPalette.ColorRole.Text), 1.5)\n  100          arrow.setPen(pen)\n\nC:\\dev\\src\\pylive\\pylive\\examples\\python_function_graph\\standard_graph_delegate.py:\n   11  )\n   12  from pylive.QtGraphEditor.NetrowkXGraphEditor.qgraphics_arrow_item import (\n   13:     QGraphicsArrowItem,\n   14  )\n   15  from graph_model import GraphModel\n   ..\n   44  \n   45  \n   46: class StandardLinkWidget(QGraphicsArrowItem):\n   47      def __init__(self, parent=None):\n   48          super().__init__(parent=parent)\n   ..\n   88          source: QGraphicsWidget,\n   89          target: QGraphicsWidget,\n   90:     ) -> QGraphicsArrowItem:\n   91          link = StandardLinkWidget()\n   92  \n   ..\n  107          graph: GraphModel,\n  108          e: Tuple[Hashable, Hashable],\n  109:         widget: QGraphicsArrowItem,\n  110          **props\n  111      ):\n  ...\n  116          graph: GraphModel,\n  117          e: Tuple[Hashable, Hashable],\n  118:         widget: QGraphicsArrowItem,\n  119          **props\n  120      ):\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\graphview_with_delegate.py:\n    8  \n    9  from link_graphics_items import makeLineBetweenShapes\n   10: from qgraphics_arrow_item import QGraphicsArrowItem\n   11  \n   12  \n   ..\n   32  \n   33  \n   34: class StandardLinkWidget(QGraphicsArrowItem):\n   35  \tdef __init__(self, parent=None):\n   36  \t\tsuper().__init__(parent=parent)\n   ..\n   69  \t\tgraph.setNodeProperties(n, **props)\n   70  \n   71: \tdef createEdgeWidget(self, graph:'NXGraphModel', source:QGraphicsWidget, target:QGraphicsWidget)->QGraphicsArrowItem:\n   72  \t\tlink = StandardLinkWidget()\n   73  \n   ..\n   82  \t\treturn link\n   83  \n   84: \tdef setEdgeWidgetProps(self, graph:'NXGraphModel', e:Tuple[Hashable, Hashable], widget:QGraphicsArrowItem, **props):\n   85  \t\t...\n   86  \n   87: \tdef setEdgeModelProps(self, graph:'NXGraphModel', e:Tuple[Hashable, Hashable], widget:QGraphicsArrowItem, **props):\n   88  \t\t...\n   89  \n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\qgraphics_arrow_item.py:\n    6  from pylive.utils.geo import makeArrowShape\n    7  \n    8: class QGraphicsArrowItem(QGraphicsLineItem):\n    9  \tdef shape(self)->QPainterPath:\n   10  \t\treturn makeArrowShape(self.line(), self.pen().width())\n   ..\n   26  \n   27  \t# create and configure arrow\n   28: \tarrow = QGraphicsArrowItem(0,0,200,200)\n   29  \tarrow.setPen(QPen(QPalette().color(QPalette.ColorRole.Text), 4))\n   30  \n\n14 matches across 4 files\n\n\nSearching 355 files for \"class QGraphicsArrowItem\"\n\nC:\\dev\\src\\pylive\\pylive\\VisualCode_v1\\qgraphics_arrow_item.py:\n    6  from pylive.utils.geo import makeArrowShape\n    7  \n    8: class QGraphicsArrowItem(QGraphicsLineItem):\n    9  \tdef shape(self)->QPainterPath:\n   10  \t\treturn makeArrowShape(self.line(), self.pen().width())\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 56799,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "pylive/VisualCode_v1/qgraphics_arrow_item.py",
			"settings":
			{
				"buffer_size": 1143,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pylive/examples/python_function_graph/graph_view.py",
			"settings":
			{
				"buffer_size": 10758,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "#####################\n# The Network Scene #\n#####################\n\n#\n# A Graph view that directly connects to PyGraphmodel\n#\n\n\n\nfrom enum import Enum\nfrom typing import *\nfrom PySide6.QtGui import *\nfrom PySide6.QtCore import *\nfrom PySide6.QtWidgets import *\n\nimport traceback\nfrom collections import defaultdict\nfrom textwrap import dedent\nfrom itertools import chain\n\nfrom bidict import bidict\n\n\nfrom pylive.utils.geo import makeLineBetweenShapes, makeLineToShape\nfrom pylive.utils.qt import distribute_items_horizontal\nfrom pylive.utils.unique import make_unique_name\nfrom pylive.utils.diff import diff_set\n\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nfrom pylive.VisualCode_v6.py_graph_model import PyGraphModel\nfrom pylive.utils.evaluate_python import get_function_name\n\n\nfrom py_graph_model import GraphMimeData\n\n\n\n\nclass PyGraphView(QGraphicsView):\n    nodesLinked = Signal(QModelIndex, QModelIndex, str, str)\n\n    def __init__(self, parent:QWidget|None=None):\n        super().__init__(parent=parent)\n        self._model: PyGraphModel | None = None\n        self._model_connections = []\n\n        # store model widget relations\n        # map item index to widgets\n        self._node_widgets:bidict[str, NodeItem] = bidict()\n        self._link_widgets:bidict[tuple[str,str,str,str], LinkItem] = bidict()\n        self._draft_link:QGraphicsLineItem|None=None\n\n        # self._node_in_links:defaultdict[QPersistentModelIndex, list[QPersistentModelIndex]] = defaultdict(list) # Notes: store attached links, because the underlzing model has to find the relevant edges  and thats is O(n)\n        # self._node_out_links:defaultdict[QPersistentModelIndex, list[QPersistentModelIndex]] = defaultdict(list) # Notes: store attached links, because the underlzing model has to find the relevant edges  and thats is O(n)\n\n        self.setupUI()\n\n    def setupUI(self):\n        self.setDragMode(QGraphicsView.DragMode.RubberBandDrag)\n        self.setCacheMode(QGraphicsView.CacheModeFlag.CacheNone)\n        self.setRenderHint(QPainter.RenderHint.Antialiasing, True)\n        self.setRenderHint(QPainter.RenderHint.TextAntialiasing, True)\n        self.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform, True)\n\n        scene = QGraphicsScene()\n        scene.setSceneRect(QRectF(-9999,-9999,9999*2, 9999*2))\n        self.setScene(scene)\n\n    def setModel(self, model:PyGraphModel|None):\n        if self._model:\n            for signal, slot in self._model_connections:\n                signal.disconnect(slot)\n\n        if model:\n            self._model_connections = [\n                # Node Collection\n                (model.modelReset, lambda: \n                    self.resetItems()),\n\n                (model.nodesAdded, lambda nodes: \n                    self.addNodeItems([node_key for node_key in nodes])),\n\n                (model.nodesAboutToBeRemoved, lambda nodes: \n                    self.removeNodeItems([node_key for node_key in nodes])),\n\n                (model.dataChanged, lambda node_keys, hints:\n                    self.updateNodeItems(node_keys, hints)),\n\n                (model.inletsReset, lambda node_keys, model=model:\n                    self.resetInletItems(node_keys)),\n\n                (model.outletsReset, lambda node_keys, model=model:\n                    self.resetOutletItems(node_keys)),\n\n                # Node Links\n                (model.nodesLinked, lambda links:\n                    self.addLinkItems([(source, target, outlet, inlet) for source, target, outlet, inlet in links])\n                    ),\n                (model.nodesAboutToBeUnlinked, lambda links:\n                    self.removeLinkItems([(source, target, outlet, inlet) for source, target, outlet, inlet in links])\n                    ),\n\n                # Ports linked Links\n                (model.nodesLinked, lambda links:\n                    [self.updateInletItems(v, [i]) for u, v, o, i in links]\n                    ),\n                (model.nodesUnlinked, lambda links:\n                    [self.updateInletItems(v, [i]) for u, v, o, i in links]\n                    ),\n                \n            ]\n            for signal, slot in self._model_connections:\n                signal.connect(slot)\n\n        self._model = model\n\n        # populate initial scene\n        self.resetItems()\n\n    def model(self)->PyGraphModel|None:\n        return self._model\n\n    ### Handle Model Signals\n    def resetItems(self):\n        assert self._model\n        ## clear\n        self.scene().clear()\n        self._node_widgets.clear()\n        self._link_widgets.clear()\n\n        ## populate\n        ### nodes\n        self.addNodeItems(self._model.nodes())\n\n        ### inlets\n        for node_key in self._model.nodes():\n            self.resetInletItems([node_key])\n            self.resetOutletItems([node_key])\n\n\n        ### links\n        link_keys = set()\n        for source, target, outlet, inlet in self._model.links():\n            link_keys.add( (source, target, outlet, inlet) )\n        self.addLinkItems(link_keys)\n\n        ## layout\n        self.layoutNodes()        \n\n    ### Node\n    def addNodeItems(self, node_keys:Iterable[str]):\n        for node_key in node_keys:\n            assert isinstance(node_key, str)\n            if node_key not in self._node_widgets:\n                node_widget = NodeItem(model=self._model, key=node_key)\n                self._node_widgets[node_key] = node_widget\n                self.scene().addItem(node_widget)\n                node_widget._view = self\n\n                self.updateNodeItems([node_key])\n                self.resetInletItems([node_key])\n                self.resetOutletItems([node_key])\n            else:\n                self.updateNodeItems([node_key])\n                self.resetInletItems([node_key])\n                self.resetOutletItems([node_key])\n\n    def updateNodeItems(self, node_keys:Iterable[str], hints:list[Literal['source', 'position', 'needs_compilation', 'needs_evaluation', 'error', 'result']]=[]):\n        assert self._model\n        assert all(key in self._node_widgets for key in node_keys), \"{node_keys} some keys are not in graph\"\n        for node_key in node_keys:\n            node_widget = self._node_widgets[node_key]\n            \n            error, value = self._model.data(node_key, 'result')\n            node_widget.debug.setHtml(dedent(f\"\"\"\\\n            <div>\n                {f\"<p style='margin:0; color: red'>🤬 error {error}\" if error else \"\"}\n                {f\"<p style='margin:0; color: green'>😀\" if error is None else \"\"}\n            </div>\n            \"\"\"))\n            assert self._model\n            label_text = self._model.data(node_key, 'label')\n            node_widget.setHeaderText(label_text)\n\n    def removeNodeItems(self, node_keys:list[str]):\n        for key in node_keys:\n            if key in self._node_widgets:\n                node_widget = self._node_widgets[key]\n                del self._node_widgets[key]\n                self.scene().removeItem(node_widget)\n\n    def nodeItem(self, node:str)->'NodeItem':\n        return self._node_widgets[node]\n\n    ### Ports\n    def resetInletItems(self, node_keys:list[str]):\n        assert self._model\n        for node_key in node_keys:\n            node_widget = self._node_widgets[node_key]\n            # clear inlets\n            for item in node_widget._inlet_widgets.values():\n                self.scene().removeItem(item)\n            node_widget._inlet_widgets.clear()\n\n            # insert all\n            inlet_keys = [_ for _ in self._model.inlets(node_key)]\n            self.insertInletItems(node_key, 0, inlet_keys)\n\n        # make sure link has the ports to connect to,\n        # TODO: test it. when an edge connects to an unexistent port, create the port anyway.\n        # the port can display dimmed, to show that its only there, becous the current state of the model is inconsistent.\n        \n        unexistent_inlets = defaultdict(list)\n        for source, target, outlet, inlet in self._link_widgets.keys():\n            if target in node_keys:\n                if inlet not in self._model.inlets(target):\n                    unexistent_inlets[target].append(inlet)\n                    # self.insertOutletItems(node_key, inser_position, )\n\n        for target, inlets in unexistent_inlets.items():\n            insert_position = len(self._model.inlets(target))\n            self.insertInletItems(target, insert_position, inlets)\n\n    def resetOutletItems(self, node_keys:list[str]):\n        assert self._model\n        for node_key in node_keys:\n            node_widget = self._node_widgets[node_key]\n\n            # clear outlets\n            for item in node_widget._outlet_widgets.values():\n                self.scene().removeItem(item)\n            node_widget._outlet_widgets.clear()\n\n            # insert from node outlets\n            outlet_keys = [_ for _ in self._model.outlets(node_key)]\n            self.insertOutletItems(node_key, 0, outlet_keys)\n\n        # make sure link has the ports to connect to,\n        # TODO: test it. when an edge connects to an unexistent port, create the port anyway.\n        # the port can display dimmed, to show that its only there, becous the current state of the model is inconsistent.\n        \n        unexistent_outlets = defaultdict(list)\n        for source, target, outlet, inlet in self._link_widgets.keys():\n            if source in node_keys:\n                if outlet not in self._model.outlets(source):\n                    unexistent_outlets[source].append(outlet)\n                    # self.insertOutletItems(node_key, inser_position, )\n\n        for source, outlets in unexistent_outlets.items():\n            insert_position = len(self._model.outlets(source))\n            self.insertOutletItems(source, insert_position, outlets)\n\n    def insertInletItems(self, node_key:str, index:int, inlet_keys:Iterable[str]):\n        \"\"\"insert inlet item for keys.\n        if the item already exist, update it!\"\"\"\n        assert self._model\n        assert not isinstance(inlet_keys, str)\n        #TODO: index is not yet supported\n        node_widget = self._node_widgets[node_key]\n        for key in inlet_keys:\n            if key not in node_widget._inlet_widgets:\n                widget = InletItem(model=self._model, node=node_key, key=key)\n                widget._view = self\n                node_key = node_key\n                node_widget._inlet_widgets[key] = widget\n                widget.setY(node_widget.boundingRect().top()-widget.boundingRect().bottom())\n                widget.setParentItem(node_widget)\n                self.updateInletItems(node_key, [key])\n            else:\n                self.updateInletItems(node_key, [key])\n        distribute_items_horizontal([_ for _ in node_widget._inlet_widgets.values()], node_widget.boundingRect())\n\n    def insertOutletItems(self, node_key:str, index:int, outlet_keys:Iterable[str]):\n        \"\"\"insert outlet item for keys.\n        if the item already exist, update it!\"\"\"\n        assert self._model\n        assert not isinstance(outlet_keys, str)\n        node_widget = self._node_widgets[node_key]\n        for key in outlet_keys:\n            if key not in node_widget._outlet_widgets.keys():\n                widget = OutletItem(self._model, node_key, key)\n                widget._view = self\n                node_key = node_key\n                node_widget._outlet_widgets[key] = widget\n                widget.setY(node_widget.boundingRect().bottom()-widget.boundingRect().top())\n                widget.setParentItem(node_widget)\n                widget._view = self\n                self.updateOutletItems(node_key, [key])\n            else:\n                self.updateOutletItems(node_key, [key])\n        distribute_items_horizontal([_ for _ in node_widget._outlet_widgets.values()], node_widget.boundingRect())\n\n    def updateInletItems(self, node_key:str, inlet_keys:Iterable[str], hints=[]):\n        \"\"\"update inlet item for keys.\n        raise an exception if the item does not exist\"\"\"\n        assert self._model\n        node_widget = self._node_widgets[node_key]\n        for key in inlet_keys:\n            widget = node_widget._inlet_widgets[key]\n            widget.refresh()\n\n    def updateOutletItems(self, node_key:str, outlet_keys:Iterable[str], hints=None):\n        \"\"\"update inlet item for keys.\n        raise an exception if the item does not exist\"\"\"\n        assert self._model\n        node_widget = self._node_widgets[node_key]\n        for key in outlet_keys:\n            widget = node_widget._outlet_widgets[key]\n            widget.refresh()\n            \n            # move attached links\n            # link_keys = [link.key for link in widget.links]\n            # widget.scenePositionChanged.connect(self.updateLinkItems(link_keys))\n\n    def removeInletItem(self, node_key:str, inlet_keys:Iterable[str]):\n        \"\"\"remove inlet item for keys.\n        raise an exception if the item does not exist\"\"\"\n        assert self._model\n        node_widget = self._node_widgets[node_key]\n        for key in inlet_keys:\n            widget = node_widget._inlet_widgets[key]\n            del node_widget._inlet_widgets[key]\n            self.scene().removeItem(widget)\n            #TODO: remove connected links\n\n    def removeOutletItem(self, node_key:str, outlet_keys:Iterable[str]):\n        \"\"\"remove inlet item for keys.\n        raise an exception if the item does not exist\"\"\"\n        assert self._model\n        node_widget = self._node_widgets[node_key]\n        for key in outlet_keys:\n            widget = node_widget._outlet_widgets[key]\n            del node_widget._outlet_widgets[key]\n            self.scene().removeItem(widget)\n            #TODO: remove connected links\n\n    ### Links\n    def addLinkItems(self, link_keys:Iterable[tuple[str,str,str,str]]):\n        \"\"\"add link items connecting the ports.\n        if inlets, outlets or nodes does not exist, create them\"\"\"\n\n        for link_key in link_keys:\n            source_key, target_key, outlet_key, inlet_key = link_key\n            if source_key not in self._node_widgets:\n                self.addNodeItems([source_key]) #TODO: consider createint missing nodes in one shot\n\n            if outlet_key not in self._node_widgets[source_key]._outlet_widgets.keys():\n                count = len(self._node_widgets[source_key]._outlet_widgets)\n                self.insertOutletItems(source_key, count, [outlet_key])\n\n            if target_key not in self._node_widgets.keys():\n                self.addNodeItems([target_key])\n\n            if inlet_key not in self._node_widgets[target_key]._inlet_widgets.keys():\n                inlets_count = len(self._node_widgets[target_key]._inlet_widgets)\n                self.insertInletItems(target_key, inlets_count, [inlet_key])\n\n\n            inlet_item = self._node_widgets[target_key]._inlet_widgets[inlet_key]\n            outlet_item = self._node_widgets[source_key]._outlet_widgets[outlet_key]\n\n            link_widget = LinkItem(model=self, key=link_key)\n            self._link_widgets[link_key] = link_widget\n            self.scene().addItem(link_widget)\n            link_widget._view = self\n            link_widget.move()\n\n    def updateLinkItems(self, link_keys:Iterable[tuple[str,str,str,str]], hint=None):\n        \"\"\"update link items.\n        raise an exception if linkitem does not exist \"\"\"\n        assert all(key in self._link_widgets for key in link_keys), \"link item does not exist\"\n        for link_key in link_keys:\n            source_key, target_key, outlet_key, inlet_key = link_key\n            link_widget = self._link_widgets[link_key]\n            source_port_item = self._node_widgets[source_key]._outlet_widgets[outlet_key]\n            target_port_item = self._node_widgets[target_key]._inlet_widgets[inlet_key]\n\n            from pylive.utils.geo import makeLineBetweenShapes\n            line = makeLineBetweenShapes(source_port_item, target_port_item)\n            link_widget.setLine(line)\n\n    def removeLinkItems(self, link_keys:Iterable[tuple[str,str,str,str]]):\n        \"\"\"remove link items.\n        raise an exception if linkitem does not exist \"\"\"\n        assert all(key in self._link_widgets for key in link_keys), \"link item does not exist\"\n        for link_key in link_keys:\n            source, target, outlet, inlet = link_key\n            link_widget = self._link_widgets[link_key]\n            del self._link_widgets[link_key]\n            self.scene().removeItem(link_widget)\n    \n    ### DRAG links and ports\n    def _createDraftLink(self):\n        \"\"\"Safely create draft link with state tracking\"\"\"\n        assert self._draft_link is None\n            \n        self._draft_link = QGraphicsLineItem()\n        self._draft_link.setPen(QPen(self.palette().text(), 1))\n        self.scene().addItem(self._draft_link)\n \n    def _cleanupDraftLink(self):\n        \"\"\"Safely cleanup draft link\"\"\"\n        assert self._draft_link\n        self.scene().removeItem(self._draft_link)\n        self._draft_link = None\n\n    ### Layout\n    def centerNodes(self):\n        self.centerOn(self.scene().itemsBoundingRect().center())\n\n    def layoutNodes(self, orientation=Qt.Orientation.Vertical, scale=100):\n        assert self._model, f\"bad _model, got: {self._model}\"\n        # from pylive.utils.graph import hiearchical_layout_with_nx, hiearchical_layout_with_grandalf\n        import networkx as nx\n        G = self._model._toNetworkX()\n        layers = {layer:nodes for layer, nodes in enumerate(nx.topological_generations(G))}\n        pos = nx.multipartite_layout(G, \n            subset_key=layers, \n            align='horizontal' if Qt.Orientation.Vertical else 'vertical', \n            scale=100)\n\n        for node_key, (x, y) in pos.items():\n            if node_widget := self._node_widgets[node_key]:\n                node_widget.setPos(x, y)\n\n    ### Selection\n    def selectedNodes(self)->list[str]:\n        selected = []\n        for node_key, node_item in self._node_widgets.items():\n            if node_item.isSelected():\n                selected.append(node_key)\n\n        return selected\n\n    def selectNodes(self, node_selection:Iterable[str]):\n        next_node_selection = set(self._node_widgets[_] for _ in node_selection)\n        prev_node_selection = set(_ for _ in self.scene().selectedItems())\n\n        change = diff_set(prev_node_selection, next_node_selection)\n        self.blockSignals(True)\n        for item in change.removed:\n            assert isinstance(item, NodeItem)\n            item.setSelected(False)\n        for item in change.added:\n            assert isinstance(item, NodeItem)\n            item.setSelected(True)\n        self.blockSignals(False)\n\n    def dragEnterEvent(self, event: QDragEnterEvent) -> None:\n        super().dragEnterEvent(event)\n\n    def dragMoveEvent(self, event: QDragMoveEvent) -> None:\n        super().dragMoveEvent(event)\n        if event.isAccepted():\n            return\n\n        if event.mimeData().hasFormat(GraphMimeData.OutletData):\n            source_node, outlet = event.mimeData().data(GraphMimeData.OutletData).toStdString().split(\"/\")\n            source_item = self._node_widgets[source_node]._outlet_widgets[outlet]\n            if self._draft_link:\n                line = self._draft_link.line()\n                mouse_scene_pos = self.mapToScene(event.position().toPoint())\n                line = makeLineBetweenShapes(source_item, mouse_scene_pos)\n                self._draft_link.setLine(line)\n\n\n        if event.mimeData().hasFormat(GraphMimeData.InletData):\n            target_node, inlet = event.mimeData().data(GraphMimeData.InletData).toStdString().split(\"/\")\n            target_item = self._node_widgets[target_node]._inlet_widgets[inlet]\n            if self._draft_link:\n                line = self._draft_link.line()\n                mouse_scene_pos = self.mapToScene(event.position().toPoint())\n                line = makeLineBetweenShapes(mouse_scene_pos, target_item)\n                self._draft_link.setLine(line)\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkSourceData):\n            link_key = event.mimeData().data(GraphMimeData.LinkSourceData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            source_item = self._node_widgets[source]._outlet_widgets[outlet]\n            target_item = self._node_widgets[target]._inlet_widgets[inlet]\n\n            if self._draft_link:\n                line = self._draft_link.line()\n                mouse_scene_pos = self.mapToScene(event.position().toPoint())\n                line = makeLineBetweenShapes(source_item, mouse_scene_pos)\n                self._draft_link.setLine(line)\n                event.acceptProposedAction() # Todo: accept delete action\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkTargetData):\n            link_key = event.mimeData().data(GraphMimeData.LinkTargetData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            source_item = self._node_widgets[source]._outlet_widgets[outlet]\n            target_item = self._node_widgets[target]._inlet_widgets[inlet]\n\n            if self._draft_link:\n                line = self._draft_link.line()\n                mouse_scene_pos = self.mapToScene(event.position().toPoint())\n                line = makeLineBetweenShapes(mouse_scene_pos, target_item)\n                self._draft_link.setLine(line)\n                event.acceptProposedAction() # Todo: accept delete action\n\n    def dropEvent(self, event: QDropEvent) -> None:\n        super().dropEvent(event)\n        # if event.isAccepted():\n        #     return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkSourceData):\n            assert self._model\n            link_key = event.mimeData().data(GraphMimeData.LinkSourceData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            self._model.unlinkNodes(source, target, outlet, inlet)\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkTargetData):\n            assert self._model\n            link_key = event.mimeData().data(GraphMimeData.LinkTargetData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            self._model.unlinkNodes(source, target, outlet, inlet)\n\n\nclass PortItem(QGraphicsItem):\n    def __init__(self, parent:QGraphicsItem|None=None):\n        super().__init__(parent=parent)\n        self._label = QGraphicsTextItem(f\"-port-\")\n        self._label.setParentItem(self)\n        self._label.setPos(0,-25)\n        self._label.hide()\n        self.setAcceptHoverEvents(True)\n        r = 3\n        # self.setGeometry(QRectF(-r,-r,r*2,r*2))\n        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemSendsScenePositionChanges, True)\n        self._view:PyGraphView|None = None\n\n    def hoverEnterEvent(self, event: QGraphicsSceneHoverEvent) -> None:\n        self._label.show()\n        super().hoverEnterEvent(event)\n\n    def hoverLeaveEvent(self, event: QGraphicsSceneHoverEvent, /) -> None:\n        self._label.hide()\n        super().hoverLeaveEvent(event)\n\n    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value: Any) -> Any:\n        if change == QGraphicsItem.GraphicsItemChange.ItemScenePositionHasChanged:\n            assert self._view\n            assert self._view._model\n            node_widget = self.parentItem()\n            assert isinstance(node_widget, NodeItem)\n            inlink_keys = self._view._model.inLinks(node_widget.key)\n            outlink_keys = self._view._model.outLinks(node_widget.key)\n            link_keys = list(chain(inlink_keys, outlink_keys))\n\n            for link_key in link_keys:\n                if link_item := self._view._link_widgets.get(link_key):\n                    link_item.move()\n        return super().itemChange(change, value)\n\n    def boundingRect(self) -> QRectF:\n        r = 3\n        return QRectF(-r,-r,r*2,r*2).adjusted(-3,-3,3,3)\n\n    def shape(self):\n        r = 3\n        path = QPainterPath()\n        path.addEllipse(QRectF(-r,-r,r*2,r*2))\n        return path\n\n    def paint(self, painter:QPainter, option:QStyleOption, widget:QWidget|None=None):\n        palette = widget.palette() if widget else QApplication.palette()\n        painter.setPen(Qt.PenStyle.NoPen)\n        painter.setBrush(palette.text())\n        if QStyle.StateFlag.State_MouseOver in option.state:\n            painter.setBrush(palette.accent())\n        r = 3\n        painter.drawEllipse(QRectF(-r,-r,r*2,r*2))\n\n\nclass InletItem(PortItem):\n    def __init__(self, model:PyGraphModel, node:str, key: str, parent: QGraphicsItem | None = None):\n        super().__init__(parent)\n        self.setAcceptHoverEvents(True)\n        self.setAcceptDrops(True)\n        self.model = model\n        self.node = node\n        self.key = key\n\n    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None:\n        # Setup new drag\n        assert self._view\n        node_widget = self.parentItem()\n        assert isinstance(node_widget, NodeItem)\n\n        mime = QMimeData()\n        mime.setData(GraphMimeData.InletData, f\"{node_widget.key}/{self.key}\".encode(\"utf-8\"))\n        drag = QDrag(self._view)\n        drag.setMimeData(mime)\n\n        # Create visual feedback\n        assert self._view\n        self._view._createDraftLink()\n\n        # Execute drag\n        try:\n            action = drag.exec(Qt.DropAction.CopyAction)\n        except Exception as err:\n            traceback.print_exc()\n        finally:\n            self._view._cleanupDraftLink()\n\n    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.OutletData):\n            assert self._view\n            assert self._view._model\n            node_widget = self.parentItem()\n            assert isinstance(node_widget, NodeItem)\n            node_key = node_widget.key\n\n            event.acceptProposedAction()\n            return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkSourceData):\n            assert self._view\n            assert self._view._model\n            node_widget = self.parentItem()\n            assert isinstance(node_widget, NodeItem)\n            node_key = node_widget.key\n            event.acceptProposedAction()\n            return\n\n    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.OutletData):\n            assert self._view\n            source_node, outlet = event.mimeData().data(GraphMimeData.OutletData).toStdString().split(\"/\")\n            source_item = self._view._node_widgets[source_node]._outlet_widgets[outlet]\n            if self._view._draft_link:\n                line = self._view._draft_link.line()\n                line = makeLineBetweenShapes(source_item, self)\n                self._view._draft_link.setLine(line)\n                event.acceptProposedAction()\n                return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkSourceData):\n            assert self._view\n            link_key = event.mimeData().data(GraphMimeData.LinkSourceData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            source_item = self._view._node_widgets[source]._outlet_widgets[outlet]\n            if self._view._draft_link:\n                line = self._view._draft_link.line()\n                line = makeLineBetweenShapes(source_item, self)\n                self._view._draft_link.setLine(line)\n                event.acceptProposedAction()\n                return\n        return super().dragMoveEvent(event)\n\n    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.OutletData):\n            assert self._view\n            assert self._view._model\n            source_node, source_outlet = event.mimeData().data(GraphMimeData.OutletData).toStdString().split(\"/\")\n            \n            node_widget = self.parentItem()\n            assert isinstance(node_widget, NodeItem)\n            target_node_key = node_widget.key\n            target_inlet_key = self.key\n            self._view._model.linkNodes(source_node, target_node_key, source_outlet, target_inlet_key)\n            event.acceptProposedAction()\n            return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkSourceData):\n            assert self._view\n            assert self._view._model\n            link_key = event.mimeData().data(GraphMimeData.LinkSourceData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            # unlink current\n            self._view._model.unlinkNodes(source, target, outlet, inlet)\n\n            # link source with new target\n            node_widget = self.parentItem()\n            assert isinstance(node_widget, NodeItem)\n            target_node_key = node_widget.key\n            target_inlet_key = self.key\n            self._view._model.linkNodes(source, target_node_key, outlet, target_inlet_key)\n            event.acceptProposedAction()\n            return\n\n        return super().dragMoveEvent(event)\n\n    def boundingRect(self) -> QRectF:\n        flags = self.model.inletFlags(self.node, self.key)\n        r = 3\n        if 'multi' in flags:\n            return QRectF(-r,-r, r*4, r*2).adjusted(-3,-3,3,3)\n        else:\n            return QRectF(-r,-r,r*2,r*2).adjusted(-3,-3,3,3)\n\n    def shape(self):\n        flags = self.model.inletFlags(self.node, self.key)\n        path = QPainterPath()\n        r = 3\n        if 'multi' in flags:\n            path.addRoundedRect(-r,-r, r*4, r*2, r, r)\n        else:\n            path.addEllipse(QRectF(-r,-r,r*2,r*2))\n        \n        return path\n\n    def paint(self, painter:QPainter, option:QStyleOption, widget:QWidget|None=None):\n        flags = self.model.inletFlags(self.node, self.key)\n        palette = widget.palette() if widget else QApplication.palette()\n        painter.setPen(Qt.PenStyle.NoPen)\n        painter.setBrush(palette.text())\n\n\n        if QStyle.StateFlag.State_MouseOver in option.state:\n            painter.setBrush(palette.accent())\n\n        if 'required' in flags and not self.model.isInletLinked(self.node, self.key):\n            painter.setBrush(QBrush(\"red\"))\n\n        r = 3\n        if 'multi' in flags:\n            painter.drawRoundedRect(-r,-r, r*4, r*2, r, r)\n        else:\n            \n            if 'extra' in flags:\n                painter.setPen(QPen(palette.text(), 1))\n                painter.setBrush(Qt.BrushStyle.NoBrush)\n                painter.drawText(QRectF(-r+2.45,-r-0.1,r,r).adjusted(-2,-2,2,2), \"+\", QTextOption(Qt.AlignmentFlag.AlignCenter))\n            else:\n                painter.drawEllipse(QRectF(-r,-r,r*2,r*2))\n\n    def refresh(self):\n        self._label.setPlainText(f\"{self.key}\")\n        self.prepareGeometryChange()\n        self.update()\n\n\nclass OutletItem(PortItem):\n    def __init__(self, model:PyGraphModel, node:str, key: str, parent: QGraphicsItem | None = None):\n        super().__init__(parent)\n        self.setAcceptHoverEvents(True)\n        self.setAcceptDrops(True)\n        self.model = model\n        self.node = node\n        self.key = key\n        self._view:PyGraphView|None = None\n\n    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None:\n        # Setup new drag\n        assert self._view\n        node_widget = self.parentItem()\n        assert isinstance(node_widget, NodeItem)\n\n        mime = QMimeData()\n        mime.setData(GraphMimeData.OutletData, f\"{node_widget.key}/{self.key}\".encode(\"utf-8\"))\n        drag = QDrag(self._view)\n        drag.setMimeData(mime)\n\n        # Create visual feedback\n        assert self._view\n        self._view._createDraftLink()\n\n        # Execute drag\n        try:\n            action = drag.exec(Qt.DropAction.CopyAction)\n        except Exception as err:\n            traceback.print_exc()\n        finally:\n            self._view._cleanupDraftLink()\n\n    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.InletData):\n            event.acceptProposedAction() # Todo: set accepted action\n            return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkTargetData):\n            event.acceptProposedAction()\n            return\n\n    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.InletData):\n            assert self._view\n            target_node, inlet = event.mimeData().data(GraphMimeData.InletData).toStdString().split(\"/\")\n            target_item = self._view._node_widgets[target_node]._inlet_widgets[inlet]\n            if self._view._draft_link:\n                line = self._view._draft_link.line()\n                line = makeLineBetweenShapes(self, target_item)\n                self._view._draft_link.setLine(line)\n                event.acceptProposedAction()\n                return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkTargetData):\n            assert self._view\n            link_key = event.mimeData().data(GraphMimeData.LinkTargetData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            source_item = self._view._node_widgets[source]._inlet_widgets[outlet]\n            if self._view._draft_link:\n                line = self._view._draft_link.line()\n                line = makeLineBetweenShapes(source_item, self)\n                self._view._draft_link.setLine(line)\n                event.acceptProposedAction()\n                return\n\n        return super().dragMoveEvent(event)\n\n    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None:\n        if event.mimeData().hasFormat(GraphMimeData.InletData):\n            assert self._view\n            assert self._view._model\n            target_node, inlet = event.mimeData().data(GraphMimeData.InletData).toStdString().split(\"/\")\n\n            self._view._model.linkNodes(cast(NodeItem, self.parentItem()).key, target_node, self.key, inlet)\n            event.acceptProposedAction()\n            return\n\n        if event.mimeData().hasFormat(GraphMimeData.LinkTargetData):\n            assert self._view\n            assert self._view._model\n            link_key = event.mimeData().data(GraphMimeData.LinkTargetData).toStdString().split(\"/\")\n            source, target, outlet, inlet = link_key\n            # unlink current\n            self._view._model.unlinkNodes(source, target, outlet, inlet)\n\n            # link source with new target\n            self._view._model.linkNodes(source, cast(NodeItem, self.parentItem()).key, outlet, self.key)\n            event.acceptProposedAction()\n            return\n\n        return super().dragMoveEvent(event)\n\n    def refresh(self):\n        self._label.setPlainText(f\"{self.key}\")\n        self.update()\n\n\nclass NodeItem(QGraphicsWidget):\n    # scenePositionChanged = Signal()\n    def __init__(self, model:PyGraphModel|None, key:str, parent:QGraphicsItem|None=None):\n        super().__init__(parent=parent)\n        self.model = model\n        self.key:str = key\n        self._header_text = f\"{self.key}\"\n\n        self._inlet_widgets:bidict[str, InletItem] = bidict()\n        self._outlet_widgets:bidict[str, OutletItem] = bidict()\n\n        self._view:PyGraphView|None = None\n\n        self.debug = QGraphicsTextItem(\"debug\")\n        self.debug.setParentItem(self)\n        self.debug.setPos(self.boundingRect().left(), self.boundingRect().bottom())\n\n        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsMovable, True)\n        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemIsSelectable, True)\n        self.setFlag(QGraphicsItem.GraphicsItemFlag.ItemSendsScenePositionChanges, True)\n\n    def headerText(self)->str:\n        return self._header_text\n\n    def setHeaderText(self, text:str):\n        # print(\"set header text\", text)\n        self._header_text = text\n        self.prepareGeometryChange()\n        self.update()\n\n    def font(self):\n        if widget:=self.parentWidget():\n            return widget.font()\n\n        if scene :=self.scene():\n            return scene.font()\n\n        app = QApplication.instance()\n        if isinstance(app, QGuiApplication):\n            return app.font()\n        \n        raise NotImplementedError()\n\n    def palette(self)->QPalette:\n        if widget:=self.parentWidget():\n            return widget.palette()\n\n        if scene :=self.scene():\n            return scene.palette()\n\n        app = QApplication.instance()\n        if isinstance(app, QGuiApplication):\n            return app.palette()\n        \n        raise NotImplementedError()\n\n    def boundingRect(self) -> QRectF:\n        # return QRectF(0,0,80,16)\n        fm = QFontMetrics(self.font())\n        bbox = fm.boundingRect(f\"{self._header_text}\")\n        return bbox.adjusted(-6,-2,6,2)\n\n    def shape(self)->QPainterPath:\n        path = QPainterPath()\n        path.addRect( self.boundingRect() )\n        return path\n\n    def paint(self, painter: QPainter, option:QStyleOption, widget=None):\n        rect = option.rect\n        pen = painter.pen()\n        pen.setBrush(self.palette().text())\n        if self.isSelected():\n            pen.setBrush(self.palette().accent())\n        painter.setPen(pen)\n\n        painter.drawRoundedRect(rect, 6,6)\n        painter.drawText(rect, f\"{self._header_text}\", QTextOption(Qt.AlignmentFlag.AlignCenter))\n\n\nclass LinkItem(QGraphicsLineItem):\n    def __init__(self, model:PyGraphModel, key:tuple[str,str,str,str], parent:QGraphicsItem|None=None):\n        super().__init__(parent=parent)\n        self.model = model\n        self.key:tuple[str,str,str,str] = key\n        self.setLine(0,0,10,10)\n        self.setPen(QPen(self.palette().text(), 1))\n\n        self.setAcceptHoverEvents(True)\n        self._view:PyGraphView|None = None\n\n    def move(self):\n        assert self._view\n        source, target, outlet, inlet = self.key\n        source = self._view._node_widgets[source]._outlet_widgets[outlet]\n        target = self._view._node_widgets[target]._inlet_widgets[inlet]\n\n        self.setLine( makeLineBetweenShapes(source, target) )\n\n    def palette(self)->QPalette:\n        if widget:=self.parentWidget():\n            return widget.palette()\n\n        if scene :=self.scene():\n            return scene.palette()\n\n        app = QApplication.instance()\n        if isinstance(app, QGuiApplication):\n            return app.palette()\n        \n        raise NotImplementedError()\n\n    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None:\n        assert self._view\n        d1 = (event.scenePos() - self.line().p1()).manhattanLength()\n        d2 = (event.scenePos() - self.line().p2()).manhattanLength()\n        if d1 < d2:\n            mime = QMimeData()\n            source, target, outlet, inlet = self.key\n            mime.setData(GraphMimeData.LinkTargetData, f\"{source}/{target}/{outlet}/{inlet}\".encode(\"utf-8\"))\n            drag = QDrag(self._view)\n            drag.setMimeData(mime)\n            \n            # Execute drag\n            self._view._draft_link = self\n            try:\n                action = drag.exec(Qt.DropAction.TargetMoveAction)\n            except Exception as err:\n                traceback.print_exc()\n            finally:\n                self._view._draft_link = None\n                self.move()\n        else:\n            mime = QMimeData()\n            source, target, outlet, inlet = self.key\n            mime.setData(GraphMimeData.LinkSourceData, f\"{source}/{target}/{outlet}/{inlet}\".encode(\"utf-8\"))\n            drag = QDrag(self._view)\n            drag.setMimeData(mime)\n            \n            # Execute drag\n            self._view._draft_link = self\n            try:\n                action = drag.exec(Qt.DropAction.TargetMoveAction)\n            except Exception as err:\n                traceback.print_exc()\n            finally:\n                self._view._draft_link = None\n                self.move()\n\n    def mouseMoveEvent(self, event):\n        ...\n            \n    def paint(self, painter:QPainter, option:QStyleOption, widget:QWidget|None=None):\n        painter.setPen( QPen(self.palette().text(), 1) )\n        if QStyle.StateFlag.State_MouseOver in option.state:\n            painter.setPen( QPen(self.palette().accent(), 1) )\n        painter.drawLine(self.line())\n\n\ndef main():\n    app = QApplication()\n\n    class Window(QWidget):\n        def __init__(self, parent: QWidget | None = None) -> None:\n            super().__init__(parent=parent)\n            self._model=PyGraphModel()\n            self._model.fromData({\n                    'nodes':[\n                    {\n                        'name': \"two\",\n                        'func_name': \"\"\"def two():\\n    return 2\"\"\"\n                    },\n                    {\n                        'name': \"three\",\n                        'source': \"\"\"def three():\\n    return 3\"\"\"\n                    },\n                    {\n                        'name': \"mult\",\n                        'source': \"\"\"def mult(x, y):\\n    return x*y\"\"\",\n                        'fields':{\n                            'x':\"->two\",\n                            'y':\"->three\"\n                        }\n                    }\n                ]\n            })\n            self.setupUI()\n            self.action_connections = []\n            self.bindView()\n\n            self.graphview.layoutNodes()\n\n        def setupUI(self):\n            self.graphview = PyGraphView()\n            self.graphview.setWindowTitle(\"NXNetworkScene\")\n\n            self.create_node_action = QPushButton(\"create node\", self)\n            self.delete_action = QPushButton(\"delete\", self)\n            self.link_selected_action = QPushButton(\"connect selected\", self)\n            self.layout_action = QPushButton(\"layout nodes\", self)\n            self.layout_action.setDisabled(False)\n\n            buttons_layout = QVBoxLayout()\n            buttons_layout.addWidget(self.create_node_action)\n            buttons_layout.addWidget(self.delete_action)\n            buttons_layout.addWidget(self.link_selected_action)\n            buttons_layout.addWidget(self.layout_action)\n            grid_layout = QGridLayout()\n            grid_layout.addLayout(buttons_layout, 0, 0)\n            grid_layout.addWidget(self.graphview, 0, 1, 3, 1)\n\n            self.setLayout(grid_layout)\n\n        def bindView(self):\n            self.graphview.setModel(self._model)\n\n            self.action_connections = [\n                (self.create_node_action.clicked, lambda: self.create_node()),\n                (self.delete_action.clicked, lambda: self.delete_selected()),\n                (self.link_selected_action.clicked, lambda: self.link_selected()),\n                (self.layout_action.clicked, lambda: self.graphview.layoutNodes())\n            ]\n            for signal, slot in self.action_connections:\n                signal.connect(slot)\n\n        ### commands\n        @Slot()\n        def create_node(self):\n            assert self._model\n            unique_name = make_unique_name(\"node0\", self._model.nodes())\n            self._model.addNode(unique_name)\n\n        @Slot()\n        def link_selected(self):\n            ...\n\n        @Slot()\n        def delete_selected(self):\n            # either a node or an inlet\n            ...        \n\n\n    window = Window()\n    window.show()\n    app.exec()\n\nif __name__ == \"__main__\":\n    main()\n\n",
			"file": "pylive/VisualCode_v6/py_graph_view.py",
			"file_size": 44157,
			"file_write_time": 133869393464733407,
			"settings":
			{
				"buffer_size": 43070,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					127,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGYDAAAAAAAAZwMAAAAAAAAAAAAAZwMAAAAAAABoAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAZgMAAAAAAABmAwAAAAAAAAAAAAAAAPC/AQAAAAEAAAD4AwAAAAAAAPgDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pylive/utils/__init__.py",
			"settings":
			{
				"buffer_size": 1196,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Create a TreeModel with pyside6\nsimpler, but similar to QStandardItemModel\nimplement the Treemodel, and TreeItem as well.\nThe model and the item should be editable\n\nCreate a TreeModel with pyside6 simpler, but similar to QStandardItemModel implement the Treemodel, and TreeItem as well. The model and the item should be editable.\n\nwhen an item is edited directly eg. data is set or children are added or removed, etc. The model signals are supposed to emit.",
			"settings":
			{
				"buffer_size": 457,
				"line_ending": "Windows",
				"name": "Create a TreeModel with pyside6"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAJAEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAowAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "pylive/VisualCode_v4/graph_editor/graph_editor_view.py",
			"settings":
			{
				"buffer_size": 64959,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "rlink"
					},
					"BQAAAJEFAAAAAAAAkgUAAAAAAAAAAAAAkgUAAAAAAACTBQAAAAAAAAAAAACTBQAAAAAAAJQFAAAAAAAAAAAAAJQFAAAAAAAAlQUAAAAAAAAAAAAAlQUAAAAAAACWBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQUAAAAAAACRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "rlink"
					},
					"AQAAAJYFAAAAAAAAmwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgUAAAAAAACWBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/VisualCode_v5/py_proxy_node_model.py",
			"settings":
			{
				"buffer_size": 7942,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pylive/VisualCode_v1/graphview_columnbased.py",
			"settings":
			{
				"buffer_size": 36286,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "expreiments/ColorGrade_with_Edifice/OpenGLTextureItem.py",
			"settings":
			{
				"buffer_size": 1235,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA0wQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "expreiments/ColorGrade_with_Edifice/NumpyImageViewer.py",
			"settings":
			{
				"buffer_size": 1499,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAXwAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "expreiments/ColorGrade_with_Edifice/fileinput.py",
			"settings":
			{
				"buffer_size": 974,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "from edifice import CustomWidget"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAawMAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " edifice"
					},
					"CAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEwAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " Custom"
					},
					"BwAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "CustomWidget",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CustomWidget"
					},
					"AgAAABQAAAAAAAAAFAAAAAAAAAAGAAAAQ3VzdG9tFAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " Py"
					},
					"AwAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "PySide6"
					},
					"AgAAACYAAAAAAAAAJgAAAAAAAAACAAAAUHkmAAAAAAAAAC0AAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": ".QtW"
					},
					"BAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":12,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QtWidgets"
					},
					"AgAAAC4AAAAAAAAALgAAAAAAAAADAAAAUXRXLgAAAAAAAAA3AAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " QPi"
					},
					"BAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAEEAAAAAAAAAQQAAAAAAAAABAAAAaQ",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCAAAAAAAAAEIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "ush"
					},
					"AwAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBAAAAAAAAAEEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QPushButton"
					},
					"AgAAAD8AAAAAAAAAPwAAAAAAAAAFAAAAUVB1c2g/AAAAAAAAAEoAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAAAAAAAAAEQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEoAAAAAAAAASwAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKAAAAAAAAAEoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " Props"
					},
					"BgAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "PropsDiff"
					},
					"AgAAACIAAAAAAAAAIgAAAAAAAAAFAAAAUHJvcHMiAAAAAAAAACsAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFUAAAAAAAAAVgAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAAAAAAAAAFUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " QFile"
					},
					"BgAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWAAAAAAAAAFYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QFileDialog"
					},
					"AgAAAFcAAAAAAAAAVwAAAAAAAAAFAAAAUUZpbGVXAAAAAAAAAGIAAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "expreiments/ColorGrade_with_Edifice/utils.py",
			"settings":
			{
				"buffer_size": 422,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAigEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "262500412"
					},
					"CQAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAQAAAAAAAIoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "76056"
					},
					"BQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAAlwEAAAAAAACYAQAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAQAAAAAAAJMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "2929"
					},
					"BAAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAACaAQAAAAAAAJsBAAAAAAAAAAAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYAQAAAAAAAJgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAIoBAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACUAQAAAAAAAAAAAACLAQAAAAAAAIsBAAAAAAAABAAAACAgICA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAQAAAAAAAIoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJQBAAAAAAAAlQEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJkBAAAAAAAAmgEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAQAAAAAAAJkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ4BAAAAAAAAnwEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAQAAAAAAAJ4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKEBAAAAAAAAogEAAAAAAAAAAAAA",
					"CwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAQAAAAAAAKEBAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"termin",
				"Terminal: Open in project folder"
			],
			[
				"deb",
				"Debugger: Open"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"debu",
				"Package Control: Disable Debug Mode"
			],
			[
				"debug",
				"Package Control: Enable Debug Mode"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"termi",
				"Terminal: Open in project folder"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"termina",
				"Terminal: Open in project folder"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"unfo",
				"Code Folding: Unfold All"
			],
			[
				"fold",
				"Code Folding: Fold All"
			],
			[
				"pyri",
				"Preferences: LSP-pyright Settings"
			],
			[
				"debugg",
				"Debugger: Quit"
			],
			[
				"debugger: st",
				"Debugger: Start (no debug)"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 118.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/VisualCode_v6",
		"/C/dev/src/pylive/pylive/VisualCode_v6/QItemGraph"
	],
	"file_history":
	[
		"/C/dev/src/pylive/pylive/VisualCode_v6/views/inspector_view.py",
		"/C/dev/src/pylive/expreiments/animate_numpy_image_to_qimage.py",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/pylive/VisualCode_v6/main.py",
		"/C/dev/src/pylive/expreiments/acr_editor.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/edifice/engine.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/edifice/base_components/base_components.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/py_proxy_node_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/views/preview.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/py_graph_model.py",
		"/C/dev/src/pylive/pylive/qt_components/QPathEdit.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/imports_manger.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/operator_browser.py",
		"/C/FlexLm/license.dat",
		"/C/Users/and/AppData/Local/Temp/d807a2b3-9801-47cf-b9be-1771ba2ff362_Deadline 10.3 3dsmax2025_support.zip.362/3dsmax2025_support/3dsmax2025_submitter_plugin_support/README",
		"/C/Users/and/AppData/Local/Temp/284af53c-d67f-4708-8d53-d62105db827f_Deadline 10.3 3dsmax2025_support.zip.27f/3dsmax2025_support/3dsmax2025_submitter_plugin_support/3dsmax.param",
		"/C/Users/and/AppData/Local/Temp/f819e244-f50c-4e6d-83cd-6932a493d27f_Deadline 10.3 3dsmax2025_support.zip.27f/3dsmax2025_support/3dsmax2025_submitter_plugin_support/README",
		"/R/_Hasznos/Deadline/Deadline 10.3 3dsmax2025_support/3dsmax2025_support/3dsmax2025_submitter_plugin_support/README",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0/Lib/ast.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/py_graph_view.py",
		"/C/dev/src/pylive/pylive/utils/evaluate_python.py",
		"/C/dev/src/pylive/pylive/utils/qtfactory.py",
		"/C/dev/src/pylive/expreiments/embed_pyedifice.py",
		"/C/ffmpeg/INSTALL.md",
		"/C/dev/src/pylive/.venv/Lib/site-packages/PySide6/QtWidgets.pyi",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/dummy.yaml",
		"/C/dev/src/pylive/tests/test_parse_expression.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/test_py_graph_model.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0/Lib/inspect.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/dummy_graph.py",
		"/C/dev/src/pylive/expreiments/live_coding/with_jurigged/main.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/utils.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.12_3.12.2544.0_x64__qbz5n2kfra8p0/Lib/importlib/__init__.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/expression_parser.py",
		"/C/dev/src/pylive/pylive/utils/qt.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/test_py_graph_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/dissertation_builder.yaml",
		"/C/dev/src/pylive/.venv/Lib/site-packages/bidict/_base.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.13_3.13.752.0_x64__qbz5n2kfra8p0/Lib/importlib/__init__.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/PySide6/QtCore.pyi",
		"/C/dev/src/pylive/pylive/VisualCode_v6/modules_browser_experimental.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/modules_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/py_modules_browser.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/tests/dissertation_builder.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/py_proxy_link_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v6/PyNodeWidget.py",
		"/C/Users/andris/iCloudDrive/iCloud~md~obsidian/DisszertacioNotes/WEB edition/main.py",
		"/C/dev/src/pylive/pylive.sublime-project",
		"/C/dev/src/pylive/pylive/VisualCode_v5/main.py",
		"/C/Users/andris/AppData/Local/Temp/285_font1_text.txt",
		"/C/dev/src/pylive/pylive/utils/graph.py",
		"/C/Users/andris/AppData/Local/Temp/480_XYZ_to_Color2_python.py",
		"/C/dev/src/pylive/pylive/VisualCode_v5/layered_layout.py",
		"/C/dev/src/pylive/pylive/VisualCode_v5/py_graph_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v5/py_graph_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v5/py_proxy_node_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_node_widget.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/test_py_proxy_models.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_data_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_proxy_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_data_graph_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/main.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/test_py_data_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/hello_masa.yaml",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/say_hello_script.yaml",
		"/C/Users/andris/AppData/Local/Sublime Text/Package Storage/LSP-pyright/18.15.0/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/builtins.pyi",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_inspector_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/test_subgraph_proxy_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_preview_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_subgraph_proxy_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graphtree_editor_view.py",
		"/C/dev/src/pylive/pylive/utils/bilist.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graph_editor_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/standard_link_widget.py",
		"/C/Users/andris/AppData/Local/Sublime Text/Package Storage/LSP-pyright/18.15.0/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/logging/__init__.pyi",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_graph_view_delegate.py",
		"/C/Users/andris/AppData/Local/Sublime Text/Package Storage/LSP-pyright/18.15.0/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/_typeshed/__init__.pyi",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/standard_node_widget.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graph_editor_view_from_tree_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/math_script.yaml",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/website_builder.yaml",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_graph_model.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/yaml/scanner.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/yaml/parser.py",
		"/C/dev/src/pylive/history.md",
		"/C/dev/src/pylive/ReadMe.md",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_nodes_model.py",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/roadmap.md",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/VisualCode_v1/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/standard_graph_delegate.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/numpy/typing/tests/data/fail/shape_base.pyi",
		"/C/dev/src/pylive/.venv/Lib/site-packages/fontTools/svgLib/path/shapes.py",
		"/C/dev/src/pylive/pylive/VisualCode_NetworkX/UI/nx_graph_shapes.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/examples/livegraph.py",
		"/C/dev/src/pylive/expreiments/qml/master_details_view_editable_person/main_pyside.py",
		"/C/dev/src/pylive/expreiments/qml/master_details_view/main_pyside.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_completer.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/algorithms/dag.py",
		"/C/dev/src/pylive/tests/test_unique.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graph_data_roles.py",
		"/C/dev/src/pylive/pylive/utils/unique.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/standard_edges_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/PyDataModel.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/experimental_py_graph_model.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/node_inspector_widget.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/py_graph_item.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/graph_editor/node_data_roles.py",
		"/C/Program Files/WindowsApps/PythonSoftwareFoundation.Python.3.13_3.13.752.0_x64__qbz5n2kfra8p0/Lib/dataclasses.py",
		"/C/dev/src/pylive/expreiments/qml/master_details_view/main.qml",
		"/C/dev/src/pylive/expreiments/qml/master_details_view/main_pyqt.py",
		"/C/dev/src/pylive/expreiments/qml/backbone/main.qml",
		"/C/dev/src/pylive/expreiments/qml/backbone/main_pyqt.py",
		"/C/dev/src/pylive/expreiments/qml/backbone/main.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/tests/test_graph_editor.py",
		"/C/dev/src/pylive/expreiments/parse_exception_traceback.py",
		"/C/dev/src/pylive/pylive/VisualCode_v4/nodes_model.py",
		"/C/dev/src/pylive/tests/test_bilist.py",
		"/C/dev/src/pylive/expreiments/qstyle_draw_ptimitive_elements.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_editor_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/widgets/standard_node_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nodes_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/edges_model.py"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 194.666666667,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"QGraphicsArrowItem",
			"QDrag(",
			"class QGraphicsArrowItem",
			"QGraphicsArrowItem",
			"arrow",
			"LinkItem",
			"group_conse",
			"SelectionRange",
			"QItemSelection",
			"PropsD",
			"links",
			"NumpyA",
			"is not",
			"content",
			"}\n",
			"inspector",
			"_compile_ca",
			"try",
			"QPathEdit",
			"inspector",
			"find_unbounded_names",
			"setHraderTex",
			"evaluate(",
			"evaluate",
			"invalidate",
			"_context_script",
			"_auto_evaluate_filter",
			"evaluate(",
			".kind",
			"help",
			"inletflags",
			"inspector",
			"InspectorView",
			"kind_dropdown.",
			"setter",
			"'data",
			"nodes",
			"())\n",
			"expression",
			"()",
			"kind",
			"value",
			"kind",
			"inlets",
			"'value",
			"\"value",
			"'value",
			"operator",
			"help",
			"QAppli",
			"watch",
			"valueEditor",
			"setModel",
			"node_selection_model",
			"setCurrent",
			"clear_node_editors",
			"setWidget",
			"drawte",
			"drawText",
			"preview_",
			"preview_panel",
			"setValueEditor",
			"editor",
			"setValueEd",
			"inspector",
			"expression_edit",
			"kind_dropdown",
			"distribute",
			" \n",
			"distribu",
			"_view",
			"self._connect",
			"self.imports",
			"PyLocalModulesModel",
			"local_modu",
			"modules_model",
			"modules_panel",
			"PyModulesPanel",
			"PyLocalModulesModel",
			"PyModules",
			"InletItem",
			"PortItem(",
			".view()",
			"_view",
			"NodeItem(",
			"link",
			"QSignalSpy",
			"distrib",
			"setText",
			"setTe",
			"changed",
			"invalida",
			"evaluate",
			"invalidated",
			"user",
			"insertInletItems",
			"distri",
			"print",
			"...\n",
			"evaluate(",
			"invalidate",
			"evaluateNode",
			"evaluate(",
			"MutableSequence",
			"setNeedsEvaluation",
			"logger.",
			"logger",
			"print",
			"evaluateWatched",
			"graph_model.",
			"evalu",
			"evaluateNode",
			"ce_mod",
			"er",
			"a",
			"modelAboutToBeReset",
			"setParameters",
			"#TODO: evaluate nodes in topological order",
			"watched_",
			"evaluateNode",
			"evaluateNodes(",
			"evaluate",
			"value",
			"str",
			"inlet",
			"str,str,str",
			"nodesLinked",
			"resultChanged"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nodesChanged",
			"EdgeId",
			"LinkEvent",
			"VertexWidget",
			"LinkWidget",
			"ConnectionEvent",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "expreiments/ColorGrade_with_Edifice/main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7364,
						"regions":
						{
						},
						"selection":
						[
							[
								1039,
								1039
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/ColorGrade_with_Edifice/main.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56799,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								56547,
								56547
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"line_numbers": false,
							"lsp_uri": "buffer:74",
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 17420.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pylive/VisualCode_v1/qgraphics_arrow_item.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1143,
						"regions":
						{
						},
						"selection":
						[
							[
								1143,
								156
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v1/qgraphics_arrow_item.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pylive/examples/python_function_graph/graph_view.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10758,
						"regions":
						{
						},
						"selection":
						[
							[
								1160,
								1175
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 716.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pylive/VisualCode_v6/py_graph_view.py",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 43070,
						"regions":
						{
						},
						"selection":
						[
							[
								259,
								259
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v6/py_graph_view.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pylive/utils/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1196,
						"regions":
						{
						},
						"selection":
						[
							[
								1196,
								1196
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/utils/__init__.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 457,
						"regions":
						{
						},
						"selection":
						[
							[
								457,
								0
							]
						],
						"settings":
						{
							"auto_name": "Create a TreeModel with pyside6",
							"lsp_uri": "buffer:57",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "pylive/VisualCode_v4/graph_editor/graph_editor_view.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64959,
						"regions":
						{
						},
						"selection":
						[
							[
								58204,
								58215
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v4/graph_editor/graph_editor_view.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17261.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "pylive/VisualCode_v5/py_proxy_node_model.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7942,
						"regions":
						{
						},
						"selection":
						[
							[
								4614,
								4614
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v5/py_proxy_node_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1015.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "pylive/VisualCode_v1/graphview_columnbased.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36286,
						"regions":
						{
						},
						"selection":
						[
							[
								16491,
								16491
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v1/graphview_columnbased.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5923.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "expreiments/ColorGrade_with_Edifice/OpenGLTextureItem.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1235,
						"regions":
						{
						},
						"selection":
						[
							[
								1235,
								1235
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/ColorGrade_with_Edifice/OpenGLTextureItem.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "expreiments/ColorGrade_with_Edifice/NumpyImageViewer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1499,
						"regions":
						{
						},
						"selection":
						[
							[
								95,
								95
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/ColorGrade_with_Edifice/NumpyImageViewer.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "expreiments/ColorGrade_with_Edifice/fileinput.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 974,
						"regions":
						{
						},
						"selection":
						[
							[
								98,
								98
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"auto_name": "from edifice import CustomWidget",
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/ColorGrade_with_Edifice/fileinput.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 13,
					"file": "expreiments/ColorGrade_with_Edifice/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 422,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								396
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/ColorGrade_with_Edifice/utils.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pylive/VisualCode_v6/py_graph_view.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43070,
						"regions":
						{
						},
						"selection":
						[
							[
								871,
								871
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/VisualCode_v6/py_graph_view.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 79.3333333333
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.430785264467,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 343.0,
		"history":
		[
		]
	},
	"output.Debugger Console":
	{
		"height": 182.0,
		"history":
		[
		]
	},
	"output.LSP Log Panel":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.exec":
	{
		"height": 172.0,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.mdpopups":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.rename":
	{
		"height": 608.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"qpa",
				"pylive\\qt_components\\QPathEdit.py"
			],
			[
				"qtfa",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"py data mo",
				"pylive\\VisualCode_v4\\py_data_model.py"
			],
			[
				"py data graph view",
				"pylive\\VisualCode_v4\\py_data_graph_view.py"
			],
			[
				"py data",
				"pylive\\VisualCode_v4\\py_data_model.py"
			],
			[
				"py data gr",
				"pylive\\VisualCode_v4\\py_data_graph_view.py"
			],
			[
				"bili",
				"pylive\\utils\\bilist.py"
			],
			[
				"graphtr",
				"pylive\\VisualCode_v4\\graph_editor\\graphtree_editor_view.py"
			],
			[
				"graph_e",
				"pylive\\VisualCode_v4\\graph_editor\\graph_editor_view.py"
			],
			[
				"py prox",
				"pylive\\VisualCode_v4\\py_proxy_model.py"
			],
			[
				"proxy",
				"pylive\\VisualCode_v4\\py_proxy_model.py"
			],
			[
				"pynode",
				"pylive\\VisualCode_v4\\py_nodes_model.py"
			],
			[
				"py proxy",
				"pylive\\VisualCode_v4\\py_proxy_model.py"
			],
			[
				"py dta model",
				"pylive\\VisualCode_v4\\py_data_model.py"
			],
			[
				"shap",
				".venv\\Lib\\site-packages\\fontTools\\svgLib\\path\\shapes.py"
			],
			[
				"test py da",
				"pylive\\VisualCode_v4\\tests\\test_py_data_model.py"
			],
			[
				"py node",
				"pylive\\VisualCode_v4\\py_nodes_model.py"
			],
			[
				"graph data ro",
				"pylive\\VisualCode_v4\\graph_editor\\graph_data_roles.py"
			],
			[
				"standarde",
				"pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py"
			],
			[
				"standard_graph_de",
				"pylive\\examples\\python_function_graph\\standard_graph_delegate.py"
			],
			[
				"nodeins",
				"pylive\\VisualCode_v4\\node_inspector_widget.py"
			],
			[
				"py nodes",
				"pylive\\VisualCode_v4\\py_nodes_model.py"
			],
			[
				"graphit",
				"pylive\\VisualCode_v4\\py_graph_item.py"
			],
			[
				"py nod",
				"pylive\\VisualCode_v4\\py_nodes_model.py"
			],
			[
				"graph_i",
				"pylive\\VisualCode_v4\\py_graph_item.py"
			],
			[
				"standar",
				"pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py"
			],
			[
				"standard",
				"pylive\\VisualCode_v4\\graph_editor\\standard_edges_model.py"
			],
			[
				"standardNode",
				"pylive\\QtGraphEditor\\widgets\\standard_node_widget.py"
			],
			[
				"nodesD",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"node",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"standardN",
				"pylive\\QtGraphEditor\\standard_node_item.py"
			],
			[
				"edgesM",
				"pylive\\QtGraphEditor\\edges_model.py"
			],
			[
				"script",
				"pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"fields om",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"execute",
				"pylive\\utils\\execute_function.py"
			],
			[
				"definition",
				"pylive\\QtGraphEditor\\definitions_model.py"
			],
			[
				"py func",
				"pylive\\QtGraphEditor\\py_functions_model.py"
			],
			[
				"qtf",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"main py",
				"pylive\\QtGraphEditor\\main_py_functions.py"
			],
			[
				"py function",
				"pylive\\QtGraphEditor\\py_functions_model.py"
			],
			[
				"test py",
				"tests\\test_py_functions_model.py"
			],
			[
				"fieldsmode",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"nodesmodel",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"fields mode",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"fields mo",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"fieldsmo",
				"pylive\\QtGraphEditor\\fields_model.py"
			],
			[
				"graph scene",
				"expreiments\\live_graphics_scene.py"
			],
			[
				"nodesmo",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"qtfac",
				"pylive\\utils\\qtfactory.py"
			],
			[
				"nodes mode",
				"pylive\\QtGraphEditor\\nodes_model.py"
			],
			[
				"definit",
				"pylive\\QtGraphEditor\\definitions_model.py"
			],
			[
				"fields",
				".venv\\Lib\\site-packages\\PySide6\\qml\\QtQuick\\Controls\\designer\\TextFieldSpecifics.qml"
			],
			[
				"main pyth",
				"pylive\\QtGraphEditor\\main_python functions.py"
			],
			[
				"document",
				"pylive\\QtLiveApp\\document_file_link.py"
			],
			[
				"nx python gr",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"nxgrap",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraph",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"python ",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"data view",
				"pylive\\NXPythonGraphEditor\\python_data_viewer.py"
			],
			[
				"python gr",
				"pylive\\NXPythonGraphEditor\\python_graph_model.py"
			],
			[
				"nx node ins",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_view.py"
			],
			[
				"nx graph",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx graph model",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx node inspector dele",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_delegate.py"
			],
			[
				"inspector",
				"pylive\\NetworkXGraphEditor\\nx_node_inspector_view.py"
			],
			[
				"nx netw",
				"pylive\\NetworkXGraphEditor\\nx_network_model.py"
			],
			[
				"nx grap",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx network",
				"pylive\\NetworkXGraphEditor\\nx_network_model.py"
			],
			[
				"nx graph mod",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"graph model",
				"pylive\\examples\\python_function_graph\\graph_model.py"
			],
			[
				"nx",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nx graph mode",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraph se",
				"pylive\\NetworkXGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"test n",
				"tests\\test_nx_graph_model.py"
			],
			[
				"nx ",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgraphm",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"nxgr",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"shapes",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx network sce",
				"pylive\\NetworkXGraphEditor\\nx_network_scene_outlet-to-inlet.py"
			],
			[
				"geo",
				"pylive\\utils\\geo.py"
			],
			[
				"shape",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx net",
				"pylive\\NetworkXGraphEditor\\nx_network_scene.py"
			],
			[
				"round",
				"script_examples_to_run_live\\rounded_link_item.py"
			],
			[
				"nx graph s",
				"pylive\\NetworkXGraphEditor\\nx_graph_shapes.py"
			],
			[
				"nx graph mo",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"icons",
				"expreiments\\display_builtin_icons.py"
			],
			[
				"nxselection",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"nx graph graphics",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nx graph grap",
				"pylive\\QtGraphEditor\\nx_graph_view.py"
			],
			[
				"nx gr",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene_with_ports.py"
			],
			[
				"arrowi",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\qgraphics_arrow_item.py"
			],
			[
				"link",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\link_graphics_items.py"
			],
			[
				"DagSc",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"dag graphics ",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"main",
				"pylive\\examples\\python_function_graph\\main.py"
			],
			[
				"nxgraphmo",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"graphmodel",
				"pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py"
			],
			[
				"graphview",
				"pylive\\pylive\\QtGraphEditor\\graphview_databased.py"
			],
			[
				"build-a",
				"pylive\\expreiments\\built-a-dependency-graph-of-a-python-codebase.py"
			],
			[
				"conne",
				"pylive\\expreiments\\connect_to_ipython.py"
			],
			[
				"number",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"lint",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"script_",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"scriptedit",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"live_framewo",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"link file",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "setSelec",
		"selected_items":
		[
			[
				"setSelec",
				"setSelectionModel"
			],
			[
				"setSource",
				"setSourceOutlet"
			],
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 279.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
