{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"setP",
				"setPos"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"QLine",
				"QLineF"
			],
			[
				"oper",
				"_operator_to_widget"
			],
			[
				"nodesA",
				"nodesAboutToBeRemoved"
			],
			[
				"handleEd",
				"handleEdgesRemoved"
			],
			[
				"graphmoe",
				"graphmodel"
			],
			[
				"setPl",
				"setPlainText"
			],
			[
				"topo",
				"topological_sort"
			],
			[
				"nodes",
				"nodesAdded"
			],
			[
				"wi",
				"width"
			],
			[
				"centr",
				"central_layout"
			],
			[
				"result",
				"result_script_edit"
			],
			[
				"setGr",
				"setSizeGripEnabled"
			],
			[
				"showM",
				"showMessage"
			],
			[
				"_widget_",
				"_widget_to_param"
			],
			[
				"_widget_to",
				"_widget_to_return"
			],
			[
				"nodew",
				"node_widget"
			],
			[
				"setO",
				"setOrientation"
			],
			[
				"QGRaphicsLin",
				"QGraphicsLinearLayout"
			],
			[
				"QGraphisLine",
				"QGraphicsLinearLayout"
			],
			[
				"prop",
				"properties"
			],
			[
				"target",
				"target_node"
			],
			[
				"source",
				"source_node"
			],
			[
				"handleE",
				"handleEdgesPropertiesChanged"
			],
			[
				"edgesa",
				"edgesAboutToBeRemoved"
			],
			[
				"handleNo",
				"handleNodesRemoved"
			],
			[
				"nodesR",
				"nodesAboutToBeRemoved"
			],
			[
				"mouse",
				"mousePressEvent"
			],
			[
				"make_uni",
				"make_unique_name"
			],
			[
				"QSize",
				"QSizeF"
			],
			[
				"Gra",
				"GraphView"
			],
			[
				"grap",
				"graph_model"
			],
			[
				"size",
				"sizeHint"
			],
			[
				"Graph",
				"GraphView"
			],
			[
				"rea",
				"read_text"
			],
			[
				"graphmod",
				"graphmodel"
			],
			[
				"graph",
				"graphmodel"
			],
			[
				"add",
				"addMenu"
			],
			[
				"map",
				"mapToScene"
			],
			[
				"mapF",
				"mapFromGlobal"
			],
			[
				"crea",
				"createStandardContextMenu"
			],
			[
				"QgraphicsA",
				"QGraphicsArrowItem"
			],
			[
				"Abstra",
				"AbstractGraphDelegate"
			],
			[
				"color",
				"ColorRole"
			],
			[
				"QGra",
				"QGraphicsLayout"
			],
			[
				"QGraphics",
				"QGraphicsScene"
			],
			[
				"item",
				"_item_to_widget_map"
			],
			[
				"Grap",
				"GraphicsItemFlag"
			],
			[
				"base",
				"AlternateBase"
			],
			[
				"Abstr",
				"AbstractGraphDelegate"
			],
			[
				"ty",
				"typing"
			],
			[
				"QPainter",
				"QPainterPath"
			],
			[
				"set",
				"setColor"
			],
			[
				"len",
				"length"
			],
			[
				"mapFrom",
				"mapFromItem"
			],
			[
				"_boun",
				"_boundingrect"
			],
			[
				"QRec",
				"QRectF"
			],
			[
				"rect",
				"rect_shape"
			],
			[
				"update",
				"updatePosition"
			],
			[
				"addP",
				"addPolygon"
			],
			[
				"poly",
				"polygon"
			],
			[
				"QPol",
				"QPolygonF"
			],
			[
				"tar",
				"target_offset"
			],
			[
				"str",
				"createStroke"
			],
			[
				"shape_",
				"shape_center"
			],
			[
				"Itemsend",
				"ItemSendsScenePositionChanges"
			],
			[
				"fla",
				"GraphicsItemFlag"
			],
			[
				"scenePos",
				"scenePositionChanged"
			],
			[
				"sceneP",
				"scenePositionChanged"
			],
			[
				"setS",
				"setSource"
			],
			[
				"Qpoint",
				"QPointF"
			],
			[
				"QPainterP",
				"QPainterPathStroker"
			],
			[
				"sc",
				"scene"
			],
			[
				"Qpainter",
				"QPainterPath"
			],
			[
				"QPoint",
				"QPointF"
			],
			[
				"adjus",
				"adjusted"
			],
			[
				"Graphis",
				"GraphicsItemFlag"
			],
			[
				"group",
				"group_widget"
			],
			[
				"send",
				"ItemSendsScenePositionChanges"
			],
			[
				"Grpahi",
				"GraphicsItemFlag"
			],
			[
				"flag",
				"GraphicsItemFlag"
			],
			[
				"QGrap",
				"QGraphicsItem"
			],
			[
				"handleEdges",
				"handleEdgesAdded"
			],
			[
				"graphmodel",
				"graphmodel_databased"
			],
			[
				"pa",
				"parent"
			],
			[
				"line",
				"lineCount"
			],
			[
				"inser",
				"insertBar"
			],
			[
				"cell",
				"cell_at_line"
			],
			[
				"Code",
				"CodeHasDocstring"
			],
			[
				"assertNo",
				"assertNotEqual"
			],
			[
				"Script",
				"ScriptEdit"
			],
			[
				"end",
				"end_block"
			],
			[
				"begin",
				"begin_rect"
			],
			[
				"find",
				"findBlockByLineNumber"
			],
			[
				"Modi",
				"KeyboardModifier"
			],
			[
				"QKey",
				"QKeyEvent"
			],
			[
				"curr",
				"currentBlockState"
			],
			[
				"current",
				"currentBlockState"
			],
			[
				"curren",
				"currentBlockState"
			],
			[
				"list",
				"listwidget"
			],
			[
				"setCi",
				"setCurrentIndex"
			],
			[
				"file",
				"fileChanged"
			],
			[
				"QMenu",
				"QMenuBar"
			],
			[
				"parent",
				"parentWidget"
			],
			[
				"QMeu",
				"QMenuBar"
			],
			[
				"QPlainTe",
				"QPlainTextDocumentLayout"
			],
			[
				"LiveA",
				"QtLiveApp"
			],
			[
				"NotIm",
				"NotImplementedError"
			],
			[
				"LiveAppW",
				"LiveAppWithExec"
			],
			[
				"Qt",
				"QtGraphEditor"
			],
			[
				"text",
				"textedit"
			],
			[
				"inter",
				"intersects"
			],
			[
				"con",
				"contentsRect"
			],
			[
				"Upda",
				"UpdateRequest"
			],
			[
				"lineNumberAre",
				"lineNumberAreaWidth"
			],
			[
				"gc",
				"get_context"
			],
			[
				"per",
				"perf_counter_ns"
			],
			[
				"pain",
				"painting"
			],
			[
				"setSwap",
				"setSwapBehavior"
			],
			[
				"setSw",
				"setSwapInterval"
			],
			[
				"call",
				"callback"
			],
			[
				"glEnableVerte",
				"glEnableVertexAttribArray"
			],
			[
				"QOpenGLShader",
				"QOpenGLShaderProgram"
			],
			[
				"GL",
				"GLCanvas"
			],
			[
				"reques",
				"requestUpdate"
			],
			[
				"initi",
				"initializeOpenGLFunctions"
			],
			[
				"reque",
				"requestedFormat"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pylive/QtGraphEditor/dag_graph_graphics_scene.py",
			"settings":
			{
				"buffer_size": 33198,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1363,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHZuAAAAAAAAd24AAAAAAAAAAAAAd24AAAAAAACDbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdm4AAAAAAAB2bgAAAAAAAAAAAAAAAPC/"
				],
				[
					1364,
					1,
					"paste",
					null,
					"AQAAAINuAAAAAAAArW4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg24AAAAAAACDbgAAAAAAAAAAAAAAAPC/"
				],
				[
					1370,
					1,
					"insert",
					{
						"characters": "disconnected"
					},
					"DQAAAIhuAAAAAAAAiW4AAAAAAAAAAAAAiW4AAAAAAACJbgAAAAAAAAkAAABjb25uZWN0ZWSJbgAAAAAAAIpuAAAAAAAAAAAAAIpuAAAAAAAAi24AAAAAAAAAAAAAi24AAAAAAACMbgAAAAAAAAAAAACMbgAAAAAAAI1uAAAAAAAAAAAAAI1uAAAAAAAAjm4AAAAAAAAAAAAAjm4AAAAAAACPbgAAAAAAAAAAAACPbgAAAAAAAJBuAAAAAAAAAAAAAJBuAAAAAAAAkW4AAAAAAAAAAAAAkW4AAAAAAACSbgAAAAAAAAAAAACSbgAAAAAAAJNuAAAAAAAAAAAAAJNuAAAAAAAAlG4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiG4AAAAAAACRbgAAAAAAAAAAAAAAAPC/"
				],
				[
					1383,
					1,
					"insert",
					{
						"characters": "\ndisconnecte"
					},
					"DQAAACVQAAAAAAAAJlAAAAAAAAAAAAAAJlAAAAAAAAAqUAAAAAAAAAAAAAAqUAAAAAAAACtQAAAAAAAAAAAAACtQAAAAAAAALFAAAAAAAAAAAAAALFAAAAAAAAAtUAAAAAAAAAAAAAAtUAAAAAAAAC5QAAAAAAAAAAAAAC5QAAAAAAAAL1AAAAAAAAAAAAAAL1AAAAAAAAAwUAAAAAAAAAAAAAAwUAAAAAAAADFQAAAAAAAAAAAAADFQAAAAAAAAMlAAAAAAAAAAAAAAMlAAAAAAAAAzUAAAAAAAAAAAAAAzUAAAAAAAADRQAAAAAAAAAAAAADRQAAAAAAAANVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJVAAAAAAAAAlUAAAAAAAAAAAAAAAAPC/"
				],
				[
					1384,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAADVQAAAAAAAANlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANVAAAAAAAAA1UAAAAAAAAAAAAAAAAPC/"
				],
				[
					1385,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADZQAAAAAAAAN1AAAAAAAAAAAAAAN1AAAAAAAAA4UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANlAAAAAAAAA2UAAAAAAAAAAAAAAAAPC/"
				],
				[
					1386,
					1,
					"insert",
					{
						"characters": " Signal"
					},
					"BwAAADhQAAAAAAAAOVAAAAAAAAAAAAAAOVAAAAAAAAA6UAAAAAAAAAAAAAA6UAAAAAAAADtQAAAAAAAAAAAAADtQAAAAAAAAPFAAAAAAAAAAAAAAPFAAAAAAAAA9UAAAAAAAAAAAAAA9UAAAAAAAAD5QAAAAAAAAAAAAAD5QAAAAAAAAP1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOFAAAAAAAAA4UAAAAAAAAAAAAAAAAPC/"
				],
				[
					1387,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD9QAAAAAAAAQVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAP1AAAAAAAAA/UAAAAAAAAAAAAAAAAPC/"
				],
				[
					1388,
					1,
					"insert",
					{
						"characters": "EdgeW"
					},
					"BQAAAEBQAAAAAAAAQVAAAAAAAAAAAAAAQVAAAAAAAABCUAAAAAAAAAAAAABCUAAAAAAAAENQAAAAAAAAAAAAAENQAAAAAAAARFAAAAAAAAAAAAAARFAAAAAAAABFUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQFAAAAAAAABAUAAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "EdgeWidget"
					},
					"AgAAAEBQAAAAAAAAQFAAAAAAAAAFAAAARWRnZVdAUAAAAAAAAEpQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARVAAAAAAAABFUAAAAAAAAAAAAAAAAPC/"
				],
				[
					1391,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAASlAAAAAAAABKUAAAAAAAAAAAAAAAAPC/"
				],
				[
					1410,
					1,
					"cut",
					null,
					"AQAAAKluAAAAAAAAqW4AAAAAAAAtAAAAc2VsZi5kaXNjb25uZWN0ZWQuZW1pdChzZWxmLmludGVyYWN0aXZlX2VkZ2Up",
					"AQAAAAAAAAABAAAA1m4AAAAAAACpbgAAAAAAAAAAAAAAAPC/"
				],
				[
					1413,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHBuAAAAAAAAcW4AAAAAAAAAAAAAcW4AAAAAAAB9bgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcG4AAAAAAABwbgAAAAAAAAAAAAAAAPC/"
				],
				[
					1414,
					1,
					"paste",
					null,
					"AQAAAH1uAAAAAAAAqm4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfW4AAAAAAAB9bgAAAAAAAAAAAAAAAPC/"
				],
				[
					1416,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAqm4AAAAAAACqbgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "expreiments/inspect_functions_experiment.py",
			"settings":
			{
				"buffer_size": 1953,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "pylive/examples/python_function_graph/main.py",
			"settings":
			{
				"buffer_size": 8112,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3867,
					1,
					"paste",
					null,
					"AQAAAP0SAAAAAAAABxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RIAAAAAAAD9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					3872,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACQTAAAAAAAAJRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3873,
					1,
					"insert",
					{
						"characters": " edge:Ed"
					},
					"CAAAACUTAAAAAAAAJhMAAAAAAAAAAAAAJhMAAAAAAAAnEwAAAAAAAAAAAAAnEwAAAAAAACgTAAAAAAAAAAAAACgTAAAAAAAAKRMAAAAAAAAAAAAAKRMAAAAAAAAqEwAAAAAAAAAAAAAqEwAAAAAAACsTAAAAAAAAAAAAACsTAAAAAAAALBMAAAAAAAAAAAAALBMAAAAAAAAtEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRMAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3874,
					1,
					"insert",
					{
						"characters": "geW"
					},
					"AwAAAC0TAAAAAAAALhMAAAAAAAAAAAAALhMAAAAAAAAvEwAAAAAAAAAAAAAvEwAAAAAAADATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRMAAAAAAAAtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3875,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "EdgeWidget"
					},
					"AgAAACsTAAAAAAAAKxMAAAAAAAAFAAAARWRnZVcrEwAAAAAAADUTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBMAAAAAAAAwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3877,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAjh0AAAAAAACNHQAAZnJvbSBhc3QgaW1wb3J0IENhbGwKZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKZnJvbSBweWxpdmUuZXhhbXBsZXMucHl0aG9uX2Z1bmN0aW9uX2dyYXBoLmdyYXBoX21vZGVsIGltcG9ydCBHcmFwaE1vZGVsCgoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgphcHAgPSBRQXBwbGljYXRpb24oKQpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmRhZ19ncmFwaF9ncmFwaGljc19zY2VuZSBpbXBvcnQgKAogICAgREFHU2NlbmUsCiAgICBFZGdlV2lkZ2V0LAogICAgTm9kZVdpZGdldCwKICAgIElubGV0V2lkZ2V0LAogICAgT3V0bGV0V2lkZ2V0LAopCmZyb20gcHlsaXZlLlF0R3JhcGhFZGl0b3IuaW5maW5pdGVfZ3JhcGhpY3N2aWV3X29wdGltaXplZCBpbXBvcnQgKAogICAgSW5maW5pdGVHcmFwaGljc1ZpZXcsCikKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5ueF9ncmFwaF9tb2RlbCBpbXBvcnQgTlhHcmFwaE1vZGVsCmZyb20gcHlsaXZlLnV0aWxzLnVuaXF1ZSBpbXBvcnQgbWFrZV91bmlxdWVfbmFtZQoKaW1wb3J0IGluc3BlY3QKCgpjbGFzcyBQeXRob25HcmFwaFdpbmRvdyhRV2lkZ2V0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ6IE9wdGlvbmFsW1FXaWRnZXRdID0gTm9uZSkgLT4gTm9uZToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudCkKICAgICAgICAjIyMgU2V0dXAgd2lkZ2V0cyAjIyMKICAgICAgICBzZWxmLnNldFdpbmRvd1RpdGxlKCJQeXRob24gR3JhcGgiKQoKICAgICAgICAjIGdyYXBodmlldwogICAgICAgIGdyYXBodmlldyA9IEluZmluaXRlR3JhcGhpY3NWaWV3KCkKICAgICAgICBkYWdzY2VuZSA9IERBR1NjZW5lKCkKICAgICAgICBncmFwaHZpZXcuc2V0U2NlbmUoZGFnc2NlbmUpCiAgICAgICAgc2VsZi5kYWdzY2VuZSA9IGRhZ3NjZW5lCgogICAgICAgICMgc2NyaXB0dmlldwogICAgICAgIHJlc3VsdF9zY3JpcHRfZWRpdCA9IFFQbGFpblRleHRFZGl0KCkKICAgICAgICByZXN1bHRfc2NyaXB0X2VkaXQuc2V0UmVhZE9ubHkoVHJ1ZSkKICAgICAgICBzZWxmLnJlc3VsdF9zY3JpcHRfZWRpdCA9IHJlc3VsdF9zY3JpcHRfZWRpdAoKICAgICAgICAjIG1lbnViYXIKICAgICAgICBtZW51YmFyID0gUU1lbnVCYXIoc2VsZikKICAgICAgICBhZGRfbWVudSA9IFFNZW51KCJhZGQiLCBzZWxmKQogICAgICAgIGZvciBmbiBpbiBbcHJpbnQsIGxlbiwgUGF0aC5jd2QsIFBhdGguaXRlcmRpcl06CiAgICAgICAgICAgIGNyZWF0ZV9vcGVyYXRvcl9hY3Rpb24gPSBRQWN0aW9uKGZuLl9fbmFtZV9fLCBzZWxmKQogICAgICAgICAgICBjcmVhdGVfb3BlcmF0b3JfYWN0aW9uLnRyaWdnZXJlZC5jb25uZWN0KAogICAgICAgICAgICAgICAgbGFtYmRhIGNoZWNrZWQsIGZuPWZuOiBzZWxmLmNyZWF0ZV9vcGVyYXRvcihmbikKICAgICAgICAgICAgKQogICAgICAgICAgICBhZGRfbWVudS5hZGRBY3Rpb24oY3JlYXRlX29wZXJhdG9yX2FjdGlvbikKICAgICAgICBtZW51YmFyLmFkZE1lbnUoYWRkX21lbnUpCgogICAgICAgICMgc3RhdHVzYmFyCiAgICAgICAgc3RhdHVzYmFyID0gUVN0YXR1c0JhcihzZWxmKQogICAgICAgIHN0YXR1c2Jhci5zaG93TWVzc2FnZSgiV2VsY29tZSEiKQogICAgICAgIHN0YXR1c2Jhci5zZXRTaXplR3JpcEVuYWJsZWQoRmFsc2UpCgogICAgICAgICMgY3JlYXRlIGxheW91dAogICAgICAgIG1haW5sYXlvdXQgPSBRVkJveExheW91dCgpCiAgICAgICAgbWFpbmxheW91dC5zZXRDb250ZW50c01hcmdpbnMoMCwgMCwgMCwgMCkKICAgICAgICBzcGxpdHRlciA9IFFTcGxpdHRlcigpCiAgICAgICAgc3BsaXR0ZXIuYWRkV2lkZ2V0KGdyYXBodmlldykKICAgICAgICBzcGxpdHRlci5hZGRXaWRnZXQocmVzdWx0X3NjcmlwdF9lZGl0KQogICAgICAgIHNwbGl0dGVyLnNldFNpemVzKAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBzcGxpdHRlci53aWR0aCgpIC8vIHNwbGl0dGVyLmNvdW50KCkKICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKHNwbGl0dGVyLmNvdW50KCkpCiAgICAgICAgICAgIF0KICAgICAgICApCiAgICAgICAgbWFpbmxheW91dC5hZGRXaWRnZXQoc3BsaXR0ZXIpCiAgICAgICAgbWFpbmxheW91dC5zZXRNZW51QmFyKG1lbnViYXIpCiAgICAgICAgbWFpbmxheW91dC5hZGRXaWRnZXQoc3RhdHVzYmFyKQogICAgICAgIHNlbGYuc2V0TGF5b3V0KG1haW5sYXlvdXQpCgogICAgICAgICMjIyMgY3JlYXRlIGFuZCBiaW5kZCBtb2RlbHMgIyMjCiAgICAgICAgZ3JhcGhtb2RlbCA9IE5YR3JhcGhNb2RlbCgpCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0FkZGVkLmNvbm5lY3Qoc2VsZi5oYW5kbGVOb2Rlc0FkZGVkKQogICAgICAgIGdyYXBobW9kZWwubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5jb25uZWN0KAogICAgICAgICAgICBzZWxmLmhhbmRsZU5vZGVzUHJvcGVydGllc0NoYW5nZWQKICAgICAgICApCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuY29ubmVjdChzZWxmLmhhbmRsZU5vZGVzUmVtb3ZlZCkKCiAgICAgICAgZ3JhcGhtb2RlbC5lZGdlc0FkZGVkLmNvbm5lY3Qoc2VsZi5oYW5kbGVFZGdlc0FkZGVkKQogICAgICAgIGdyYXBobW9kZWwuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5jb25uZWN0KAogICAgICAgICAgICBzZWxmLmhhbmRsZUVkZ2VzUHJvcGVydGllc0NoYW5nZWQKICAgICAgICApCiAgICAgICAgZ3JhcGhtb2RlbC5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuY29ubmVjdChzZWxmLmhhbmRsZUVkZ2VzUmVtb3ZlZCkKCiAgICAgICAgIyB0cmlnZ2VyIGV2YWx1YXRlCiAgICAgICAgZ3JhcGhtb2RlbC5ub2Rlc0FkZGVkLmNvbm5lY3Qoc2VsZi5ldmFsdWF0ZSkKICAgICAgICBncmFwaG1vZGVsLm5vZGVzUmVtb3ZlZC5jb25uZWN0KHNlbGYuZXZhbHVhdGUpCiAgICAgICAgZ3JhcGhtb2RlbC5lZGdlc0FkZGVkLmNvbm5lY3Qoc2VsZi5ldmFsdWF0ZSkKICAgICAgICBncmFwaG1vZGVsLmVkZ2VzUmVtb3ZlZC5jb25uZWN0KHNlbGYuZXZhbHVhdGUpCiAgICAgICAgc2VsZi5ncmFwaG1vZGVsID0gZ3JhcGhtb2RlbAoKICAgICAgICAjIHdpZGdldCBtb2RlbCBtYXBwaW5ncwogICAgICAgIHNlbGYuX29wZXJhdG9yX3RvX3dpZGdldDogZGljdFtIYXNoYWJsZSwgTm9kZVdpZGdldF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl93aWRnZXRfdG9fb3BlcmF0b3I6IGRpY3RbTm9kZVdpZGdldCwgSGFzaGFibGVdID0gZGljdCgpCgogICAgICAgIHNlbGYuX2VkZ2VfdG9fd2lkZ2V0OiBkaWN0WwogICAgICAgICAgICBUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGVdLCBFZGdlV2lkZ2V0CiAgICAgICAgXSA9IGRpY3QoKQogICAgICAgIHNlbGYuX3dpZGdldF90b19lZGdlOiBkaWN0WwogICAgICAgICAgICBFZGdlV2lkZ2V0LCBUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGVdCiAgICAgICAgXSA9IGRpY3QoKQoKICAgICAgICBzZWxmLl9wYXJhbV90b193aWRnZXQ6IGRpY3RbVHVwbGVbSGFzaGFibGUsIHN0cl0sIElubGV0V2lkZ2V0XSA9IGRpY3QoKQogICAgICAgIHNlbGYuX3dpZGdldF90b19wYXJhbTogZGljdFtJbmxldFdpZGdldCwgVHVwbGVbSGFzaGFibGUsIHN0cl1dID0gZGljdCgpCgogICAgICAgIHNlbGYuX3JldHVybl90b193aWRnZXQ6IGRpY3RbSGFzaGFibGUsIE91dGxldFdpZGdldF0gPSBkaWN0KCkKICAgICAgICBzZWxmLl93aWRnZXRfdG9fcmV0dXJuOiBkaWN0W091dGxldFdpZGdldCwgSGFzaGFibGVdID0gZGljdCgpCgogICAgICAgICMgYmluZCB2aWV3CiAgICAgICAgZGFnc2NlbmUuY29ubmVjdGVkLmNvbm5lY3Qoc2VsZi5vbkNvbm5lY3RlZCkKCiAgICBAU2xvdCgpCiAgICBkZWYgZXZhbHVhdGUoc2VsZik6CiAgICAgICAgaW1wb3J0IG5ldHdvcmt4IGFzIG54CgogICAgICAgIG5vZGVzID0gbngudG9wb2xvZ2ljYWxfc29ydChzZWxmLmdyYXBobW9kZWwuRykKCiAgICAgICAgc2VsZi5yZXN1bHRfc2NyaXB0X2VkaXQuc2V0UGxhaW5UZXh0KCJcbiIuam9pbihub2RlcykpCgogICAgQFNsb3Qob2JqZWN0KQogICAgZGVmIGNyZWF0ZV9vcGVyYXRvcihzZWxmLCBmbjogQ2FsbGFibGUpOgogICAgICAgIHVuaXF1ZV9ub2RlX2lkID0gbWFrZV91bmlxdWVfbmFtZShmbi5fX25hbWVfXywgc2VsZi5ncmFwaG1vZGVsLm5vZGVzKCkpCiAgICAgICAgc2VsZi5ncmFwaG1vZGVsLmFkZE5vZGUodW5pcXVlX25vZGVfaWQsIGZuPWZuKQoKICAgIEBTbG90KEVkZ2VXaWRnZXQpCiAgICBkZWYgb25Db25uZWN0ZWQoc2VsZiwgZWRnZTogRWRnZVdpZGdldCk6CiAgICAgICAgIiIiY2FsbGVkIHdoZW4gcGlucyBhcmUgY29ubmVjdGVkIGJ5IHRoZSB3aWRnZXQiIiIKICAgICAgICBvdXRsZXQgPSBlZGdlLnNvdXJjZU91dGxldCgpCiAgICAgICAgaW5sZXQgPSBlZGdlLnRhcmdldElubGV0KCkKICAgICAgICBhc3NlcnQgb3V0bGV0IGFuZCBpbmxldAogICAgICAgIHNlbGYuZGFnc2NlbmUucmVtb3ZlRWRnZShlZGdlKQogICAgICAgIHNvdXJjZV9vcGVyYXRvciA9IHNlbGYuX3dpZGdldF90b19yZXR1cm5bb3V0bGV0XQogICAgICAgIHRhcmdldF9vcGVyYXRvciwgcGFyYW1uYW1lID0gc2VsZi5fd2lkZ2V0X3RvX3BhcmFtW2lubGV0XQogICAgICAgIHByaW50KGYiY29ubmVjdGVkOiB7c291cmNlX29wZXJhdG9yfSAtPiB7dGFyZ2V0X29wZXJhdG9yfS57cGFyYW1uYW1lfSIpCiAgICAgICAgc2VsZi5ncmFwaG1vZGVsLmFkZEVkZ2UoCiAgICAgICAgICAgIHNvdXJjZV9vcGVyYXRvciwgdGFyZ2V0X29wZXJhdG9yLCBwYXJhbW5hbWU9cGFyYW1uYW1lCiAgICAgICAgKQoKICAgIEBTTG90KEVkZ2VXaWRnZXQpCiAgICBkZWYgb25EaXNjb25uZWN0ZWQoc2VsZiwgZWRnZTpFZGdlV2lkZ2V0KToKICAgICAgICAuLi4KCiAgICBAU2xvdChsaXN0KQogICAgZGVmIGhhbmRsZU5vZGVzQWRkZWQoc2VsZiwgbm9kZXM6IExpc3RbSGFzaGFibGVdKToKICAgICAgICBwcmludCgibm9kZXMgYWRkZWQiKQogICAgICAgIGZvciBuIGluIG5vZGVzOgogICAgICAgICAgICB3aWRnZXQgPSBOb2RlV2lkZ2V0KHRpdGxlPWYie259IikKICAgICAgICAgICAgc2VsZi5kYWdzY2VuZS5hZGROb2RlKHdpZGdldCkKICAgICAgICAgICAgc2VsZi5fb3BlcmF0b3JfdG9fd2lkZ2V0W25dID0gd2lkZ2V0CiAgICAgICAgICAgIHNlbGYuX3dpZGdldF90b19vcGVyYXRvclt3aWRnZXRdID0gbgoKICAgIEBTbG90KGxpc3QpCiAgICBkZWYgaGFuZGxlTm9kZXNSZW1vdmVkKHNlbGYsIG5vZGVzOiBMaXN0W0hhc2hhYmxlXSk6CiAgICAgICAgZm9yIG4gaW4gbm9kZXM6CiAgICAgICAgICAgIHdpZGdldCA9IHNlbGYuX29wZXJhdG9yX3RvX3dpZGdldFtuXQogICAgICAgICAgICBzZWxmLmRhZ3NjZW5lLnJlbW92ZU5vZGUod2lkZ2V0KQoKICAgIEBTbG90KGRpY3QpCiAgICBkZWYgaGFuZGxlTm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZCgKICAgICAgICBzZWxmLCBjaGFuZ2U6IGRpY3RbSGFzaGFibGUsIGRpY3Rbc3RyLCBvYmplY3QgfCBOb25lXV0KICAgICk6CiAgICAgICAgcHJpbnQoIm5vZGVzIGNoYW5nZWQ6IiwgY2hhbmdlKQogICAgICAgIGZvciBuLCBwcm9wcyBpbiBjaGFuZ2UuaXRlbXMoKToKICAgICAgICAgICAgbm9kZV93aWRnZXQgPSBjYXN0KE5vZGVXaWRnZXQsIHNlbGYuX29wZXJhdG9yX3RvX3dpZGdldFtuXSkKICAgICAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBtYXRjaCBwcm9wOgogICAgICAgICAgICAgICAgICAgIGNhc2UgImZuIjoKICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBzZWxmLmdyYXBobW9kZWwuZ2V0Tm9kZVByb3BlcnR5KG4sICJmbiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNpZyA9IGluc3BlY3Quc2lnbmF0dXJlKGZuKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcGFyYW0gaW4gc2lnLnBhcmFtZXRlcnMudmFsdWVzKCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxldF93aWRnZXQgPSBJbmxldFdpZGdldChwYXJhbS5uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZV93aWRnZXQuYWRkSW5sZXQoaW5sZXRfd2lkZ2V0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcGFyYW1fdG9fd2lkZ2V0WwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuLCBwYXJhbS5uYW1lKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA9IGlubGV0X3dpZGdldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fd2lkZ2V0X3RvX3BhcmFtW2lubGV0X3dpZGdldF0gPSAoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBvdXRsZXRfd2lkZ2V0ID0gT3V0bGV0V2lkZ2V0KCJvdXQiKQogICAgICAgICAgICAgICAgICAgICAgICBub2RlX3dpZGdldC5hZGRPdXRsZXQob3V0bGV0X3dpZGdldCkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmV0dXJuX3RvX3dpZGdldFtuXSA9IG91dGxldF93aWRnZXQKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fd2lkZ2V0X3RvX3JldHVybltvdXRsZXRfd2lkZ2V0XSA9IG4KCiAgICBAU2xvdChsaXN0KQogICAgZGVmIGhhbmRsZUVkZ2VzQWRkZWQoc2VsZiwgZWRnZXM6IExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0pOgogICAgICAgIHByaW50KCJlZGdlcyBhZGRlZCIsIGVkZ2VzKQogICAgICAgIGZvciB1LCB2IGluIGVkZ2VzOgogICAgICAgICAgICBwYXJhbW5hbWUgPSBzZWxmLmdyYXBobW9kZWwuZ2V0RWRnZVByb3BlcnR5KHUsIHYsICJwYXJhbW5hbWUiKQogICAgICAgICAgICBvdXRsZXRfd2lkZ2V0ID0gc2VsZi5fcmV0dXJuX3RvX3dpZGdldFt1XQogICAgICAgICAgICBpbmxldF93aWRnZXQgPSBzZWxmLl9wYXJhbV90b193aWRnZXRbKHYsIHBhcmFtbmFtZSldCiAgICAgICAgICAgIGVkZ2Vfd2lkZ2V0ID0gRWRnZVdpZGdldChvdXRsZXRfd2lkZ2V0LCBpbmxldF93aWRnZXQpCiAgICAgICAgICAgICMgZWRnZV93aWRnZXQuc2V0TGFiZWxUZXh0KHBhcmFtbmFtZSkKICAgICAgICAgICAgc2VsZi5kYWdzY2VuZS5hZGRFZGdlKGVkZ2Vfd2lkZ2V0KQoKICAgIEBTbG90KGxpc3QpCiAgICBkZWYgaGFuZGxlRWRnZXNSZW1vdmVkKHNlbGYsIGVkZ2VzOiBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dKToKICAgICAgICBwcmludCgiZWRnZXMgcmVtb3ZlZCIsIGVkZ2VzKQoKICAgIEBTbG90KGRpY3QpCiAgICBkZWYgaGFuZGxlRWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZCgKICAgICAgICBzZWxmLCBjaGFuZ2U6IGRpY3RbSGFzaGFibGUsIGRpY3Rbc3RyLCBvYmplY3QgfCBOb25lXV0KICAgICk6CiAgICAgICAgcHJpbnQoImVkZ2VzIGNoYW5nZWQ6IiwgY2hhbmdlKQoKCndpbmRvdyA9IFB5dGhvbkdyYXBoV2luZG93KCkKCndpbmRvdy5zaG93KCkKYXBwLmV4ZWMoKQo",
					"AQAAAAAAAAABAAAANRMAAAAAAAA1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3887,
					1,
					"paste",
					null,
					"AgAAAPgSAAAAAAAA/BIAAAAAAAAAAAAA/BIAAAAAAAD8EgAAAAAAAAQAAABTTG90",
					"AQAAAAAAAAABAAAA+BIAAAAAAAD8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					3891,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					3901,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAbQ8AAAAAAABtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3910,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAANobAAAAAAAA2hsAAAAAAAACAAAAIyA",
					"AQAAAAAAAAABAAAA9xsAAAAAAAD3GwAAAAAAAAAAAAAAAPC/"
				],
				[
					3912,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAA9RsAAAAAAAD1GwAAAAAAAAAAAAAAAPC/"
				],
				[
					3917,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAFhkAAAAAAAAWGQAAAAAAAAAAAAAAAPC/"
				],
				[
					3922,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAArhoAAAAAAACuGgAAAAAAAAAAAAAAAPC/"
				],
				[
					3940,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACkPAAAAAAAAKg8AAAAAAAAAAAAAKg8AAAAAAAAyDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQ8AAAAAAAApDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3941,
					1,
					"paste",
					null,
					"AQAAADIPAAAAAAAAXg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMg8AAAAAAAAyDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3946,
					1,
					"insert",
					{
						"characters": "disconnected"
					},
					"DQAAADsPAAAAAAAAPA8AAAAAAAAAAAAAPA8AAAAAAAA8DwAAAAAAAAkAAABjb25uZWN0ZWQ8DwAAAAAAAD0PAAAAAAAAAAAAAD0PAAAAAAAAPg8AAAAAAAAAAAAAPg8AAAAAAAA/DwAAAAAAAAAAAAA/DwAAAAAAAEAPAAAAAAAAAAAAAEAPAAAAAAAAQQ8AAAAAAAAAAAAAQQ8AAAAAAABCDwAAAAAAAAAAAABCDwAAAAAAAEMPAAAAAAAAAAAAAEMPAAAAAAAARA8AAAAAAAAAAAAARA8AAAAAAABFDwAAAAAAAAAAAABFDwAAAAAAAEYPAAAAAAAAAAAAAEYPAAAAAAAARw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOw8AAAAAAABEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3951,
					1,
					"insert",
					{
						"characters": "onDisco"
					},
					"CAAAAFUPAAAAAAAAVg8AAAAAAAAAAAAAVg8AAAAAAABWDwAAAAAAAAsAAABvbkNvbm5lY3RlZFYPAAAAAAAAVw8AAAAAAAAAAAAAVw8AAAAAAABYDwAAAAAAAAAAAABYDwAAAAAAAFkPAAAAAAAAAAAAAFkPAAAAAAAAWg8AAAAAAAAAAAAAWg8AAAAAAABbDwAAAAAAAAAAAABbDwAAAAAAAFwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQ8AAAAAAABgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3952,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "onDisconnected"
					},
					"AgAAAFUPAAAAAAAAVQ8AAAAAAAAHAAAAb25EaXNjb1UPAAAAAAAAYw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXA8AAAAAAABcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3954,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAYw8AAAAAAABjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3958,
					1,
					"left_delete",
					null,
					"AQAAACYPAAAAAAAAJg8AAAAAAAACAAAAZWQ",
					"AQAAAAAAAAABAAAAJg8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3961,
					1,
					"left_delete",
					null,
					"AQAAAF8PAAAAAAAAXw8AAAAAAAACAAAAZWQ",
					"AQAAAAAAAAABAAAAXw8AAAAAAABhDwAAAAAAAAAAAAAAAPC/"
				],
				[
					3964,
					2,
					"left_delete",
					null,
					"AgAAAAwRAAAAAAAADBEAAAAAAAABAAAAZAsRAAAAAAAACxEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAADREAAAAAAAANEQAAAAAAAAAAAAAAAPC/"
				],
				[
					3967,
					1,
					"right_delete",
					null,
					"AQAAAFMTAAAAAAAAUxMAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAUxMAAAAAAABTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3968,
					1,
					"left_delete",
					null,
					"AQAAAFITAAAAAAAAUhMAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAUxMAAAAAAABTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3973,
					1,
					"left_delete",
					null,
					"AQAAAHQTAAAAAAAAdBMAAAAAAAAEAAAALi4uCg",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3974,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHQTAAAAAAAAeBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3975,
					1,
					"left_delete",
					null,
					"AQAAAHQTAAAAAAAAdBMAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAeBMAAAAAAAB4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3976,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHQTAAAAAAAAdRMAAAAAAAAAAAAAdRMAAAAAAAB9EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3978,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAHQTAAAAAAAAeBMAAAAAAAAAAAAAeRMAAAAAAAB5EwAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAgEpA"
				],
				[
					3979,
					1,
					"left_delete",
					null,
					"AQAAAHQTAAAAAAAAdBMAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAeBMAAAAAAAB4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3980,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BQAAAHQTAAAAAAAAdRMAAAAAAAAAAAAAdRMAAAAAAAB2EwAAAAAAAAAAAAB2EwAAAAAAAHcTAAAAAAAAAAAAAHcTAAAAAAAAeBMAAAAAAAAAAAAAeBMAAAAAAAB5EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3981,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHkTAAAAAAAAexMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRMAAAAAAAB5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3987,
					1,
					"paste",
					null,
					"AgAAAGwTAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD4FAAAAAAAAA8AAAAgICAgICAgIHByaW50KCk",
					"AQAAAAAAAAABAAAAexMAAAAAAABsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3990,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAGwTAAAAAAAAcBMAAAAAAAAAAAAAcBMAAAAAAAB0EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBMAAAAAAABsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3994,
					1,
					"insert",
					{
						"characters": "dis"
					},
					"AwAAAIwTAAAAAAAAjRMAAAAAAAAAAAAAjRMAAAAAAACOEwAAAAAAAAAAAACOEwAAAAAAAI8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBMAAAAAAACMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4001,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKYTAAAAAAAApxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphMAAAAAAACmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4002,
					1,
					"insert",
					{
						"characters": " right"
					},
					"BgAAAKcTAAAAAAAAqBMAAAAAAAAAAAAAqBMAAAAAAACpEwAAAAAAAAAAAACpEwAAAAAAAKoTAAAAAAAAAAAAAKoTAAAAAAAAqxMAAAAAAAAAAAAAqxMAAAAAAACsEwAAAAAAAAAAAACsEwAAAAAAAK0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxMAAAAAAACnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4003,
					1,
					"insert",
					{
						"characters": " before"
					},
					"BwAAAK0TAAAAAAAArhMAAAAAAAAAAAAArhMAAAAAAACvEwAAAAAAAAAAAACvEwAAAAAAALATAAAAAAAAAAAAALATAAAAAAAAsRMAAAAAAAAAAAAAsRMAAAAAAACyEwAAAAAAAAAAAACyEwAAAAAAALMTAAAAAAAAAAAAALMTAAAAAAAAtBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRMAAAAAAACtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4004,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAALQTAAAAAAAAtRMAAAAAAAAAAAAAtRMAAAAAAAC2EwAAAAAAAAAAAAC2EwAAAAAAALcTAAAAAAAAAAAAALcTAAAAAAAAuBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBMAAAAAAAC0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					4005,
					1,
					"insert",
					{
						"characters": " edge"
					},
					"BQAAALgTAAAAAAAAuRMAAAAAAAAAAAAAuRMAAAAAAAC6EwAAAAAAAAAAAAC6EwAAAAAAALsTAAAAAAAAAAAAALsTAAAAAAAAvBMAAAAAAAAAAAAAvBMAAAAAAAC9EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBMAAAAAAAC4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					4006,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAL0TAAAAAAAAvhMAAAAAAAAAAAAAvhMAAAAAAAC/EwAAAAAAAAAAAAC/EwAAAAAAAMATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRMAAAAAAAC9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					4007,
					1,
					"insert",
					{
						"characters": " destroyed"
					},
					"CgAAAMATAAAAAAAAwRMAAAAAAAAAAAAAwRMAAAAAAADCEwAAAAAAAAAAAADCEwAAAAAAAMMTAAAAAAAAAAAAAMMTAAAAAAAAxBMAAAAAAAAAAAAAxBMAAAAAAADFEwAAAAAAAAAAAADFEwAAAAAAAMYTAAAAAAAAAAAAAMYTAAAAAAAAxxMAAAAAAAAAAAAAxxMAAAAAAADIEwAAAAAAAAAAAADIEwAAAAAAAMkTAAAAAAAAAAAAAMkTAAAAAAAAyhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBMAAAAAAADAEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4009,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAyhMAAAAAAADKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4012,
					1,
					"right_delete",
					null,
					"AQAAAKcTAAAAAAAApxMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAApxMAAAAAAACnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4013,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKcTAAAAAAAAqBMAAAAAAAAAAAAAqBMAAAAAAACwEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxMAAAAAAACnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					4050,
					1,
					"paste",
					null,
					"AgAAAPAUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAD8FAAAAAAAAAkAAABjb25uZWN0ZWQ",
					"AQAAAAAAAAABAAAA8BQAAAAAAAD5FAAAAAAAAAAAAAAAAPC/"
				],
				[
					4054,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAACAAAA1RMAAAAAAADVEwAAAAAAAAAAAAAAAPC//BQAAAAAAAD8FAAAAAAAAAAAAAAAAPC/"
				],
				[
					4057,
					1,
					"left_delete",
					null,
					"AQAAAD4UAAAAAAAAPhQAAAAAAAAmAAAAICAgICAgICBzZWxmLmRhZ3NjZW5lLnJlbW92ZUVkZ2UoZWRnZSk",
					"AQAAAAAAAAABAAAAZBQAAAAAAAA+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					4064,
					1,
					"insert",
					{
						"characters": "\nself.graphmo"
					},
					"DgAAACIVAAAAAAAAIxUAAAAAAAAAAAAAIxUAAAAAAAArFQAAAAAAAAAAAAArFQAAAAAAACwVAAAAAAAAAAAAACwVAAAAAAAALRUAAAAAAAAAAAAALRUAAAAAAAAuFQAAAAAAAAAAAAAuFQAAAAAAAC8VAAAAAAAAAAAAAC8VAAAAAAAAMBUAAAAAAAAAAAAAMBUAAAAAAAAxFQAAAAAAAAAAAAAxFQAAAAAAADIVAAAAAAAAAAAAADIVAAAAAAAAMxUAAAAAAAAAAAAAMxUAAAAAAAA0FQAAAAAAAAAAAAA0FQAAAAAAADUVAAAAAAAAAAAAADUVAAAAAAAANhUAAAAAAAAAAAAANhUAAAAAAAA3FQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhUAAAAAAAAiFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4065,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "graphmodel"
					},
					"AgAAADAVAAAAAAAAMBUAAAAAAAAHAAAAZ3JhcGhtbzAVAAAAAAAAOhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxUAAAAAAAA3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4066,
					1,
					"insert",
					{
						"characters": ".remov"
					},
					"BgAAADoVAAAAAAAAOxUAAAAAAAAAAAAAOxUAAAAAAAA8FQAAAAAAAAAAAAA8FQAAAAAAAD0VAAAAAAAAAAAAAD0VAAAAAAAAPhUAAAAAAAAAAAAAPhUAAAAAAAA/FQAAAAAAAAAAAAA/FQAAAAAAAEAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhUAAAAAAAA6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4067,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAEAVAAAAAAAAQRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBUAAAAAAABAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4068,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "remove_edge"
					},
					"AgAAADsVAAAAAAAAOxUAAAAAAAAGAAAAcmVtb3ZlOxUAAAAAAABGFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQRUAAAAAAABBFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4069,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEYVAAAAAAAASBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhUAAAAAAABGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4070,
					1,
					"insert",
					{
						"characters": "source"
					},
					"BgAAAEcVAAAAAAAASBUAAAAAAAAAAAAASBUAAAAAAABJFQAAAAAAAAAAAABJFQAAAAAAAEoVAAAAAAAAAAAAAEoVAAAAAAAASxUAAAAAAAAAAAAASxUAAAAAAABMFQAAAAAAAAAAAABMFQAAAAAAAE0VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxUAAAAAAABHFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4071,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":9,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "source_operator"
					},
					"AgAAAEcVAAAAAAAARxUAAAAAAAAGAAAAc291cmNlRxUAAAAAAABWFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRUAAAAAAABNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4072,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFYVAAAAAAAAVxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhUAAAAAAABWFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4073,
					1,
					"insert",
					{
						"characters": " target_"
					},
					"CAAAAFcVAAAAAAAAWBUAAAAAAAAAAAAAWBUAAAAAAABZFQAAAAAAAAAAAABZFQAAAAAAAFoVAAAAAAAAAAAAAFoVAAAAAAAAWxUAAAAAAAAAAAAAWxUAAAAAAABcFQAAAAAAAAAAAABcFQAAAAAAAF0VAAAAAAAAAAAAAF0VAAAAAAAAXhUAAAAAAAAAAAAAXhUAAAAAAABfFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxUAAAAAAABXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4074,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "target_operator"
					},
					"AgAAAFgVAAAAAAAAWBUAAAAAAAAHAAAAdGFyZ2V0X1gVAAAAAAAAZxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxUAAAAAAABfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4076,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAZxUAAAAAAABnFQAAAAAAAAAAAAAAAPC/"
				],
				[
					4080,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAApxEAAAAAAACnEQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "pylive/QtGraphEditor/nx_graph_model.py",
			"settings":
			{
				"buffer_size": 5521,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"cut",
					null,
					"AQAAAO0HAAAAAAAA7QcAAAAAAABCAQAAZGVmIHNldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46SGFzaGFibGUsIC8sICoqcHJvcHMpOgoJCSMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwoJCWNoYW5nZSA9IHt9CgkJZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CgkJCWlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKCQkJCWNoYW5nZVtrZXldID0gdmFsCgkJbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQoJCXNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQ",
					"AQAAAAAAAAABAAAALwkAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADIGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADYGAAAAAAAAAAAAADYGAAAAAAAAOAYAAAAAAAAAAAAAMwYAAAAAAAAzBgAAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAMgYAAAAAAAAyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAADUGAAAAAAAANQYAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAANgYAAAAAAAA2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAADUGAAAAAAAAdwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"cut",
					null,
					"AQAAAFYIAAAAAAAAVggAAAAAAABhAAAAZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46SGFzaGFibGUpOgoJCXNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQoJCXNlbGYuRy5yZW1vdmVfbm9kZShuKQ",
					"AQAAAAAAAAABAAAAtwgAAAAAAABWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAB6BwAAAAAAAHsHAAAAAAAAAAAAAHsHAAAAAAAAfQcAAAAAAAAAAAAAeAcAAAAAAAB4BwAAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAdwcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAHoHAAAAAAAAegcAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAewcAAAAAAAB7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAHoHAAAAAAAA2wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"cut",
					null,
					"AQAAADgJAAAAAAAAOAkAAAAAAABOAAAAZGVmIGdldE5vZGVQcm9wZXJ0eShzZWxmLCBuOkhhc2hhYmxlLCBuYW1lLCAvKToKCQlyZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVd",
					"AQAAAAAAAAABAAAAhgkAAAAAAAA4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAADMJAAAAAAAAMwkAAAAAAAADAAAACgkKMgkAAAAAAAAyCQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAANgkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAADMJAAAAAAAAMwkAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAANAkAAAAAAAA0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					3,
					"left_delete",
					null,
					"AwAAALoIAAAAAAAAuggAAAAAAAABAAAACrkIAAAAAAAAuQgAAAAAAAABAAAACbgIAAAAAAAAuAgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuwgAAAAAAAC7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAC8JAAAAAAAALwkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAMAkAAAAAAAAwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAHkHAAAAAAAAeQcAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAegcAAAAAAAB6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAHkHAAAAAAAAxwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQcAAAAAAAB5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcHAAAAAAAAeAcAAAAAAAAAAAAAeAcAAAAAAAB6BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "del"
					},
					"BAAAAEIEAAAAAAAAQwQAAAAAAAAAAAAAeQcAAAAAAAB5BwAAAAAAAAIAAAAJCUMEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABFBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgQAAAAAAABCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUEAAAAAAAARgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQQAAAAAAABFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAEwEAAAAAAAATAQAAAAAAAAHAAAAID0gTm9uZQ",
					"AQAAAAAAAAABAAAAUwQAAAAAAABMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAA7AAAACQkJc2VsZi5hZGRJbmxldChub2RlLCAiaW4iKQoJCQlzZWxmLmFkZE91dGxldChub2RlLCAib3V0Iik",
					"AQAAAAAAAAABAAAAkAMAAAAAAABVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVQMAAAAAAABVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEUKAAAAAAAARgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQoAAAAAAABFCgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAP8AAAAAAAAA/wAAAAAAAAAQAAAAVHVwbGVbSGFzaGFibGUsIA",
					"AQAAAAAAAAABAAAADwEAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAAgBAAAAAAAACAEAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAACQEAAAAAAAAJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAADUBAAAAAAAANQEAAAAAAAAQAAAAVHVwbGVbSGFzaGFibGUsIA",
					"AQAAAAAAAAABAAAARQEAAAAAAAA1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"left_delete",
					null,
					"AQAAAD4BAAAAAAAAPgEAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA1hQAAAAAAAAVEgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCmNsYXNzIE5YR3JhcGhNb2RlbChRT2JqZWN0KToKCW5vZGVzQWRkZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbSGFzaGFibGVdCglub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbSGFzaGFibGVdCglub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCglub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCgllZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICNMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCgllZGdlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgI0xpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KCWVkZ2VzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgIyBEaWN0W0hhc2hhYmxlLCBEaWN0W3N0ciwgQW55XV0KCWVkZ2VzUmVtb3ZlZCA9IFNpZ25hbChsaXN0KQoKCWRlZiBfX2luaXRfXyhzZWxmLCBHOm54LkRpR3JhcGg9bnguRGlHcmFwaCgpLCBwYXJlbnQ9Tm9uZSk6CgkJc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQoJCXNlbGYuRyA9IEcKCgkJZm9yIG4gaW4gc2VsZi5HLm5vZGVzOgoJCQlub2RlID0gc2VsZi5hZGROb2RlKG5hbWU9bikKCgkJZm9yIGUgaW4gc2VsZi5HLmVkZ2VzOgoJCQl1LCB2ID0gZQoJCQkKCQkJc2VsZi5hZGRFZGdlKHUsIHYpCgoJZGVmIHBhdGNoKHNlbGYsIEc6bnguRGlHcmFwaCk6CgkJLi4uCgkJcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgoJZGVmIF9fZGVsX18oc2VsZik6CgkJZGVsIHNlbGYuRwoJCSMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQoJCSMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQoJCSMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKCQkjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCgkJIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCglkZWYgYWRkTm9kZShzZWxmLCBuOkhhc2hhYmxlLCAvICwgKipwcm9wcyk6CgkJcHJpbnQoImFkZCBub2RlIiwgbikKCQlzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKCQlzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCgkJc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246cHJvcHN9KQoKCWRlZiBzZXROb2RlUHJvcGVydGllcyhzZWxmLCBuOkhhc2hhYmxlLCAvLCAqKnByb3BzKToKCQkjIGNoYW5nZSBndWFyZCBUT0RPOiBmaW5kIHJlbW92ZWQgcHJvcHMKCQljaGFuZ2UgPSB7fQoJCWZvciBrZXksIHZhbCBpbiBwcm9wcy5pdGVtcygpOgoJCQlpZiBrZXkgbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWwgIT0gc2VsZi5HLm5vZGVzW25dW2tleV06CgkJCQljaGFuZ2Vba2V5XSA9IHZhbAoJCW54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKCQlzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCglkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46SGFzaGFibGUsIG5hbWUsIC8pOgoJCXJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCglkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjpIYXNoYWJsZSk6CgkJc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZW1pdChbbl0pCgkJc2VsZi5HLnJlbW92ZV9ub2RlKG4pCgoJZGVmIGFkZEVkZ2Uoc2VsZiwgdTpIYXNoYWJsZSwgdjpIYXNoYWJsZSwgLyAsICoqcHJvcHMpOgoKCQlpZiB1IG5vdCBpbiBzZWxmLkcubm9kZXM6CgkJCXNlbGYuYWRkTm9kZSh1KQoJCWlmIHYgbm90IGluIHNlbGYuRy5ub2RlczoKCQkJc2VsZi5hZGROb2RlKHYpCgoJCXNlbGYuRy5hZGRfZWRnZSh1LCB2LCAqKnByb3BzKQoJCXNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdildKQoKCWRlZiByZW1vdmVfZWRnZShzZWxmLCB1Okhhc2hhYmxlLCB2Okhhc2hhYmxlKToKCQlzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSx2KV0pCgkJc2VsZi5HLnJlbW92ZV9lZGdlKCB1LHYgKQoKCWRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1Okhhc2hhYmxlLCB2Okhhc2hhYmxlLCAvLCAqKnByb3BzKToKCQlueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LHYpOiBwcm9wc30pCgkJc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkgKQoKCWRlZiBnZXRFZGdlUHJvcGVydHkoc2VsZiwgdTpIYXNoYWJsZSwgdjpIYXNoYWJsZSwgcHJvcCwgLyk6CgkJcmV0dXJuIHNlbGYuRy5lZGdlc1t1LCB2XVtwcm9wXQoKZnJvbSBweWxpdmUuUXRHcmFwaEVkaXRvci5lZGl0YWJsZV90ZXh0X2l0ZW0gaW1wb3J0IEVkaXRhYmxlVGV4dEl0ZW0KCgpjbGFzcyBTdGFuZGFyZE5vZGVXaWRnZXQoUUdyYXBoaWNzV2lkZ2V0KToKCWRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQ9Tm9uZSk6CgkJc3VwZXIoKS5fX2luaXRfXyhwYXJlbnQ9cGFyZW50KQoJCXNlbGYuc2V0R2VvbWV0cnkoUVJlY3QoMCwwLDEwMCwyNikpCgkJIyBFbmFibGUgZHJhZ2dpbmcgYW5kIHNlbGVjdGluZwoJCXNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzTW92YWJsZSkKCQlzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1Jc1NlbGVjdGFibGUpCgkJc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNHZW9tZXRyeUNoYW5nZXMpCgkJc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcykKCQlzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgoJCXNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQoJCXNlbGYubGFiZWwuc2V0UG9zKDUsNSkKCQlzZWxmLmxhYmVsLnNldFRleHRXaWR0aChzZWxmLmdlb21ldHJ5KCkud2lkdGgoKS0xMCkKCQlzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCglkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgoJCSMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCgkJIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKCQliZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cyIiIgoKCQkjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CgkJaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CgkJCSMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKCQkJc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCgkJZWxzZToKCQkJcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQoJCQlzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCglkZWYgcGFpbnQoc2VsZiwgcGFpbnRlcjpRUGFpbnRlciwgb3B0aW9uOlFTdHlsZU9wdGlvbkdyYXBoaWNzSXRlbSwgd2lkZ2V0PU5vbmUpOgoJCSMgb3B0aW9uLmRpcmVjdGlvbgoJCSMgb3B0aW9uLmZvbnRNZXRyaWNzCgkJIyBvcHRpb24ucGFsZXR0ZQoJCSMgb3B0aW9uLnJlY3QKCQkjIG9wdGlvbi5zdGF0ZQoJCSMgb3B0aW9uLnN0eWxlT2JqZWN0CgkJIyBvcHRpb24ubGV2ZWxPZkRldGFpbEZyb21UcmFuc2Zvcm0KCgoJCSMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKCQlwYWxldHRlOlFQYWxldHRlID0gb3B0aW9uLnBhbGV0dGUgI3R5cGU6IGlnbm9yZQoJCXN0YXRlOlFTdHlsZS5TdGF0ZUZsYWcgPSBvcHRpb24uc3RhdGUgIyB0eXBlOiBpZ25vcmUKCgkJcGFpbnRlci5zZXRCcnVzaChwYWxldHRlLmJhc2UoKSkKCQkjIHBhaW50ZXIuc2V0QnJ1c2goUXQuTm9CcnVzaCkKCgkJcGVuID0gUVBlbihwYWxldHRlLnRleHQoKS5jb2xvcigpLCAxKQoJCXBlbi5zZXRDb3NtZXRpYyhUcnVlKQoJCXBlbi5zZXRXaWR0aEYoMikKCQlpZiBzdGF0ZSAmIFFTdHlsZS5TdGF0ZUZsYWcuU3RhdGVfU2VsZWN0ZWQ6CgkJCXBlbi5zZXRDb2xvcihwYWxldHRlLmFjY2VudCgpLmNvbG9yKCkpCgkJcGFpbnRlci5zZXRQZW4ocGVuKQoJCXBhaW50ZXIuZHJhd1JvdW5kZWRSZWN0KDAuNSwwLjUsIHNlbGYuZ2VvbWV0cnkoKS53aWR0aCgpLCBzZWxmLmdlb21ldHJ5KCkuaGVpZ2h0KCksIDMsMykKCgoKCgoK",
					"AQAAAAAAAAABAAAA+QIAAAAAAAD5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMYFAAAAAAAAxwUAAAAAAAAAAAAAxwUAAAAAAADPBQAAAAAAAAAAAADPBQAAAAAAANAFAAAAAAAAAAAAANAFAAAAAAAA2AUAAAAAAAAAAAAAxwUAAAAAAADHBQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					4,
					"left_delete",
					null,
					"BAAAAM8FAAAAAAAAzwUAAAAAAAABAAAAIM4FAAAAAAAAzgUAAAAAAAABAAAAIM0FAAAAAAAAzQUAAAAAAAABAAAAIMwFAAAAAAAAzAUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA0AUAAAAAAADQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " nodes"
					},
					"BgAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADRBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAANIFAAAAAAAA0wUAAAAAAAAAAAAA0wUAAAAAAADUBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANUFAAAAAAAA1wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAADYBQAAAAAAANkFAAAAAAAAAAAAANkFAAAAAAAA2gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gUAAAAAAADWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANsFAAAAAAAA3AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wUAAAAAAADbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AUAAAAAAADoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOkFAAAAAAAA6wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QUAAAAAAADpBQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAOoFAAAAAAAA6wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gUAAAAAAADqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA7AUAAAAAAADtBQAAAAAAAAAAAADtBQAAAAAAAO4FAAAAAAAAAAAAAO4FAAAAAAAA7wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wUAAAAAAADrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAO8FAAAAAAAA8AUAAAAAAAAAAAAA8AUAAAAAAADxBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wUAAAAAAADvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA8gUAAAAAAADzBQAAAAAAAAAAAADzBQAAAAAAAPQFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " self.G.node"
					},
					"DAAAAPQFAAAAAAAA9QUAAAAAAAAAAAAA9QUAAAAAAAD2BQAAAAAAAAAAAAD2BQAAAAAAAPcFAAAAAAAAAAAAAPcFAAAAAAAA+AUAAAAAAAAAAAAA+AUAAAAAAAD5BQAAAAAAAAAAAAD5BQAAAAAAAPoFAAAAAAAAAAAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA/gUAAAAAAAD/BQAAAAAAAAAAAAD/BQAAAAAAAAAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AUAAAAAAAD0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAAGAAAAAAAAAQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAFRUAAAAAAAAUFQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54LkRpR3JhcGggPSBueC5EaUdyYXBoKCksIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5HID0gRwoKICAgICAgICBmb3IgbiBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIG5vZGUgPSBzZWxmLmFkZE5vZGUobmFtZT1uKQoKICAgICAgICBmb3IgZSBpbiBzZWxmLkcuZWRnZXM6CiAgICAgICAgICAgIHUsIHYgPSBlCgogICAgICAgICAgICBzZWxmLmFkZEVkZ2UodSwgdikKCiAgICBkZWYgcGF0Y2goc2VsZiwgRzogbnguRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZik6CiAgICAJcmV0dXJuIFtuIGZvciBuIGluIHNlbGYuRy5ub2Rlc10KCiAgICBkZWYgYWRkTm9kZShzZWxmLCBuOiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgcHJpbnQoImFkZCBub2RlIiwgbikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIGtleSwgdmFsIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGtleSBub3QgaW4gc2VsZi5HLm5vZGVzW25dIG9yIHZhbCAhPSBzZWxmLkcubm9kZXNbbl1ba2V5XToKICAgICAgICAgICAgICAgIGNoYW5nZVtrZXldID0gdmFsCiAgICAgICAgbnguc2V0X25vZGVfYXR0cmlidXRlcyhzZWxmLkcsIHtuOiBjaGFuZ2V9KQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBjaGFuZ2V9KQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcubm9kZXNbbl1bbmFtZV0KCiAgICBkZWYgcmVtb3ZlX25vZGUoc2VsZiwgbjogSGFzaGFibGUpOgogICAgICAgIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoW25dKQogICAgICAgIHNlbGYuRy5yZW1vdmVfbm9kZShuKQoKICAgIGRlZiBhZGRFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYpXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdildKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2KQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYpOiBwcm9wc30pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdl1bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AQAAAAAAAAABAAAAAQYAAAAAAAABBgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "->List[]"
					},
					"CAAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADdBQAAAAAAAAAAAADdBQAAAAAAAN4FAAAAAAAAAAAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA3wUAAAAAAADgBQAAAAAAAAAAAADgBQAAAAAAAOEFAAAAAAAAAAAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADjBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wUAAAAAAADbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "Hashab"
					},
					"BgAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gUAAAAAAADiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAOIFAAAAAAAA4gUAAAAAAAAGAAAASGFzaGFi4gUAAAAAAADqBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AUAAAAAAADoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACkJAAAAAAAAKgkAAAAAAAAAAAAAKgkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAADMJAAAAAAAAOwkAAAAAAAAAAAAAKgkAAAAAAAAqCQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAKQkAAAAAAAApCQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					4,
					"left_delete",
					null,
					"BAAAADIJAAAAAAAAMgkAAAAAAAABAAAAIDEJAAAAAAAAMQkAAAAAAAABAAAAIDAJAAAAAAAAMAkAAAAAAAABAAAAIC8JAAAAAAAALwkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMwkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwkAAAAAAAAvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " edges"
					},
					"BgAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgJAAAAAAAAOgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAkAAAAAAAA4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAADkJAAAAAAAAOgkAAAAAAAAAAAAAOgkAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAADwJAAAAAAAAPQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQkAAAAAAAA5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "->List"
					},
					"BgAAAD4JAAAAAAAAPwkAAAAAAAAAAAAAPwkAAAAAAABACQAAAAAAAAAAAABACQAAAAAAAEEJAAAAAAAAAAAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAABDCQAAAAAAAEQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgkAAAAAAAA+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					4,
					"left_delete",
					null,
					"BAAAAEMJAAAAAAAAQwkAAAAAAAABAAAAdEIJAAAAAAAAQgkAAAAAAAABAAAAc0EJAAAAAAAAQQkAAAAAAAABAAAAaUAJAAAAAAAAQAkAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAABCCQAAAAAAAEMJAAAAAAAAAAAAAEMJAAAAAAAARAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAkAAAAAAABACQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEQJAAAAAAAARgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "Tuple"
					},
					"BQAAAEYJAAAAAAAARwkAAAAAAAAAAAAARwkAAAAAAABICQAAAAAAAAAAAABICQAAAAAAAEkJAAAAAAAAAAAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgkAAAAAAABGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					5,
					"left_delete",
					null,
					"BQAAAEoJAAAAAAAASgkAAAAAAAABAAAAZUkJAAAAAAAASQkAAAAAAAABAAAAbEgJAAAAAAAASAkAAAAAAAABAAAAcEcJAAAAAAAARwkAAAAAAAABAAAAdUYJAAAAAAAARgkAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAASwkAAAAAAABLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "Tuple"
					},
					"BQAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEoJAAAAAAAATAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgkAAAAAAABKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "Hashable,"
					},
					"CQAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAABNCQAAAAAAAE4JAAAAAAAAAAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAAUgkAAAAAAABTCQAAAAAAAAAAAABTCQAAAAAAAFQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwkAAAAAAABLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " hashab"
					},
					"BwAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABWCQAAAAAAAFcJAAAAAAAAAAAAAFcJAAAAAAAAWAkAAAAAAAAAAAAAWAkAAAAAAABZCQAAAAAAAAAAAABZCQAAAAAAAFoJAAAAAAAAAAAAAFoJAAAAAAAAWwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAkAAAAAAABUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Hashable"
					},
					"AgAAAFUJAAAAAAAAVQkAAAAAAAAGAAAAaGFzaGFiVQkAAAAAAABdCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAF8JAAAAAAAAYAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABlCQAAAAAAAAAAAABlCQAAAAAAAGYJAAAAAAAAAAAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAABoCQAAAAAAAGkJAAAAAAAAAAAAAGkJAAAAAAAAagkAAAAAAAAAAAAAagkAAAAAAABrCQAAAAAAAAAAAABrCQAAAAAAAGwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwJAAAAAAAAbQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG0JAAAAAAAAbwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQkAAAAAAABtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4JAAAAAAAAcAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgkAAAAAAABuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "u,"
					},
					"AgAAAG8JAAAAAAAAcAkAAAAAAAAAAAAAcAkAAAAAAABxCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwkAAAAAAABvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAAHEJAAAAAAAAcgkAAAAAAAAAAAAAcgkAAAAAAABzCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQkAAAAAAABxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB2CQAAAAAAAAAAAAB2CQAAAAAAAHcJAAAAAAAAAAAAAHcJAAAAAAAAeAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " self.G"
					},
					"BwAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAB6CQAAAAAAAHsJAAAAAAAAAAAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAB9CQAAAAAAAH4JAAAAAAAAAAAAAH4JAAAAAAAAfwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAkAAAAAAAB4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "u,"
					},
					"AgAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewkAAAAAAAB7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAH0JAAAAAAAAfgkAAAAAAAAAAAAAfgkAAAAAAAB/CQAAAAAAAAAAAAB/CQAAAAAAAIAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQkAAAAAAAB9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAJAAAAAAAAgQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAkAAAAAAACACQAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": ".edges"
					},
					"BgAAAIcJAAAAAAAAiAkAAAAAAAAAAAAAiAkAAAAAAACJCQAAAAAAAAAAAACJCQAAAAAAAIoJAAAAAAAAAAAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwkAAAAAAACHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAkRUAAAAAAACMFQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc0Fib3V0VG9CZVJlbW92ZWQgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzUHJvcGVydGllc0NoYW5nZWQgPSBTaWduYWwoZGljdCkgICMgRGljdFtIYXNoYWJsZSwgRGljdFtzdHIsIEFueV1dCiAgICBub2Rlc1JlbW92ZWQgPSBTaWduYWwobGlzdCkKCiAgICBlZGdlc0FkZGVkID0gU2lnbmFsKGxpc3QpICAjIExpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZCA9IFNpZ25hbChsaXN0KSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZV1dCiAgICBlZGdlc1Byb3BlcnRpZXNDaGFuZ2VkID0gU2lnbmFsKGRpY3QpICAjIERpY3RbSGFzaGFibGUsIERpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkID0gU2lnbmFsKGxpc3QpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIEc6IG54LkRpR3JhcGggPSBueC5EaUdyYXBoKCksIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5HID0gRwoKICAgICAgICBmb3IgbiBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIG5vZGUgPSBzZWxmLmFkZE5vZGUobmFtZT1uKQoKICAgICAgICBmb3IgZSBpbiBzZWxmLkcuZWRnZXM6CiAgICAgICAgICAgIHUsIHYgPSBlCgogICAgICAgICAgICBzZWxmLmFkZEVkZ2UodSwgdikKCiAgICBkZWYgcGF0Y2goc2VsZiwgRzogbnguRGlHcmFwaCk6CiAgICAgICAgLi4uCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigiTm90IHlldCBpbXBsZW1lbnRlZCIpCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgZGVsIHNlbGYuRwogICAgICAgICMgc2VsZi5ub2Rlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLm5vZGVzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1JlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWRkZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYuZWRnZXNQcm9wZXJ0eUNoYW5nZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUmVtb3ZlZC5kaXNjb25uZWN0KCkKCiAgICBkZWYgbm9kZXMoc2VsZiktPkxpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIHByaW50KCJhZGQgbm9kZSIsIG4pCiAgICAgICAgc2VsZi5HLmFkZF9ub2RlKG4sICoqcHJvcHMpCiAgICAgICAgc2VsZi5ub2Rlc0FkZGVkLmVtaXQoW25dKQogICAgICAgIHNlbGYubm9kZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KHtuOiBwcm9wc30pCgogICAgZGVmIHNldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlLCAvLCAqKnByb3BzKToKICAgICAgICAjIGNoYW5nZSBndWFyZCBUT0RPOiBmaW5kIHJlbW92ZWQgcHJvcHMKICAgICAgICBjaGFuZ2UgPSB7fQogICAgICAgIGZvciBrZXksIHZhbCBpbiBwcm9wcy5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWwgIT0gc2VsZi5HLm5vZGVzW25dW2tleV06CiAgICAgICAgICAgICAgICBjaGFuZ2Vba2V5XSA9IHZhbAogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgZ2V0Tm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIHJlbW92ZV9ub2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKCiAgICBkZWYgZWRnZXMoc2VsZiktPmxpc3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAJcmV0dXJuIFsodSwgdikgZm9yIHUsIHYgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBhZGRFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgLywgKipwcm9wcyk6CiAgICAgICAgaWYgdSBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodSkKICAgICAgICBpZiB2IG5vdCBpbiBzZWxmLkcubm9kZXM6CiAgICAgICAgICAgIHNlbGYuYWRkTm9kZSh2KQoKICAgICAgICBzZWxmLkcuYWRkX2VkZ2UodSwgdiwgKipwcm9wcykKICAgICAgICBzZWxmLmVkZ2VzQWRkZWQuZW1pdChbKHUsIHYpXSkKCiAgICBkZWYgcmVtb3ZlX2VkZ2Uoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlKToKICAgICAgICBzZWxmLmVkZ2VzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFsodSwgdildKQogICAgICAgIHNlbGYuRy5yZW1vdmVfZWRnZSh1LCB2KQoKICAgIGRlZiBzZXRFZGdlUHJvcGVydGllcyhzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgIG54LnNldF9lZGdlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7KHUsIHYpOiBwcm9wc30pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoW25dLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIHByb3AsIC8pOgogICAgICAgIHJldHVybiBzZWxmLkcuZWRnZXNbdSwgdl1bcHJvcF0KCgpmcm9tIHB5bGl2ZS5RdEdyYXBoRWRpdG9yLmVkaXRhYmxlX3RleHRfaXRlbSBpbXBvcnQgRWRpdGFibGVUZXh0SXRlbQoKCmNsYXNzIFN0YW5kYXJkTm9kZVdpZGdldChRR3JhcGhpY3NXaWRnZXQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhcmVudD1Ob25lKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHBhcmVudD1wYXJlbnQpCiAgICAgICAgc2VsZi5zZXRHZW9tZXRyeShRUmVjdCgwLCAwLCAxMDAsIDI2KSkKICAgICAgICAjIEVuYWJsZSBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nCiAgICAgICAgc2VsZi5zZXRGbGFnKFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtSXNNb3ZhYmxlKQogICAgICAgIHNlbGYuc2V0RmxhZyhRR3JhcGhpY3NJdGVtLkdyYXBoaWNzSXRlbUZsYWcuSXRlbUlzU2VsZWN0YWJsZSkKICAgICAgICBzZWxmLnNldEZsYWcoUUdyYXBoaWNzSXRlbS5HcmFwaGljc0l0ZW1GbGFnLkl0ZW1TZW5kc0dlb21ldHJ5Q2hhbmdlcykKICAgICAgICBzZWxmLnNldEZsYWcoCiAgICAgICAgICAgIFFHcmFwaGljc0l0ZW0uR3JhcGhpY3NJdGVtRmxhZy5JdGVtU2VuZHNTY2VuZVBvc2l0aW9uQ2hhbmdlcwogICAgICAgICkKICAgICAgICBzZWxmLnNldEFjY2VwdEhvdmVyRXZlbnRzKFRydWUpCgogICAgICAgIHNlbGYubGFiZWwgPSBFZGl0YWJsZVRleHRJdGVtKHBhcmVudD1zZWxmKQogICAgICAgIHNlbGYubGFiZWwuc2V0UG9zKDUsIDUpCiAgICAgICAgc2VsZi5sYWJlbC5zZXRUZXh0V2lkdGgoc2VsZi5nZW9tZXRyeSgpLndpZHRoKCkgLSAxMCkKICAgICAgICBzZWxmLmxhYmVsLnNldFRleHQoIkhlbGxvIikKCiAgICBkZWYgbW91c2VEb3VibGVDbGlja0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpOgogICAgICAgICMgRW5hYmxlIGVkaXRpbmcgc3ViaXRlbXMgb24gZG91YmxlLWNsaWNrCiAgICAgICAgIiIicGFyZW50IG5vZGUgbXVzdCBtYW51YWxseSBjYWwgdGhlIGRvdWJsZSBjbGljayBldmVudCwKICAgICAgICBiZWNhdXNlIGFuIGl0ZW0gbm9yIHNsZWN0YWJsZSBub3IgbW92YWJsZSB3aWxsIG5vdCByZWNlaXZlIHByZXNzIGV2ZW50cwogICAgICAgICIiIgoKICAgICAgICAjIENoZWNrIGlmIGRvdWJsZS1jbGljayBpcyB3aXRoaW4gdGhlIHRleHQgaXRlbeKAmXMgYm91bmRpbmcgYm94CiAgICAgICAgaWYgc2VsZi5sYWJlbC5jb250YWlucyhzZWxmLm1hcEZyb21TY2VuZShldmVudC5zY2VuZVBvcygpKSk6CiAgICAgICAgICAgICMgRm9yd2FyZCB0aGUgZXZlbnQgdG8gbGFiZWwgaWYgY2xpY2tlZCBpbnNpZGUgaXQKICAgICAgICAgICAgc2VsZi5sYWJlbC5tb3VzZURvdWJsZUNsaWNrRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIk5vZGVJdGVtLT5tb3VzZURvdWJsZUNsaWNrRXZlbnQiKQogICAgICAgICAgICBzdXBlcigpLm1vdXNlRG91YmxlQ2xpY2tFdmVudChldmVudCkKCiAgICBkZWYgcGFpbnQoCiAgICAgICAgc2VsZiwgcGFpbnRlcjogUVBhaW50ZXIsIG9wdGlvbjogUVN0eWxlT3B0aW9uR3JhcGhpY3NJdGVtLCB3aWRnZXQ9Tm9uZQogICAgKToKICAgICAgICAjIG9wdGlvbi5kaXJlY3Rpb24KICAgICAgICAjIG9wdGlvbi5mb250TWV0cmljcwogICAgICAgICMgb3B0aW9uLnBhbGV0dGUKICAgICAgICAjIG9wdGlvbi5yZWN0CiAgICAgICAgIyBvcHRpb24uc3RhdGUKICAgICAgICAjIG9wdGlvbi5zdHlsZU9iamVjdAogICAgICAgICMgb3B0aW9uLmxldmVsT2ZEZXRhaWxGcm9tVHJhbnNmb3JtCgogICAgICAgICMgRHJhdyB0aGUgbm9kZSByZWN0YW5nbGUKICAgICAgICBwYWxldHRlOiBRUGFsZXR0ZSA9IG9wdGlvbi5wYWxldHRlICAjIHR5cGU6IGlnbm9yZQogICAgICAgIHN0YXRlOiBRU3R5bGUuU3RhdGVGbGFnID0gb3B0aW9uLnN0YXRlICAjIHR5cGU6IGlnbm9yZQoKICAgICAgICBwYWludGVyLnNldEJydXNoKHBhbGV0dGUuYmFzZSgpKQogICAgICAgICMgcGFpbnRlci5zZXRCcnVzaChRdC5Ob0JydXNoKQoKICAgICAgICBwZW4gPSBRUGVuKHBhbGV0dGUudGV4dCgpLmNvbG9yKCksIDEpCiAgICAgICAgcGVuLnNldENvc21ldGljKFRydWUpCiAgICAgICAgcGVuLnNldFdpZHRoRigyKQogICAgICAgIGlmIHN0YXRlICYgUVN0eWxlLlN0YXRlRmxhZy5TdGF0ZV9TZWxlY3RlZDoKICAgICAgICAgICAgcGVuLnNldENvbG9yKHBhbGV0dGUuYWNjZW50KCkuY29sb3IoKSkKICAgICAgICBwYWludGVyLnNldFBlbihwZW4pCiAgICAgICAgcGFpbnRlci5kcmF3Um91bmRlZFJlY3QoCiAgICAgICAgICAgIDAuNSwgMC41LCBzZWxmLmdlb21ldHJ5KCkud2lkdGgoKSwgc2VsZi5nZW9tZXRyeSgpLmhlaWdodCgpLCAzLCAzCiAgICAgICAgKQo",
					"AQAAAAAAAAABAAAAWwgAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/examples/python_function_graph/function_widget.py",
			"settings":
			{
				"buffer_size": 12045,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"View Package File"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/blog",
		"/C/dev/src/pylive/expreiments",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/examples",
		"/C/dev/src/pylive/pylive/utils"
	],
	"file_history":
	[
		"/C/dev/src/pylive/pylive/QtGraphEditor/infinite_graphicsview_optimized.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/utils/unique.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
		"/C/dev/src/pylive/blog/2024_12_18-houdini-meats-python.md",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_model.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/function_widget.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtTerminal/logwindow.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/abstract_graph_deletage.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/graphview_with_delegate.py",
		"/C/dev/src/pylive/pylive/python_function_graph/function_graph_view.py",
		"/C/dev/src/pylive/expreiments/inspect_available_functions.py",
		"/C/dev/src/pylive/expreiments/inspect_functions_experiment.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/nx_graph_model.py",
		"/P/!!INSTALL!!/____Install 2024/TVPaint Animation 10 Pro 10.0.16 (32 Bit)/Install.Notes.nfo",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/Users/and/Desktop/TVPaint Animation 10 Pro 10.0.16 (32 Bit)/Install.Notes.nfo",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/abstract_graph_delegate.py",
		"/C/dev/src/pylive/expreiments/ListItemDelegate-example.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_node_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/ConnectableGraphicsItem.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/edge_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/QGraphicsArrowItem.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/Connectable.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_databased.py",
		"/C/dev/src/pylive/expreiments/built-a-dependency-graph-of-a-python-codebase.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_columnbased.py",
		"/C/dev/src/pylive/pylive/examples/livescript.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_databased.py",
		"/C/dev/src/pylive/docs/2024_12_06-hot-reloading-a-python-script.md",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/pylive/QtScriptEditor/cell_support.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/line_number_area.py",
		"/C/dev/src/pylive/tests/test_cells.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_with_exec.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/tests/test_function_signatures.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/display.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_skeleton.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/IPython/utils/terminal.py",
		"/C/dev/src/pylive/pylive/QtTerminal/terminal_with_exec.py",
		"/C/dev/src/pylive/pylive/render_engine/render_layers.py",
		"/C/dev/src/pylive/script_examples_to_run_live/spherical_transform.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/script_cursor.py",
		"/C/dev/src/pylive/pylive/__main__.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_skeleton.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_with_exec.py",
		"/C/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_number_editor.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/file_link.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/invisibles_highlighter.py",
		"/C/dev/src/pylive/script_examples_to_run_live/livescript_demonstration.py",
		"/C/dev/src/pylive/script_examples_to_run_live/lorem_ipsum.md",
		"/C/dev/src/pylive/expreiments/file_textdocument_link.py",
		"/C/dev/src/pylive/pylive/__init__.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/__init__.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_app_with_qtconsole.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/asttokens/line_numbers.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/old_architecture/script_editor_simple.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
		"/C/dev/src/pylive/expreiments/glcanvas.py",
		"/C/dev/src/pylive/pylive/render_engine/regl/regl.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_skeleton.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/glcanvas.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLWindow_with_qopengl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget_with_request_animation.py",
		"/C/dev/src/pylive/pylive/render_engine/utils/__init__.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget-with_painting_signal.py",
		"/C/dev/src/pylive/pylive/render_engine/glwidget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWindow.py",
		"/C/Users/andris/AppData/Local/Temp/2ea7c807-5541-48c5-9e23-9d4d4826a0ed_Microsoft Office 2021 Pro Plus.zip.0ed/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/Users/andris/Downloads/Microsoft Office 2021 Pro Plus (365 ) + Patch/Microsoft Office 2021 Pro Plus/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/dev/src/pylive/expreiments/opengl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pygame_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/opengl_outside_window.py",
		"/C/dev/src/pylive/pylive/render_engine/orbit_control.py",
		"/C/dev/src/pylive/pylive/render_engine/lookAt_standalone.vert",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/linter_widget.py",
		"/C/dev/src/pylive/pylive/logwindow.py",
		"/C/dev/src/pylive/pylive/shaders/billboard.vert",
		"/C/dev/src/pylive/pylive/render_engine/resource_manager.py",
		"/C/dev/src/pylive/pylive/render_engine/examples/1 render layers.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/unified_titlebar.py",
		"/C/dev/src/pylive/pylive/render_engine/camera.py",
		"/C/dev/src/pylive/pylive/shaders/default_vertex_shader.vert",
		"/C/dev/src/pylive/pylive/shaders/flat_fragment_shader.frag",
		"/C/dev/src/pylive/gloo/render_layers.py",
		"/C/dev/src/pylive/gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/orbit_control.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_window_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/rendering_with_qt.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/qpygletwidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_1.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget (Not Working).py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_2.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_canvas_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyglet_on_QWidget.py",
		"/C/dev/src/pylive/expreiments/ipython/ipython_kernel.py",
		"/C/dev/src/pylive/expreiments/ipython/qtconsole_inprocess1.py",
		"/C/dev/src/pylive/expreiments/ipython/simple_console.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_ipython.py",
		"/C/dev/src/pylive/expreiments/simple_console.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_gpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notbook_with_chatgpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/live_framework.py",
		"/C/dev/src/pylive/expreiments/ipython_kernel.py",
		"/C/dev/src/pylive/pylive/examples/livenotebook.py",
		"/C/Users/andris/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0/LocalCache/local-packages/Python312/site-packages/PySide6/QtGui.pyi",
		"/C/dev/src/pylive/expreiments/visualize_function_dependencies.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter_OLD.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_completer.py"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"disconnected",
			"connected",
			"onConn",
			"PanAndZoomGraphicsView",
			"QGraphicsTextItem",
			"PinWidget",
			"handleNodesProp",
			"handlenodesProp",
			"nodedele",
			"n = ",
			"NodeWidget",
			"print",
			"geometry",
			"createNodeW",
			"delegate",
			"initiate",
			"contextMenu",
			"eventFilter",
			"intersectLineWithRectangle",
			"intersectLineWithPath",
			"ellipse",
			"intersectRay",
			"rect_max[1]",
			"rect_min[1]",
			"rect_max[0]",
			"rect_min[0]",
			"print",
			"intersect",
			"intersectLineWithPath",
			"intersectLine",
			"intersect",
			"intersectRayWithPath",
			"intersectLine",
			"print",
			".target",
			".source",
			"def paint(",
			"def paint",
			"Signal",
			"scenePositionChanged",
			"scenePositionChan ged",
			"ItemScenePositionHasChanged",
			"print",
			"LiveScript",
			"cells",
			"cell",
			"insertbar",
			"trimesh",
			"self.cell",
			"setEditor",
			"cell",
			"status",
			"self._wi",
			"saveFile",
			"def setup",
			"def setu[",
			"setup",
			"self.document",
			"updateWindowTitle",
			"modified",
			"def open",
			"setPreview",
			"pylive.display",
			"get_line_at_offset",
			"updateLine",
			"LineNumberArea",
			"line number",
			"setAttribute(",
			"setAttribute",
			"get_context",
			"QOpenGLWindow",
			"import QOpenGLWindow",
			"Literal",
			"literal",
			"Searching",
			"Lityeral",
			"dtype",
			"\t\t'",
			"internal_format",
			"dtype",
			"mode",
			"varyings_capture_mode",
			"internal_format",
			"dtype",
			"internal_format",
			"dtype",
			"internal_format",
			"varyings_capture_mode",
			"self",
			"for",
			"framebuffers",
			"placeholder",
			"find",
			"fin",
			"clearNo",
			"showException",
			"evalu",
			"completer",
			"RopeC",
			"lineNumberArea",
			"completer",
			"print",
			"new file",
			"setWindowTitle",
			"modifie",
			"setPreviewCollapse",
			"contentChang",
			"setupMenui",
			"NodeW",
			"self.palette",
			"threshold",
			"cancel",
			"interactive_edge_end_pin",
			"interactive_edge_start_pin",
			"interactive_edge_end_pin",
			"interactive_edge_moving_pin",
			"interactive_edge_start_pin",
			"self._pare",
			".parent_node",
			"_edges",
			"GrabThreshold",
			"center",
			"HeaderWidget",
			"palette",
			"updatePosition",
			"pinAt",
			"onNodeEditorChange",
			"onnodePropertyChange"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bottom",
			"top",
			"right",
			"left",
			"self._document",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pylive/QtGraphEditor/dag_graph_graphics_scene.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33198,
						"regions":
						{
						},
						"selection":
						[
							[
								20522,
								20534
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6511.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "expreiments/inspect_functions_experiment.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1953,
						"regions":
						{
						},
						"selection":
						[
							[
								1612,
								1622
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/inspect_functions_experiment.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "pylive/examples/python_function_graph/main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8112,
						"regions":
						{
						},
						"selection":
						[
							[
								4519,
								4519
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/examples/python_function_graph/main.py",
							"rulers":
							[
								80
							],
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1638.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "C:\\dev\\src\\pylive\\pylive\\utils",
							"lsp_uri": "buffer:112",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "pylive/QtGraphEditor/nx_graph_model.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5521,
						"regions":
						{
						},
						"selection":
						[
							[
								2141,
								2141
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtGraphEditor/nx_graph_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pylive/examples/python_function_graph/function_widget.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12045,
						"regions":
						{
						},
						"selection":
						[
							[
								6589,
								6464
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/examples/python_function_graph/function_widget.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2686.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.443302286377,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 157.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"geo",
				"pylive\\utils\\geo.py"
			],
			[
				"nx",
				"pylive\\QtGraphEditor\\NetrowkXGraphditor\\NXGraphView.py"
			],
			[
				"unique",
				"pylive\\pylive\\utils\\unique.py"
			],
			[
				"linenu",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"test",
				"pylive\\tests\\test_cells.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"linen",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"lineare",
				"pylive\\pylive\\QtScriptEditor\\components\\line_number_area.py"
			],
			[
				"terminal",
				"pylive\\pylive\\QtTerminal\\terminal_with_exec.py"
			],
			[
				"termina",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\terminal.py"
			],
			[
				"scripte",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"script",
				"pylive\\pylive\\QtScriptEditor\\components\\script_cursor.py"
			],
			[
				"pyg",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"numbere",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"highlight",
				"pylive\\pylive\\QtScriptEditor\\components\\invisibles_highlighter.py"
			],
			[
				"glca",
				"pylive\\script_examples_to_run_live\\glcanvas_widget_with_moderngl.py"
			],
			[
				"filelink",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"displ",
				"pylive\\pylive\\QtLiveApp\\display.py"
			],
			[
				"line",
				"pylive\\.venv\\Lib\\site-packages\\asttokens\\line_numbers.py"
			],
			[
				"scri",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"main",
				"pylive\\pylive\\render_engine\\regl\\main.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "circle",
		"selected_items":
		[
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 307.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
