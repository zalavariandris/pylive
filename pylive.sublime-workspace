{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Node",
				"NodeId"
			],
			[
				"outlet",
				"outlet_graphics_object"
			],
			[
				"Outlet",
				"OutletGraphicsObject"
			],
			[
				"Link",
				"LinkGraphicsObject"
			],
			[
				"NX",
				"NXNetworkScene"
			],
			[
				"addP",
				"addPolygon"
			],
			[
				"out",
				"outletGraphicsObject"
			],
			[
				"outl",
				"outletGraphicsObject"
			],
			[
				"P",
				"PenStyle"
			],
			[
				"Networ",
				"NetrowkXGraphEditor"
			],
			[
				"NotImpl",
				"NotImplementedError"
			],
			[
				"child",
				"childrenBoundingRect"
			],
			[
				"oute",
				"outletAt"
			],
			[
				"Qpoin",
				"QPointF"
			],
			[
				"setAcc",
				"setAcceptHoverEvents"
			],
			[
				"item",
				"itemAt"
			],
			[
				"ungrab",
				"ungrabMouse"
			],
			[
				"NotIm",
				"NotImplementedError"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"mapFro",
				"mapFromScene"
			],
			[
				"Inlet",
				"InletGraphicsObject"
			],
			[
				"GraphicsSceneMou",
				"GraphicsSceneMousePress"
			],
			[
				"scene",
				"_scene"
			],
			[
				"GraphicsN",
				"GraphicsNodeItem"
			],
			[
				"NXGraphScen",
				"NXGraphSceneMouseTool"
			],
			[
				"make",
				"make_fillet_path"
			],
			[
				"ar",
				"arcMoveTo"
			],
			[
				"mapFrom",
				"mapFromParent"
			],
			[
				"arcTo",
				"arcMoveTo"
			],
			[
				"_in",
				"_inlet_graphics_objects"
			],
			[
				"_inl",
				"_inlet_graphics_objects"
			],
			[
				"nx_grp",
				"nx_graph_graphics_items"
			],
			[
				"Gra",
				"GraphicsPortItem"
			],
			[
				"Graphics",
				"GraphicsVertexItem"
			],
			[
				"graph",
				"graphscene"
			],
			[
				"onNode",
				"onNodeDeleted"
			],
			[
				"onC",
				"onNodeCreated"
			],
			[
				"node",
				"nodesAdded"
			],
			[
				"onLink",
				"onLinkDeleted"
			],
			[
				"edge",
				"edgesAdded"
			],
			[
				"inde",
				"ItemIndexMethod"
			],
			[
				"add",
				"addNode"
			],
			[
				"update",
				"updateAttachedNodes"
			],
			[
				"getN",
				"getNodeProperty"
			],
			[
				"Nx",
				"NXGraphModel"
			],
			[
				"Connection",
				"ConnectionType"
			],
			[
				"Item",
				"ItemScenePositionHasChanged"
			],
			[
				"Vertex",
				"VertexElement"
			],
			[
				"Fla",
				"GraphicsItemFlag"
			],
			[
				"setAcce",
				"setAcceptHoverEvents"
			],
			[
				"gr",
				"createItemGroup"
			],
			[
				"GraphicsO",
				"GraphicsPortItem"
			],
			[
				"setL",
				"setLine"
			],
			[
				"QFo",
				"QFont"
			],
			[
				"create",
				"createAttributeEditor"
			],
			[
				"mous",
				"mouseMoveEvent"
			],
			[
				"Mous",
				"MouseButtonPress"
			],
			[
				"T",
				"Type"
			],
			[
				"ins",
				"installEventFilter"
			],
			[
				"_a",
				"_attribute_to_widget_map"
			],
			[
				"parent",
				"parentItem"
			],
			[
				"QFileO",
				"QFileDialog"
			],
			[
				"edge_",
				"_edge_to_widget_map"
			],
			[
				"_widget_to",
				"_widget_to_node_map"
			],
			[
				"up",
				"updateEdgePosition"
			],
			[
				"setAccep",
				"setAcceptHoverEvents"
			],
			[
				"Att",
				"AttributeError"
			],
			[
				"hei",
				"height"
			],
			[
				"setB",
				"setBrush"
			],
			[
				"chil",
				"childrenBoundingRect"
			],
			[
				"NXGra",
				"NXGraphView"
			],
			[
				"_wi",
				"_widget_to_node_map"
			],
			[
				"nodes",
				"nodesPropertiesChanged"
			],
			[
				"setP",
				"setParentItem"
			],
			[
				"_widg",
				"_widget_to_node_map"
			],
			[
				"remove",
				"removeEdge"
			],
			[
				"hover",
				"hoverMoveEvent"
			],
			[
				"isEnd",
				"_isEndHighlighted"
			],
			[
				"widget_t",
				"_widget_to_edge_map"
			],
			[
				"shape",
				"shape_bbox"
			],
			[
				"Connect",
				"ConnectionEvent"
			],
			[
				"model",
				"_model"
			],
			[
				"widget_",
				"_widget_to_node_map"
			],
			[
				"QGraphicsS",
				"QGraphicsScene"
			],
			[
				"pyl",
				"pylive"
			],
			[
				"ConnectionL",
				"ConnectionLeaveType"
			],
			[
				"setSiz",
				"setSizePolicy"
			],
			[
				"se",
				"setAlignment"
			],
			[
				"main",
				"main_layout"
			],
			[
				"header",
				"header_widget"
			],
			[
				"outlet_",
				"outlet_row"
			],
			[
				"QGraphicsLi",
				"QGraphicsLinearLayout"
			],
			[
				"inlet_r",
				"inlet_row_layout"
			],
			[
				"QGraphicsLine",
				"QGraphicsLinearLayout"
			],
			[
				"QGraph",
				"QGraphicsLayout"
			],
			[
				"Q",
				"QGraphicsLinearLayout"
			],
			[
				"size",
				"sizeHint"
			],
			[
				"inlet",
				"inlet_layout"
			],
			[
				"inle",
				"inlet_layout"
			],
			[
				"GraphicsMou",
				"GraphicsSceneMousePress"
			],
			[
				"sceneEven",
				"sceneEventFilter"
			],
			[
				"instal",
				"installSceneEventFilter"
			],
			[
				"NodeW",
				"NodeWidget2"
			],
			[
				"Arrow",
				"QGraphicsArrowItem"
			],
			[
				"_node",
				"_node_edges"
			],
			[
				"trigg",
				"triggered"
			],
			[
				"tri",
				"triggered"
			],
			[
				"setS",
				"setStyle"
			],
			[
				"QMenu",
				"QMenuBar"
			],
			[
				"text",
				"textChanged"
			],
			[
				"_edg",
				"_edge_targets"
			],
			[
				"nx",
				"nx_inspector_view"
			],
			[
				"ce",
				"cellWidget"
			],
			[
				"itemA",
				"itemAt"
			],
			[
				"QTableW",
				"QTableWidgetItem"
			],
			[
				"QTable",
				"QTableWidgetItem"
			],
			[
				"on_",
				"on_item_changed"
			],
			[
				"clear",
				"clearContents"
			],
			[
				"QAbleW",
				"QTableWidgetItem"
			],
			[
				"setVer",
				"setVerticalHeaderItem"
			],
			[
				"inser",
				"insertRow"
			],
			[
				"set",
				"setText"
			],
			[
				"upda",
				"updateView"
			],
			[
				"patch_",
				"patch_list"
			],
			[
				"dic",
				"dict_diff"
			],
			[
				"begin",
				"beginInsertRows"
			],
			[
				"nodelist",
				"nodelistview"
			],
			[
				"nodel",
				"nodelist"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pylive/NetworkXGraphEditor/nx_network_scene.py",
			"settings":
			{
				"buffer_size": 13915,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1195,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAiysAAAAAAACLKwAAAAAAAAAAAAAAAPC/"
				],
				[
					1242,
					1,
					"insert",
					{
						"characters": "Network"
					},
					"CAAAAIwuAAAAAAAAjS4AAAAAAAAAAAAAjS4AAAAAAACNLgAAAAAAAAUAAABHcmFwaI0uAAAAAAAAji4AAAAAAAAAAAAAji4AAAAAAACPLgAAAAAAAAAAAACPLgAAAAAAAJAuAAAAAAAAAAAAAJAuAAAAAAAAkS4AAAAAAAAAAAAAkS4AAAAAAACSLgAAAAAAAAAAAACSLgAAAAAAAJMuAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjC4AAAAAAACRLgAAAAAAAAAAAAAAAPC/"
				],
				[
					1244,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAky4AAAAAAACTLgAAAAAAAAAAAAAAAPC/"
				],
				[
					1266,
					1,
					"paste",
					null,
					"AgAAAA0yAAAAAAAAGzIAAAAAAAAAAAAAGzIAAAAAAAAbMgAAAAAAAAwAAABOWEdyYXBoU2NlbmU",
					"AQAAAAAAAAABAAAADTIAAAAAAAAZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1275,
					1,
					"paste",
					null,
					"AgAAAEYjAAAAAAAAVCMAAAAAAAAAAAAAVCMAAAAAAABUIwAAAAAAAAwAAABOWEdyYXBoU2NlbmU",
					"AQAAAAAAAAABAAAARiMAAAAAAABSIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1283,
					1,
					"paste",
					null,
					"AgAAAMknAAAAAAAA1ycAAAAAAAAAAAAA1ycAAAAAAADXJwAAAAAAAAwAAABOWEdyYXBoU2NlbmU",
					"AQAAAAAAAAABAAAAyScAAAAAAADVJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1287,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAACygAAAAAAAALKAAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAJA4AAAAAAAAkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					1321,
					2,
					"left_delete",
					null,
					"AgAAAHoxAAAAAAAAejEAAAAAAAATAAAAICAgICAgICB1LCB2LCBrID0gZXkxAAAAAAAAeTEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAjTEAAAAAAAB6MQAAAAAAAAAAAAAAAPC/"
				],
				[
					1323,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAeTEAAAAAAAB5MQAAAAAAAAAAAAAAAPC/"
				],
				[
					1327,
					1,
					"left_delete",
					null,
					"AQAAAJwxAAAAAAAAnDEAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAnTEAAAAAAACdMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1328,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAJwxAAAAAAAAnTEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnDEAAAAAAACcMQAAAAAAAAAAAAAAAPC/"
				],
				[
					1330,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AQAAAAAAAAABAAAAnTEAAAAAAACdMQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/NetworkXGraphEditor/nx_graph_model.py",
			"settings":
			{
				"buffer_size": 4530,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					23,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAFIOAAAAAAAAUw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUg4AAAAAAABSDgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFMOAAAAAAAAVA4AAAAAAAAAAAAAVA4AAAAAAABVDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUw4AAAAAAABTDgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUOAAAAAAAAVg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQ4AAAAAAABVDgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAWREAAAAAAABZEQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKSAtPiBib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBpbkVkZ2VzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICAiIiJyZXRydW4gaW5jb21pbmcgZWRnZXMgdG8gdGhlIG5vZGUiIiIKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuaW5fZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgb3V0RWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUKICAgICkgLT4gbGlzdFt0dXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgIiIicmV0cnVuIGluY29taW5nIGVkZ2VzIHRvIHRoZSBub2RlIiIiCiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLm91dF9lZGdlcyhuLCBrZXlzPVRydWUpXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKSAtPiBOb25lOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgayA9IHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrLCAqKnByb3BzKQogICAgICAgIHNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiByZW1vdmVFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUpOgogICAgICAgIHNlbGYuZWRnZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCiAgICAgICAgc2VsZi5HLnJlbW92ZV9lZGdlKHUsIHYsIGspCiAgICAgICAgc2VsZi5lZGdlc1JlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2LCBrKTogcHJvcHN9KQogICAgICAgIHNlbGYuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFsodSwgdiwgayldLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCBwcm9wLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLmVkZ2VzW3UsIHYsIGtdW3Byb3BdCgogICAgZGVmIGlzRWRnZUFsbG93ZWQoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSkgLT4gYm9vbDoKICAgICAgICBpZiB1ID09IHY6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiBUcnVlCg",
					"AQAAAAAAAAABAAAALA4AAAAAAAAsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " #"
					},
					"AgAAAHcOAAAAAAAAeA4AAAAAAAAAAAAAeA4AAAAAAAB5DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdw4AAAAAAAB3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " note:"
					},
					"BgAAAHkOAAAAAAAAeg4AAAAAAAAAAAAAeg4AAAAAAAB7DgAAAAAAAAAAAAB7DgAAAAAAAHwOAAAAAAAAAAAAAHwOAAAAAAAAfQ4AAAAAAAAAAAAAfQ4AAAAAAAB+DgAAAAAAAAAAAAB+DgAAAAAAAH8OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ4AAAAAAAB5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8OAAAAAAAAgA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfw4AAAAAAAB/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIAOAAAAAAAAgQ4AAAAAAAAAAAAAgQ4AAAAAAACCDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgA4AAAAAAACADgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " k"
					},
					"AgAAAIIOAAAAAAAAgw4AAAAAAAAAAAAAgw4AAAAAAACEDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgg4AAAAAAACCDgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAIQOAAAAAAAAhQ4AAAAAAAAAAAAAhQ4AAAAAAACGDgAAAAAAAAAAAACGDgAAAAAAAIcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhA4AAAAAAACEDgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " nont"
					},
					"BQAAAIcOAAAAAAAAiA4AAAAAAAAAAAAAiA4AAAAAAACJDgAAAAAAAAAAAACJDgAAAAAAAIoOAAAAAAAAAAAAAIoOAAAAAAAAiw4AAAAAAAAAAAAAiw4AAAAAAACMDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhw4AAAAAAACHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAIsOAAAAAAAAiw4AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAjA4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "e,"
					},
					"AgAAAIsOAAAAAAAAjA4AAAAAAAAAAAAAjA4AAAAAAACNDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiw4AAAAAAACLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " netwo"
					},
					"BgAAAI0OAAAAAAAAjg4AAAAAAAAAAAAAjg4AAAAAAACPDgAAAAAAAAAAAACPDgAAAAAAAJAOAAAAAAAAAAAAAJAOAAAAAAAAkQ4AAAAAAAAAAAAAkQ4AAAAAAACSDgAAAAAAAAAAAACSDgAAAAAAAJMOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQ4AAAAAAACNDgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "rkx"
					},
					"AwAAAJMOAAAAAAAAlA4AAAAAAAAAAAAAlA4AAAAAAACVDgAAAAAAAAAAAACVDgAAAAAAAJYOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkw4AAAAAAACTDgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " will"
					},
					"BQAAAJYOAAAAAAAAlw4AAAAAAAAAAAAAlw4AAAAAAACYDgAAAAAAAAAAAACYDgAAAAAAAJkOAAAAAAAAAAAAAJkOAAAAAAAAmg4AAAAAAAAAAAAAmg4AAAAAAACbDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlg4AAAAAAACWDgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAJsOAAAAAAAAnA4AAAAAAAAAAAAAnA4AAAAAAACdDgAAAAAAAAAAAACdDgAAAAAAAJ4OAAAAAAAAAAAAAJ4OAAAAAAAAnw4AAAAAAAAAAAAAnw4AAAAAAACgDgAAAAAAAAAAAACgDgAAAAAAAKEOAAAAAAAAAAAAAKEOAAAAAAAAog4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmw4AAAAAAACbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAKIOAAAAAAAAow4AAAAAAAAAAAAAow4AAAAAAACkDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAog4AAAAAAACiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " default"
					},
					"CAAAAKQOAAAAAAAApQ4AAAAAAAAAAAAApQ4AAAAAAACmDgAAAAAAAAAAAACmDgAAAAAAAKcOAAAAAAAAAAAAAKcOAAAAAAAAqA4AAAAAAAAAAAAAqA4AAAAAAACpDgAAAAAAAAAAAACpDgAAAAAAAKoOAAAAAAAAAAAAAKoOAAAAAAAAqw4AAAAAAAAAAAAAqw4AAAAAAACsDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApA4AAAAAAACkDgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAK8OAAAAAAAAsA4AAAAAAAAAAAAAsA4AAAAAAACxDgAAAAAAAAAAAACxDgAAAAAAALIOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArA4AAAAAAACsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					4,
					"left_delete",
					null,
					"BAAAALEOAAAAAAAAsQ4AAAAAAAABAAAAZbAOAAAAAAAAsA4AAAAAAAABAAAAda8OAAAAAAAArw4AAAAAAAABAAAAbK4OAAAAAAAArg4AAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAsg4AAAAAAACyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "alue"
					},
					"BAAAAK4OAAAAAAAArw4AAAAAAAAAAAAArw4AAAAAAACwDgAAAAAAAAAAAACwDgAAAAAAALEOAAAAAAAAAAAAALEOAAAAAAAAsg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg4AAAAAAACuDgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAALIOAAAAAAAAsw4AAAAAAAAAAAAAsw4AAAAAAAC0DgAAAAAAAAAAAAC0DgAAAAAAALUOAAAAAAAAAAAAALUOAAAAAAAAtg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsg4AAAAAAACyDgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " k."
					},
					"AwAAALYOAAAAAAAAtw4AAAAAAAAAAAAAtw4AAAAAAAC4DgAAAAAAAAAAAAC4DgAAAAAAALkOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtg4AAAAAAAC2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAshEAAAAAAACbEQAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKaW1wb3J0IG5ldHdvcmt4IGFzIG54Cgpmcm9tIHB5bGl2ZS51dGlscy5nZW8gaW1wb3J0IGludGVyc2VjdF9yYXlfd2l0aF9yZWN0YW5nbGUKCgpjbGFzcyBOWEdyYXBoTW9kZWwoUU9iamVjdCk6CiAgICBub2Rlc0FkZGVkOiBTaWduYWwgPSBTaWduYWwobGlzdCkgICMgTGlzdFtIYXNoYWJsZV0KICAgIG5vZGVzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpICAjIExpc3RbSGFzaGFibGVdCiAgICBub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgZGljdAogICAgKSAgIyBkaWN0W0hhc2hhYmxlLCBkaWN0W3N0ciwgQW55XV0KICAgIG5vZGVzUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKGxpc3QpCgogICAgZWRnZXNBZGRlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzQWJvdXRUb0JlUmVtb3ZlZDogU2lnbmFsID0gU2lnbmFsKAogICAgICAgIGxpc3QKICAgICkgICMgTGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV0KICAgIGVkZ2VzUHJvcGVydGllc0NoYW5nZWQ6IFNpZ25hbCA9IFNpZ25hbCgKICAgICAgICBkaWN0CiAgICApICAjIGRpY3RbVHVwbGVbSGFzaGFibGUsIEhhc2hhYmxlLCBIYXNoYWJsZV0sIGRpY3Rbc3RyLCBBbnldXQogICAgZWRnZXNSZW1vdmVkOiBTaWduYWwgPSBTaWduYWwoCiAgICAgICAgbGlzdAogICAgKSAgIyBMaXN0W1R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBHOiBueC5NdWx0aURpR3JhcGggPSBueC5NdWx0aURpR3JhcGgoKSwgcGFyZW50PU5vbmUpOgogICAgICAgIHN1cGVyKCkuX19pbml0X18ocGFyZW50PXBhcmVudCkKICAgICAgICBzZWxmLkcgPSBHCgogICAgICAgIGZvciBuIGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgbm9kZSA9IHNlbGYuYWRkTm9kZShuYW1lPW4pCgogICAgICAgIGZvciBlIGluIHNlbGYuRy5lZGdlczoKICAgICAgICAgICAgdSwgdiwgayA9IGUKCiAgICAgICAgICAgIHNlbGYuYWRkRWRnZSh1LCB2LCBrKQoKICAgIGRlZiBwYXRjaChzZWxmLCBHOiBueC5NdWx0aURpR3JhcGgpOgogICAgICAgIC4uLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoIk5vdCB5ZXQgaW1wbGVtZW50ZWQiKQoKICAgIGRlZiBfX2RlbF9fKHNlbGYpOgogICAgICAgIGRlbCBzZWxmLkcKICAgICAgICAjIHNlbGYubm9kZXNBZGRlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNBYm91dFRvQmVSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5ub2Rlc1Byb3BlcnR5Q2hhbmdlZC5kaXNjb25uZWN0KCkKICAgICAgICAjIHNlbGYubm9kZXNSZW1vdmVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0FkZGVkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc0Fib3V0VG9CZVJlbW92ZWQuZGlzY29ubmVjdCgpCiAgICAgICAgIyBzZWxmLmVkZ2VzUHJvcGVydHlDaGFuZ2VkLmRpc2Nvbm5lY3QoKQogICAgICAgICMgc2VsZi5lZGdlc1JlbW92ZWQuZGlzY29ubmVjdCgpCgogICAgZGVmIG5vZGVzKHNlbGYpIC0+IExpc3RbSGFzaGFibGVdOgogICAgICAgIHJldHVybiBbbiBmb3IgbiBpbiBzZWxmLkcubm9kZXNdCgogICAgZGVmIGFkZE5vZGUoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpIC0+IE5vbmU6CiAgICAgICAgIyBwcmludCgiYWRkIG5vZGU6ICd7bn0nIikKICAgICAgICBzZWxmLkcuYWRkX25vZGUobiwgKipwcm9wcykKICAgICAgICBzZWxmLm5vZGVzQWRkZWQuZW1pdChbbl0pCiAgICAgICAgc2VsZi5ub2Rlc1Byb3BlcnRpZXNDaGFuZ2VkLmVtaXQoe246IHByb3BzfSkKCiAgICBkZWYgc2V0Tm9kZVByb3BlcnRpZXMoc2VsZiwgbjogSGFzaGFibGUsIC8sICoqcHJvcHMpOgogICAgICAgICMgY2hhbmdlIGd1YXJkIFRPRE86IGZpbmQgcmVtb3ZlZCBwcm9wcwogICAgICAgIGNoYW5nZSA9IHt9CiAgICAgICAgZm9yIHByb3AsIHZhbHVlIGluIHByb3BzLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIHByb3Agbm90IGluIHNlbGYuRy5ub2Rlc1tuXSBvciB2YWx1ZSAhPSBzZWxmLkcubm9kZXNbbl1bcHJvcF06CiAgICAgICAgICAgICAgICBjaGFuZ2VbcHJvcF0gPSB2YWx1ZQogICAgICAgIG54LnNldF9ub2RlX2F0dHJpYnV0ZXMoc2VsZi5HLCB7bjogY2hhbmdlfSkKICAgICAgICBzZWxmLm5vZGVzUHJvcGVydGllc0NoYW5nZWQuZW1pdCh7bjogY2hhbmdlfSkKCiAgICBkZWYgaGFzTm9kZVByb3BlcnR5KHNlbGYsIG46IEhhc2hhYmxlLCBuYW1lLCAvKSAtPiBib29sOgogICAgICAgIHJldHVybiBuYW1lIGluIHNlbGYuRy5ub2Rlc1tuXQoKICAgIGRlZiBnZXROb2RlUHJvcGVydHkoc2VsZiwgbjogSGFzaGFibGUsIG5hbWUsIC8pIC0+IG9iamVjdDoKICAgICAgICByZXR1cm4gc2VsZi5HLm5vZGVzW25dW25hbWVdCgogICAgZGVmIGdldE5vZGVQcm9wZXJ0aWVzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFtrZXkgZm9yIGtleSBpbiBzZWxmLkcubm9kZXNbbl0ua2V5cygpXQoKICAgIGRlZiByZW1vdmVOb2RlKHNlbGYsIG46IEhhc2hhYmxlKToKICAgICAgICBzZWxmLm5vZGVzQWJvdXRUb0JlUmVtb3ZlZC5lbWl0KFtuXSkKICAgICAgICBzZWxmLkcucmVtb3ZlX25vZGUobikKICAgICAgICBzZWxmLm5vZGVzUmVtb3ZlZC5lbWl0KFtuXSkKCiAgICBkZWYgZWRnZXMoc2VsZikgLT4gbGlzdFtUdXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLmVkZ2VzXQoKICAgIGRlZiBpbkVkZ2VzKHNlbGYsIG46IEhhc2hhYmxlKSAtPiBsaXN0W3R1cGxlW0hhc2hhYmxlLCBIYXNoYWJsZSwgSGFzaGFibGVdXToKICAgICAgICAiIiJyZXRydW4gaW5jb21pbmcgZWRnZXMgdG8gdGhlIG5vZGUiIiIKICAgICAgICByZXR1cm4gWyh1LCB2LCBrKSBmb3IgdSwgdiwgayBpbiBzZWxmLkcuaW5fZWRnZXMobiwga2V5cz1UcnVlKV0KCiAgICBkZWYgb3V0RWRnZXMoCiAgICAgICAgc2VsZiwgbjogSGFzaGFibGUKICAgICkgLT4gbGlzdFt0dXBsZVtIYXNoYWJsZSwgSGFzaGFibGUsIEhhc2hhYmxlXV06CiAgICAgICAgIiIicmV0cnVuIGluY29taW5nIGVkZ2VzIHRvIHRoZSBub2RlIiIiCiAgICAgICAgcmV0dXJuIFsodSwgdiwgaykgZm9yIHUsIHYsIGsgaW4gc2VsZi5HLm91dF9lZGdlcyhuLCBrZXlzPVRydWUpXQoKICAgIGRlZiBhZGRFZGdlKAogICAgICAgIHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUgfCBOb25lID0gTm9uZSwgLywgKipwcm9wcwogICAgKSAtPiBOb25lOgogICAgICAgIGlmIHUgbm90IGluIHNlbGYuRy5ub2RlczoKICAgICAgICAgICAgc2VsZi5hZGROb2RlKHUpCiAgICAgICAgaWYgdiBub3QgaW4gc2VsZi5HLm5vZGVzOgogICAgICAgICAgICBzZWxmLmFkZE5vZGUodikKCiAgICAgICAgayA9IHNlbGYuRy5hZGRfZWRnZSh1LCB2LCBrLCAqKnByb3BzKSAjIG5vdGU6IGlmIGsgaXMgbm9uZSwgbmV0d29ya3ggd2lsbCByZXR1cm4gYSBkZWZhdWx0IHZhbHVlIGZvciBrLgogICAgICAgIHNlbGYuZWRnZXNBZGRlZC5lbWl0KFsodSwgdiwgayldKQoKICAgIGRlZiByZW1vdmVFZGdlKHNlbGYsIHU6IEhhc2hhYmxlLCB2OiBIYXNoYWJsZSwgazogSGFzaGFibGUpOgogICAgICAgIHNlbGYuZWRnZXNBYm91dFRvQmVSZW1vdmVkLmVtaXQoWyh1LCB2LCBrKV0pCiAgICAgICAgc2VsZi5HLnJlbW92ZV9lZGdlKHUsIHYsIGspCiAgICAgICAgc2VsZi5lZGdlc1JlbW92ZWQuZW1pdChbKHUsIHYsIGspXSkKCiAgICBkZWYgc2V0RWRnZVByb3BlcnRpZXMoCiAgICAgICAgc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSwgLywgKipwcm9wcwogICAgKToKICAgICAgICBueC5zZXRfZWRnZV9hdHRyaWJ1dGVzKHNlbGYuRywgeyh1LCB2LCBrKTogcHJvcHN9KQogICAgICAgIHNlbGYuZWRnZXNQcm9wZXJ0aWVzQ2hhbmdlZC5lbWl0KFsodSwgdiwgayldLCBsaXN0KHByb3BzLmtleXMoKSkpCgogICAgZGVmIGdldEVkZ2VQcm9wZXJ0eShzZWxmLCB1OiBIYXNoYWJsZSwgdjogSGFzaGFibGUsIGs6IEhhc2hhYmxlLCBwcm9wLCAvKToKICAgICAgICByZXR1cm4gc2VsZi5HLmVkZ2VzW3UsIHYsIGtdW3Byb3BdCgogICAgZGVmIGlzRWRnZUFsbG93ZWQoc2VsZiwgdTogSGFzaGFibGUsIHY6IEhhc2hhYmxlLCBrOiBIYXNoYWJsZSkgLT4gYm9vbDoKICAgICAgICBpZiB1ID09IHY6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiBUcnVlCg",
					"AQAAAAAAAAABAAAAuQ4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pylive/NetworkXGraphEditor/nx_graph_scene-SUBCLASS-example.py",
			"settings":
			{
				"buffer_size": 3613,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " TODO:"
					},
					"BgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAIyBUT0RPOiAK",
					"AQAAAAAAAAABAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB/AgAAAAAAAAAAAAB/AgAAAAAAAIMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgIAAAAAAAB2AgAAAAAAAAAAAAAAkHJA"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAIMCAAAAAAAAjAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwIAAAAAAACDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAIsCAAAAAAAAiwIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "mvoe"
					},
					"BAAAAIsCAAAAAAAAjAIAAAAAAAAAAAAAjAIAAAAAAACNAgAAAAAAAAAAAACNAgAAAAAAAI4CAAAAAAAAAAAAAI4CAAAAAAAAjwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " graph"
					},
					"BgAAAI8CAAAAAAAAkAIAAAAAAAAAAAAAkAIAAAAAAACRAgAAAAAAAAAAAACRAgAAAAAAAJICAAAAAAAAAAAAAJICAAAAAAAAkwIAAAAAAAAAAAAAkwIAAAAAAACUAgAAAAAAAAAAAACUAgAAAAAAAJUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwIAAAAAAACPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " linking"
					},
					"CAAAAJUCAAAAAAAAlgIAAAAAAAAAAAAAlgIAAAAAAACXAgAAAAAAAAAAAACXAgAAAAAAAJgCAAAAAAAAAAAAAJgCAAAAAAAAmQIAAAAAAAAAAAAAmQIAAAAAAACaAgAAAAAAAAAAAACaAgAAAAAAAJsCAAAAAAAAAAAAAJsCAAAAAAAAnAIAAAAAAAAAAAAAnAIAAAAAAACdAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQIAAAAAAACVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " tool"
					},
					"BQAAAJ0CAAAAAAAAngIAAAAAAAAAAAAAngIAAAAAAACfAgAAAAAAAAAAAACfAgAAAAAAAKACAAAAAAAAAAAAAKACAAAAAAAAoQIAAAAAAAAAAAAAoQIAAAAAAACiAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAKICAAAAAAAAowIAAAAAAAAAAAAAowIAAAAAAACkAgAAAAAAAAAAAACkAgAAAAAAAKUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogIAAAAAAACiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAKUCAAAAAAAApgIAAAAAAAAAAAAApgIAAAAAAACnAgAAAAAAAAAAAACnAgAAAAAAAKgCAAAAAAAAAAAAAKgCAAAAAAAAqQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQIAAAAAAAClAgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " graphsce"
					},
					"CQAAAKkCAAAAAAAAqgIAAAAAAAAAAAAAqgIAAAAAAACrAgAAAAAAAAAAAACrAgAAAAAAAKwCAAAAAAAAAAAAAKwCAAAAAAAArQIAAAAAAAAAAAAArQIAAAAAAACuAgAAAAAAAAAAAACuAgAAAAAAAK8CAAAAAAAAAAAAAK8CAAAAAAAAsAIAAAAAAAAAAAAAsAIAAAAAAACxAgAAAAAAAAAAAACxAgAAAAAAALICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQIAAAAAAACpAgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC0AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgIAAAAAAACyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQCAAAAAAAAtQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAALQCAAAAAAAAtAIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtQIAAAAAAAC1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAALQCAAAAAAAAtQIAAAAAAAAAAAAAtQIAAAAAAAC2AgAAAAAAAAAAAAC2AgAAAAAAALcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " view,"
					},
					"BgAAALcCAAAAAAAAuAIAAAAAAAAAAAAAuAIAAAAAAAC5AgAAAAAAAAAAAAC5AgAAAAAAALoCAAAAAAAAAAAAALoCAAAAAAAAuwIAAAAAAAAAAAAAuwIAAAAAAAC8AgAAAAAAAAAAAAC8AgAAAAAAAL0CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwIAAAAAAAC3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAALwCAAAAAAAAvAIAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAALwCAAAAAAAAvQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAIAAAAAAAC8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAALwCAAAAAAAAvAIAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALwCAAAAAAAAvQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAIAAAAAAAC8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAL0CAAAAAAAAvgIAAAAAAAAAAAAAvgIAAAAAAAC/AgAAAAAAAAAAAAC/AgAAAAAAAMACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " mka"
					},
					"BAAAAMACAAAAAAAAwQIAAAAAAAAAAAAAwQIAAAAAAADCAgAAAAAAAAAAAADCAgAAAAAAAMMCAAAAAAAAAAAAAMMCAAAAAAAAxAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAIAAAAAAADAAgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAMMCAAAAAAAAwwIAAAAAAAABAAAAYcICAAAAAAAAwgIAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAxAIAAAAAAADEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "ake"
					},
					"AwAAAMICAAAAAAAAwwIAAAAAAAAAAAAAwwIAAAAAAADEAgAAAAAAAAAAAADEAgAAAAAAAMUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgIAAAAAAADCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " these"
					},
					"BgAAAMUCAAAAAAAAxgIAAAAAAAAAAAAAxgIAAAAAAADHAgAAAAAAAAAAAADHAgAAAAAAAMgCAAAAAAAAAAAAAMgCAAAAAAAAyQIAAAAAAAAAAAAAyQIAAAAAAADKAgAAAAAAAAAAAADKAgAAAAAAAMsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQIAAAAAAADFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " widgets"
					},
					"CAAAAMsCAAAAAAAAzAIAAAAAAAAAAAAAzAIAAAAAAADNAgAAAAAAAAAAAADNAgAAAAAAAM4CAAAAAAAAAAAAAM4CAAAAAAAAzwIAAAAAAAAAAAAAzwIAAAAAAADQAgAAAAAAAAAAAADQAgAAAAAAANECAAAAAAAAAAAAANECAAAAAAAA0gIAAAAAAAAAAAAA0gIAAAAAAADTAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywIAAAAAAADLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " independen"
					},
					"CwAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADVAgAAAAAAAAAAAADVAgAAAAAAANYCAAAAAAAAAAAAANYCAAAAAAAA1wIAAAAAAAAAAAAA1wIAAAAAAADYAgAAAAAAAAAAAADYAgAAAAAAANkCAAAAAAAAAAAAANkCAAAAAAAA2gIAAAAAAAAAAAAA2gIAAAAAAADbAgAAAAAAAAAAAADbAgAAAAAAANwCAAAAAAAAAAAAANwCAAAAAAAA3QIAAAAAAAAAAAAA3QIAAAAAAADeAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wIAAAAAAADTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAN4CAAAAAAAA3wIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gIAAAAAAADeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAADhAgAAAAAAAOICAAAAAAAAAAAAAOICAAAAAAAA4wIAAAAAAAAAAAAA4wIAAAAAAADkAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wIAAAAAAADfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AIAAAAAAADkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " model"
					},
					"BgAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA6QIAAAAAAADqAgAAAAAAAAAAAADqAgAAAAAAAOsCAAAAAAAAAAAAAOsCAAAAAAAA7AIAAAAAAAAAAAAA7AIAAAAAAADtAgAAAAAAAAAAAADtAgAAAAAAAO4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AIAAAAAAADoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"right_delete",
					null,
					"AQAAAL0CAAAAAAAAvQIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0CAAAAAAAAvgIAAAAAAAAAAAAAvgIAAAAAAADKAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAMoCAAAAAAAAywIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygIAAAAAAADKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMsCAAAAAAAAzAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywIAAAAAAADLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAGQ4AAAAAAAAZDgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKZnJvbSBweWxpdmUuTmV0d29ya1hHcmFwaEVkaXRvci5ueF9ncmFwaF9tb2RlbCBpbXBvcnQgTlhHcmFwaE1vZGVsCmZyb20gcHlsaXZlLk5ldHdvcmtYR3JhcGhFZGl0b3IubnhfbmV0d29ya19zY2VuZSBpbXBvcnQgKAogICAgTlhOZXR3b3JrU2NlbmUsCiAgICBOb2RlR3JhcGhpY3NPYmplY3QsCiAgICBMaW5rR3JhcGhpY3NPYmplY3QsCiAgICBJbmxldEdyYXBoaWNzT2JqZWN0LAogICAgTm9kZUlkLAogICAgT3V0bGV0R3JhcGhpY3NPYmplY3QsCiAgICBMaW5rSWQsCiAgICBJbmxldElkLAogICAgT3V0bGV0SWQsCiAgICBOb2RlSWQsCikKCgpjbGFzcyBNeVZlcnRleEdyYXBoaWNzT2JqZWN0KE5vZGVHcmFwaGljc09iamVjdCk6CiAgICBkZWYgbW91c2VQcmVzc0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5pc1NlbGVjdGVkKCk6CiAgICAgICAgICAgIHN1cGVyKCkubW91c2VQcmVzc0V2ZW50KGV2ZW50KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgVE9ETzogbXZvZSBncmFwaCBsaW5raW5nIHRvb2wgdG8gdGhlIGdyYXBoc2NlbmUgb3IgdmlldywKICAgICAgICAgICAgIyB0byBtYWtlIHRoZXNlIHdpZGdldHMgaW5kZXBlbmRlbnQgZnJvbSB0aGUgbW9kZWwKICAgICAgICAgICAgc2VsZi5ncmFwaHNjZW5lKCkubWFrZURyYWZ0TGluaygpCiAgICAgICAgICAgIHNlbGYuZ3JhYk1vdXNlKCkKCiAgICBkZWYgbW91c2VNb3ZlRXZlbnQoc2VsZiwgZXZlbnQ6IFFHcmFwaGljc1NjZW5lTW91c2VFdmVudCkgLT4gTm9uZToKICAgICAgICBpZiBzZWxmLmlzU2VsZWN0ZWQoKToKICAgICAgICAgICAgc3VwZXIoKS5tb3VzZU1vdmVFdmVudChldmVudCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBkcmFmdCA9IHNlbGYuZ3JhcGhzY2VuZSgpLmRyYWZ0CiAgICAgICAgICAgIGFzc2VydCBkcmFmdCBpcyBub3QgTm9uZQoKICAgICAgICAgICAgaWYgbm9kZSA6PSBzZWxmLmdyYXBoc2NlbmUoKS5ub2RlQXQoZXZlbnQuc2NlbmVQb3MoKSk6CiAgICAgICAgICAgICAgICBkcmFmdC5tb3ZlKHNlbGYsIG5vZGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBkcmFmdC5tb3ZlKHNlbGYsIGV2ZW50LnNjZW5lUG9zKCkpCgogICAgZGVmIG1vdXNlUmVsZWFzZUV2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5pc1NlbGVjdGVkKCk6CiAgICAgICAgICAgIHN1cGVyKCkubW91c2VSZWxlYXNlRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi51bmdyYWJNb3VzZSgpCiAgICAgICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLnJlc2V0RHJhZnRMaW5rKCkKCiAgICAgICAgICAgIGlmIHRhcmdldCA6PSBzZWxmLmdyYXBoc2NlbmUoKS5ub2RlQXQoZXZlbnQuc2NlbmVQb3MoKSk6CiAgICAgICAgICAgICAgICBzY2VuZSA9IHNlbGYuZ3JhcGhzY2VuZSgpCiAgICAgICAgICAgICAgICBzY2VuZS5fbW9kZWwuYWRkRWRnZShzZWxmLl9uLCB0YXJnZXQuX24pCgogICAgICAgICAgICByZXR1cm4gc3VwZXIoKS5tb3VzZVJlbGVhc2VFdmVudChldmVudCkKCgpjbGFzcyBNeUdyYXBoU2NlbmUoTlhOZXR3b3JrU2NlbmUpOgogICAgZGVmIG9uTm9kZUNyZWF0ZWQoc2VsZiwgbjogTm9kZUlkKToKICAgICAgICAjIGlubGV0ID0gSW5sZXRHcmFwaGljc09iamVjdChJbmxldElkKG4sICJpbiIpKQogICAgICAgICMgb3V0bGV0ID0gT3V0bGV0R3JhcGhpY3NPYmplY3QoT3V0bGV0SWQobiwgIm91dCIpKQogICAgICAgIG5vZGUgPSBNeVZlcnRleEdyYXBoaWNzT2JqZWN0KG4sIGlubGV0cz1bXSwgb3V0bGV0cz1bXSkKCiAgICAgICAgc2VsZi5fbm9kZV9ncmFwaGljc19vYmplY3RzW25dID0gbm9kZQogICAgICAgIHNlbGYuX3RhcmdldF9ncmFwaGljc19vYmplY3RzW25dID0gbm9kZQogICAgICAgIHNlbGYuX3NvdXJjZV9ncmFwaGljc19vYmplY3RzW25dID0gbm9kZQoKICAgICAgICBzZWxmLmFkZEl0ZW0oc2VsZi5ub2RlR3JhcGhpY3NPYmplY3QobikpCgogICAgZGVmIG9uTGlua0NyZWF0ZWQoc2VsZiwgZTogTGlua0lkKToKICAgICAgICBsaW5rID0gTGlua0dyYXBoaWNzT2JqZWN0KGUpCiAgICAgICAgc2VsZi5fbGlua19ncmFwaGljc19vYmplY3RzW2VdID0gbGluawogICAgICAgIHNlbGYuYWRkSXRlbShsaW5rKQoKICAgICAgICBsaW5rLm1vdmUoc2VsZi5zb3VyY2VHcmFwaGljc09iamVjdChlKSwgc2VsZi50YXJnZXRHcmFwaGljc09iamVjdChlKSkKCiAgICAgICAgc2VsZi51cGRhdGVBdHRhY2hlZFNvdXJjZShlKQogICAgICAgIHNlbGYudXBkYXRlQXR0YWNoZWRUYXJnZXQoZSkKCiAgICBkZWYgc291cmNlR3JhcGhpY3NPYmplY3Qoc2VsZiwgZTogTGlua0lkKSAtPiBRR3JhcGhpY3NJdGVtOgogICAgICAgIHUsIHYsIGsgPSBlCiAgICAgICAgcmV0dXJuIHNlbGYuX3NvdXJjZV9ncmFwaGljc19vYmplY3RzW3VdCgogICAgZGVmIHRhcmdldEdyYXBoaWNzT2JqZWN0KHNlbGYsIGU6IExpbmtJZCkgLT4gUUdyYXBoaWNzSXRlbToKICAgICAgICB1LCB2LCBrID0gZQogICAgICAgIHJldHVybiBzZWxmLl90YXJnZXRfZ3JhcGhpY3Nfb2JqZWN0c1t2XQoKCiMjIyMjIyMjIyMjCiMgRVhBTVBMRSAjCiMjIyMjIyMjIyMjCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBpbXBvcnQgc3lzCgogICAgYXBwID0gUUFwcGxpY2F0aW9uKHN5cy5hcmd2KQoKICAgICMgc2V0dXAgbWFpbiB3aW5kb3cKICAgIHZpZXcgPSBRR3JhcGhpY3NWaWV3KCkKICAgIHZpZXcuc2V0RHJhZ01vZGUoUUdyYXBoaWNzVmlldy5EcmFnTW9kZS5SdWJiZXJCYW5kRHJhZykKICAgIHZpZXcuc2V0V2luZG93VGl0bGUoIk15R3JhcGhTY2VuZSIpCiAgICB2aWV3LnNldFJlbmRlckhpbnQoUVBhaW50ZXIuUmVuZGVySGludC5BbnRpYWxpYXNpbmcsIFRydWUpCiAgICB2aWV3LnNldFJlbmRlckhpbnQoUVBhaW50ZXIuUmVuZGVySGludC5UZXh0QW50aWFsaWFzaW5nLCBUcnVlKQogICAgdmlldy5zZXRSZW5kZXJIaW50KFFQYWludGVyLlJlbmRlckhpbnQuU21vb3RoUGl4bWFwVHJhbnNmb3JtLCBUcnVlKQoKICAgICMgY3JlYXRlIGdyYXBoIHNjZW5lCiAgICBncmFwaCA9IE5YR3JhcGhNb2RlbCgpCiAgICBncmFwaC5hZGROb2RlKCJOMSIpCiAgICBncmFwaC5hZGROb2RlKCJOMiIpCiAgICBncmFwaC5hZGROb2RlKCJOMyIpCiAgICBncmFwaC5hZGRFZGdlKCJOMSIsICJOMiIsIDEwKQogICAgZ3JhcGhzY2VuZSA9IE15R3JhcGhTY2VuZShncmFwaCkKICAgIGdyYXBoc2NlbmUuc2V0U2NlbmVSZWN0KFFSZWN0RigtNDAwLCAtNDAwLCA4MDAsIDgwMCkpCiAgICB2aWV3LnNldFNjZW5lKGdyYXBoc2NlbmUpCgogICAgIyBncmFwaHNjZW5lLmFkZEl0ZW0oR3JhcGhpY3NWZXJ0ZXhJdGVtKCJIV0VMTE8iKSkKCiAgICAjIHNob3cgd2luZG93CiAgICB2aWV3LnNob3coKQogICAgc3lzLmV4aXQoYXBwLmV4ZWMoKSkK",
					"AQAAAAAAAAABAAAAzAIAAAAAAADMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoCAAAAAAAAiwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIsCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAIwCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAHQ4AAAAAAAAdDgAAZnJvbSB0eXBpbmcgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0R3VpIGltcG9ydCAqCmZyb20gUHlTaWRlNi5RdENvcmUgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0V2lkZ2V0cyBpbXBvcnQgKgoKZnJvbSBweWxpdmUuTmV0d29ya1hHcmFwaEVkaXRvci5ueF9ncmFwaF9tb2RlbCBpbXBvcnQgTlhHcmFwaE1vZGVsCmZyb20gcHlsaXZlLk5ldHdvcmtYR3JhcGhFZGl0b3IubnhfbmV0d29ya19zY2VuZSBpbXBvcnQgKAogICAgTlhOZXR3b3JrU2NlbmUsCiAgICBOb2RlR3JhcGhpY3NPYmplY3QsCiAgICBMaW5rR3JhcGhpY3NPYmplY3QsCiAgICBJbmxldEdyYXBoaWNzT2JqZWN0LAogICAgTm9kZUlkLAogICAgT3V0bGV0R3JhcGhpY3NPYmplY3QsCiAgICBMaW5rSWQsCiAgICBJbmxldElkLAogICAgT3V0bGV0SWQsCiAgICBOb2RlSWQsCikKCgpjbGFzcyBNeVZlcnRleEdyYXBoaWNzT2JqZWN0KE5vZGVHcmFwaGljc09iamVjdCk6CiAgICBkZWYgbW91c2VQcmVzc0V2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5pc1NlbGVjdGVkKCk6CiAgICAgICAgICAgIHN1cGVyKCkubW91c2VQcmVzc0V2ZW50KGV2ZW50KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgVE9ETzogKCEpIG12b2UgZ3JhcGggbGlua2luZyB0b29sIHRvIHRoZSBncmFwaHNjZW5lIG9yIHZpZXcsCiAgICAgICAgICAgICMgdG8gbWFrZSB0aGVzZSB3aWRnZXRzIGluZGVwZW5kZW50IGZyb20gdGhlIG1vZGVsCiAgICAgICAgICAgIHNlbGYuZ3JhcGhzY2VuZSgpLm1ha2VEcmFmdExpbmsoKQogICAgICAgICAgICBzZWxmLmdyYWJNb3VzZSgpCgogICAgZGVmIG1vdXNlTW92ZUV2ZW50KHNlbGYsIGV2ZW50OiBRR3JhcGhpY3NTY2VuZU1vdXNlRXZlbnQpIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5pc1NlbGVjdGVkKCk6CiAgICAgICAgICAgIHN1cGVyKCkubW91c2VNb3ZlRXZlbnQoZXZlbnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZHJhZnQgPSBzZWxmLmdyYXBoc2NlbmUoKS5kcmFmdAogICAgICAgICAgICBhc3NlcnQgZHJhZnQgaXMgbm90IE5vbmUKCiAgICAgICAgICAgIGlmIG5vZGUgOj0gc2VsZi5ncmFwaHNjZW5lKCkubm9kZUF0KGV2ZW50LnNjZW5lUG9zKCkpOgogICAgICAgICAgICAgICAgZHJhZnQubW92ZShzZWxmLCBub2RlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZHJhZnQubW92ZShzZWxmLCBldmVudC5zY2VuZVBvcygpKQoKICAgIGRlZiBtb3VzZVJlbGVhc2VFdmVudChzZWxmLCBldmVudDogUUdyYXBoaWNzU2NlbmVNb3VzZUV2ZW50KSAtPiBOb25lOgogICAgICAgIGlmIHNlbGYuaXNTZWxlY3RlZCgpOgogICAgICAgICAgICBzdXBlcigpLm1vdXNlUmVsZWFzZUV2ZW50KGV2ZW50KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudW5ncmFiTW91c2UoKQogICAgICAgICAgICBzZWxmLmdyYXBoc2NlbmUoKS5yZXNldERyYWZ0TGluaygpCgogICAgICAgICAgICBpZiB0YXJnZXQgOj0gc2VsZi5ncmFwaHNjZW5lKCkubm9kZUF0KGV2ZW50LnNjZW5lUG9zKCkpOgogICAgICAgICAgICAgICAgc2NlbmUgPSBzZWxmLmdyYXBoc2NlbmUoKQogICAgICAgICAgICAgICAgc2NlbmUuX21vZGVsLmFkZEVkZ2Uoc2VsZi5fbiwgdGFyZ2V0Ll9uKQoKICAgICAgICAgICAgcmV0dXJuIHN1cGVyKCkubW91c2VSZWxlYXNlRXZlbnQoZXZlbnQpCgoKY2xhc3MgTXlHcmFwaFNjZW5lKE5YTmV0d29ya1NjZW5lKToKICAgIGRlZiBvbk5vZGVDcmVhdGVkKHNlbGYsIG46IE5vZGVJZCk6CiAgICAgICAgIyBpbmxldCA9IElubGV0R3JhcGhpY3NPYmplY3QoSW5sZXRJZChuLCAiaW4iKSkKICAgICAgICAjIG91dGxldCA9IE91dGxldEdyYXBoaWNzT2JqZWN0KE91dGxldElkKG4sICJvdXQiKSkKICAgICAgICBub2RlID0gTXlWZXJ0ZXhHcmFwaGljc09iamVjdChuLCBpbmxldHM9W10sIG91dGxldHM9W10pCgogICAgICAgIHNlbGYuX25vZGVfZ3JhcGhpY3Nfb2JqZWN0c1tuXSA9IG5vZGUKICAgICAgICBzZWxmLl90YXJnZXRfZ3JhcGhpY3Nfb2JqZWN0c1tuXSA9IG5vZGUKICAgICAgICBzZWxmLl9zb3VyY2VfZ3JhcGhpY3Nfb2JqZWN0c1tuXSA9IG5vZGUKCiAgICAgICAgc2VsZi5hZGRJdGVtKHNlbGYubm9kZUdyYXBoaWNzT2JqZWN0KG4pKQoKICAgIGRlZiBvbkxpbmtDcmVhdGVkKHNlbGYsIGU6IExpbmtJZCk6CiAgICAgICAgbGluayA9IExpbmtHcmFwaGljc09iamVjdChlKQogICAgICAgIHNlbGYuX2xpbmtfZ3JhcGhpY3Nfb2JqZWN0c1tlXSA9IGxpbmsKICAgICAgICBzZWxmLmFkZEl0ZW0obGluaykKCiAgICAgICAgbGluay5tb3ZlKHNlbGYuc291cmNlR3JhcGhpY3NPYmplY3QoZSksIHNlbGYudGFyZ2V0R3JhcGhpY3NPYmplY3QoZSkpCgogICAgICAgIHNlbGYudXBkYXRlQXR0YWNoZWRTb3VyY2UoZSkKICAgICAgICBzZWxmLnVwZGF0ZUF0dGFjaGVkVGFyZ2V0KGUpCgogICAgZGVmIHNvdXJjZUdyYXBoaWNzT2JqZWN0KHNlbGYsIGU6IExpbmtJZCkgLT4gUUdyYXBoaWNzSXRlbToKICAgICAgICB1LCB2LCBrID0gZQogICAgICAgIHJldHVybiBzZWxmLl9zb3VyY2VfZ3JhcGhpY3Nfb2JqZWN0c1t1XQoKICAgIGRlZiB0YXJnZXRHcmFwaGljc09iamVjdChzZWxmLCBlOiBMaW5rSWQpIC0+IFFHcmFwaGljc0l0ZW06CiAgICAgICAgdSwgdiwgayA9IGUKICAgICAgICByZXR1cm4gc2VsZi5fdGFyZ2V0X2dyYXBoaWNzX29iamVjdHNbdl0KCgojIyMjIyMjIyMjIwojIEVYQU1QTEUgIwojIyMjIyMjIyMjIwppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgaW1wb3J0IHN5cwoKICAgIGFwcCA9IFFBcHBsaWNhdGlvbihzeXMuYXJndikKCiAgICAjIHNldHVwIG1haW4gd2luZG93CiAgICB2aWV3ID0gUUdyYXBoaWNzVmlldygpCiAgICB2aWV3LnNldERyYWdNb2RlKFFHcmFwaGljc1ZpZXcuRHJhZ01vZGUuUnViYmVyQmFuZERyYWcpCiAgICB2aWV3LnNldFdpbmRvd1RpdGxlKCJNeUdyYXBoU2NlbmUiKQogICAgdmlldy5zZXRSZW5kZXJIaW50KFFQYWludGVyLlJlbmRlckhpbnQuQW50aWFsaWFzaW5nLCBUcnVlKQogICAgdmlldy5zZXRSZW5kZXJIaW50KFFQYWludGVyLlJlbmRlckhpbnQuVGV4dEFudGlhbGlhc2luZywgVHJ1ZSkKICAgIHZpZXcuc2V0UmVuZGVySGludChRUGFpbnRlci5SZW5kZXJIaW50LlNtb290aFBpeG1hcFRyYW5zZm9ybSwgVHJ1ZSkKCiAgICAjIGNyZWF0ZSBncmFwaCBzY2VuZQogICAgZ3JhcGggPSBOWEdyYXBoTW9kZWwoKQogICAgZ3JhcGguYWRkTm9kZSgiTjEiKQogICAgZ3JhcGguYWRkTm9kZSgiTjIiKQogICAgZ3JhcGguYWRkTm9kZSgiTjMiKQogICAgZ3JhcGguYWRkRWRnZSgiTjEiLCAiTjIiLCAxMCkKICAgIGdyYXBoc2NlbmUgPSBNeUdyYXBoU2NlbmUoZ3JhcGgpCiAgICBncmFwaHNjZW5lLnNldFNjZW5lUmVjdChRUmVjdEYoLTQwMCwgLTQwMCwgODAwLCA4MDApKQogICAgdmlldy5zZXRTY2VuZShncmFwaHNjZW5lKQoKICAgICMgZ3JhcGhzY2VuZS5hZGRJdGVtKEdyYXBoaWNzVmVydGV4SXRlbSgiSFdFTExPIikpCgogICAgIyBzaG93IHdpbmRvdwogICAgdmlldy5zaG93KCkKICAgIHN5cy5leGl0KGFwcC5leGVjKCkpCg",
					"AQAAAAAAAAABAAAAjQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debu",
				"Debugger: Open"
			],
			[
				"debug",
				"Debugger: Open"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"View Package File"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor",
		"/C/dev/src/pylive/script_examples_to_run_live"
	],
	"file_history":
	[
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_scene-SUBCLASS-example.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_scene-STANDALONE.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_shapes.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_with_exec.py",
		"/C/dev/src/pylive/script_examples_to_run_live/rounded_link_item.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/multidigraph.py",
		"/C/dev/src/pylive/pylive/QtTerminal/terminal_with_exec.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_graphics_items.py",
		"/C/dev/src/pylive/pylive/utils/geo.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_inspector_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_model.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_scene.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/qtpy_nodeeditor.py",
		"/C/dev/src/pylive/pylive/utils/diff.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/expreiments/ipython/embedded_qtconsole.py",
		"/C/dev/src/pylive/expreiments/display_builtin_icons.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_selection_model.py",
		"/C/dev/src/pylive/tests/test_diff.py",
		"/C/dev/src/pylive/pylive/utils/unique.py",
		"/C/dev/src/pylive/pylive/utils/sugiyama_layout.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/drawing/layout.py",
		"/C/dev/src/pylive/pylive.sublime-project",
		"/C/dev/src/pylive/.venv/Lib/site-packages/networkx/classes/reportviews.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/nx_graph_graphics_scene_with_ports.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/qgraphics_arrow_item.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
		"/C/dev/src/pylive/expreiments/qstyle_draw_ptimitive_elements.py",
		"/C/dev/src/pylive/tests/test_python_graphmodel.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/infinite_graphicsview_optimized.py",
		"/C/Users/andris/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0/LocalCache/local-packages/Python312/site-packages/PySide6/QtCore.pyi",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/node_connection_tool.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/text_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/circle_widget.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/pin_connection_tool.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/main.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphEditor/graphview_with_delegate.py",
		"/C/dev/src/pylive/pylive/examples/python_function_graph/python_graph_model.py",
		"/C/Users/andris/Downloads/SideFX Houdini 20.5.278 x64 Win/readme.txt",
		"/C/Users/andris/Documents/Blender/Assets/blender_assets.cats.txt",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/nx_graph_view.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/standard_graph_delegate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NetrowkXGraphditor/link_graphics_items.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_databased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_databased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/NXGraphView.py",
		"/C/dev/src/pylive/expreiments/built-a-dependency-graph-of-a-python-codebase.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_script_skeleton.py",
		"/C/dev/src/pylive/script_examples_to_run_live/text_processing.py",
		"/C/dev/src/pylive/pylive/QtLiveApp/live_graph_with_exec.py",
		"/C/dev/src/pylive/expreiments/run-script-in-terminal.py",
		"/C/Users/andris/AppData/Local/Sublime Text/Package Storage/LSP-pyright/18.15.0/language-server/node_modules/pyright/dist/typeshed-fallback/stdlib/pathlib.pyi",
		"/C/dev/src/pylive/expreiments/connect_to_ipython.py",
		"/C/dev/src/pylive/pylive/__main__.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_ipython.py",
		"/C/dev/src/pylive/expreiments/ipython/notbook_with_chatgpt.py",
		"/C/dev/src/pylive/tests/test_cells.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/cell_support.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/linter_widget.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_number_editor.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/TODOs.md",
		"/C/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
		"/C/dev/src/pylive/pylive/QtTerminal/preview_widget.py",
		"/C/dev/src/pylive/pylive/render_engine/GLCanvasWidget_with_painting_signal.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
		"/C/dev/src/pylive/expreiments/file_textdocument_link.py",
		"/E/__ANDRIS__/ART/_Applications_/Cynthia Lopez 7000 - 2024/Cynthia Lopez 7000.xlsx",
		"/C/dev/src/pylive/expreiments/glcanvas.py",
		"/C/dev/src/pylive/pylive/render_engine/regl/regl.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_skeleton.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/glcanvas.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLWindow_with_qopengl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget_with_request_animation.py",
		"/C/dev/src/pylive/pylive/render_engine/utils/__init__.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget-with_painting_signal.py",
		"/C/dev/src/pylive/pylive/render_engine/glwidget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWindow.py",
		"/C/Users/andris/AppData/Local/Temp/2ea7c807-5541-48c5-9e23-9d4d4826a0ed_Microsoft Office 2021 Pro Plus.zip.0ed/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/Users/andris/Downloads/Microsoft Office 2021 Pro Plus (365 ) + Patch/Microsoft Office 2021 Pro Plus/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/dev/src/pylive/expreiments/opengl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pygame_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/opengl_outside_window.py",
		"/C/dev/src/pylive/pylive/render_engine/orbit_control.py",
		"/C/dev/src/pylive/pylive/render_engine/lookAt_standalone.vert",
		"/C/dev/src/pylive/pylive/logwindow.py",
		"/C/dev/src/pylive/pylive/render_engine/render_layers.py",
		"/C/dev/src/pylive/pylive/shaders/billboard.vert",
		"/C/dev/src/pylive/pylive/render_engine/resource_manager.py",
		"/C/dev/src/pylive/pylive/render_engine/examples/1 render layers.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/unified_titlebar.py",
		"/C/dev/src/pylive/pylive/render_engine/camera.py",
		"/C/dev/src/pylive/pylive/shaders/default_vertex_shader.vert",
		"/C/dev/src/pylive/pylive/shaders/flat_fragment_shader.frag",
		"/C/dev/src/pylive/pylive/examples/livescript.py",
		"/C/dev/src/pylive/gloo/render_layers.py",
		"/C/dev/src/pylive/gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/orbit_control.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_window_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/rendering_with_qt.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/qpygletwidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_1.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget (Not Working).py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_2.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_canvas_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyglet_on_QWidget.py",
		"/C/dev/src/pylive/expreiments/ipython/ipython_kernel.py",
		"/C/dev/src/pylive/expreiments/ipython/qtconsole_inprocess1.py",
		"/C/dev/src/pylive/expreiments/ipython/simple_console.py",
		"/C/dev/src/pylive/expreiments/simple_console.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_gpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/live_framework.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter.py",
		"/C/dev/src/pylive/expreiments/ipython_kernel.py"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"NXGraphScene",
			"move(",
			"_target_graphics_objects",
			"sourceGr",
			"updateAtta",
			"_inlet",
			"link.move",
			"move(",
			"move",
			"move(",
			"edges[",
			"move(",
			"import",
			"outletGraphicsObject(",
			"NXGraphModel",
			"modified",
			"LinkW",
			"hoverMoveEvent",
			"ConnectionEvent",
			"NodeWidget",
			"EdgeWidget",
			"change",
			"})\n",
			"handleEdgesRe",
			"nodespropertyChanged.emit",
			"Nodewidget",
			"gradient",
			"makeArrowS",
			"EdgeWidget",
			"addEdge",
			"EdgeWidget",
			"targetChanged",
			"NodeWidget",
			"makeLine",
			"setAccepted",
			"accept",
			"ConnectionDropType",
			"connectionEnterEvent",
			"AlignmentFlag",
			"print(",
			"nodeAt",
			"AttributesTable",
			"setLabelT",
			"size",
			"unchanged",
			"current",
			"print",
			"destroy",
			"_is_connection_entered",
			"QPen",
			"d1 <",
			"d1 >",
			"d2 >",
			"d2>",
			"d1",
			"            \"",
			"CC_CustomBase",
			"CE_ShapedFrame",
			"connectionDrop",
			"connectionDio",
			"_target",
			"ConnectionDropType",
			"connectionDropEvent",
			"]\n",
			"QStyle.PE_PanelMenu    48  The panel for a menu.\n",
			"ConnectionEvent",
			".map",
			"QTransform",
			"makeLineBetweenShapes",
			"print",
			"arrow",
			"line_between",
			"drag",
			"self.loop",
			"PinConnectionTool",
			"eventFilter",
			"edge",
			"edge.target",
			"edge.source",
			"edge.target",
			"setMouseTool",
			"self.connectionTool",
			"node",
			"EdgeConnectionEvent",
			"parent",
			"(\n",
			"block",
			"signal",
			"connected",
			"_edges",
			"removeEdge",
			"setSourceOutlet",
			"sceneGeome",
			"EdgeW",
			"updatePo",
			"contextmenu",
			"dagscene",
			"infini",
			"mousedouble",
			"selectionmodel",
			"handleSelectionChanged",
			"graph(",
			"result_sc",
			"finishConnection",
			"disconnected",
			"onDis",
			"handleNodesProp",
			"runScript",
			"createNodeWidget",
			"cell_at_line",
			"def instance",
			"instance",
			"setAttribute(",
			"setAttribute",
			"get_context",
			"QOpenGLWindow",
			"import QOpenGLWindow",
			"Literal",
			"literal",
			"Searching",
			"Lityeral",
			"dtype",
			"\t\t'",
			"internal_format",
			"dtype",
			"mode",
			"varyings_capture_mode",
			"internal_format"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"LinkEvent",
			"VertexWidget",
			"LinkWidget",
			"ConnectionEvent",
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pylive/NetworkXGraphEditor/nx_network_scene.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13915,
						"regions":
						{
						},
						"selection":
						[
							[
								10016,
								10016
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_network_scene.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4242.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pylive/NetworkXGraphEditor/nx_graph_model.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4530,
						"regions":
						{
						},
						"selection":
						[
							[
								3409,
								3409
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_model.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1134.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "pylive/NetworkXGraphEditor/nx_graph_scene-SUBCLASS-example.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3613,
						"regions":
						{
						},
						"selection":
						[
							[
								653,
								653
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/NetworkXGraphEditor/nx_graph_scene-SUBCLASS-example.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.427002583979,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 240.0
	},
	"output.Debugger Console":
	{
		"height": 240.0
	},
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 300.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"nx graph mo",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"graph model",
				"pylive\\NetworkXGraphEditor\\nx_graph_model.py"
			],
			[
				"icons",
				"expreiments\\display_builtin_icons.py"
			],
			[
				"nx graph",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nxselection",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"nx graph graphics",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene.py"
			],
			[
				"nx graph grap",
				"pylive\\QtGraphEditor\\nx_graph_view.py"
			],
			[
				"nx gr",
				"pylive\\QtGraphEditor\\nx_graph_graphics_scene_with_ports.py"
			],
			[
				"nx",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"arrowi",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\qgraphics_arrow_item.py"
			],
			[
				"link",
				"pylive\\QtGraphEditor\\NetrowkXGraphEditor\\link_graphics_items.py"
			],
			[
				"DagSc",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"nx graph s",
				"pylive\\QtGraphEditor\\nx_graph_selection_model.py"
			],
			[
				"dag graphics ",
				"pylive\\QtGraphEditor\\dag_graph_graphics_scene.py"
			],
			[
				"test py",
				"tests\\test_python_graphmodel.py"
			],
			[
				"python gr",
				"pylive\\examples\\python_function_graph\\python_graph_model.py"
			],
			[
				"main",
				"pylive\\examples\\python_function_graph\\main.py"
			],
			[
				"nxgraphmo",
				"pylive\\QtGraphEditor\\nx_graph_model.py"
			],
			[
				"standard",
				"pylive\\QtGraphEditor\\NetrowkXGraphditor\\standard_graph_delegate.py"
			],
			[
				"graphmodel",
				"pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py"
			],
			[
				"graphview",
				"pylive\\pylive\\QtGraphEditor\\graphview_databased.py"
			],
			[
				"build-a",
				"pylive\\expreiments\\built-a-dependency-graph-of-a-python-codebase.py"
			],
			[
				"conne",
				"pylive\\expreiments\\connect_to_ipython.py"
			],
			[
				"number",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"lint",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"script_",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"scriptedit",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"cell_s",
				"pylive\\pylive\\QtScriptEditor\\cell_support.py"
			],
			[
				"live_framewo",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"link file",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "setSelec",
		"selected_items":
		[
			[
				"setSelec",
				"setSelectionModel"
			],
			[
				"setSource",
				"setSourceOutlet"
			],
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 372.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
