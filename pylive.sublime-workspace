{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"add",
				"addLayout"
			],
			[
				"pre",
				"preview_area"
			],
			[
				"preview",
				"preview_area"
			],
			[
				"class",
				"classmethod"
			],
			[
				"gc",
				"get_context"
			],
			[
				"per",
				"perf_counter_ns"
			],
			[
				"pain",
				"painting"
			],
			[
				"setSwap",
				"setSwapBehavior"
			],
			[
				"setSw",
				"setSwapInterval"
			],
			[
				"call",
				"callback"
			],
			[
				"glEnableVerte",
				"glEnableVertexAttribArray"
			],
			[
				"QOpenGLShader",
				"QOpenGLShaderProgram"
			],
			[
				"GL",
				"GLCanvas"
			],
			[
				"reques",
				"requestUpdate"
			],
			[
				"initi",
				"initializeOpenGLFunctions"
			],
			[
				"reque",
				"requestedFormat"
			],
			[
				"request",
				"requestUpdate"
			],
			[
				"resize",
				"resizeGL"
			],
			[
				"QTo",
				"QtOpenGL"
			],
			[
				"Qop",
				"QtOpenGLWidgets"
			],
			[
				"size",
				"sizeHint"
			],
			[
				"open",
				"opengl_widget"
			],
			[
				"paintE",
				"paintEvent"
			],
			[
				"GL_DEPTH_BU",
				"GL_DEPTH_BUFFER_BIT"
			],
			[
				"Qope",
				"QOpenGLWidget"
			],
			[
				"con",
				"context"
			],
			[
				"frame",
				"defaultFramebufferObject"
			],
			[
				"validate",
				"validate_uniforms"
			],
			[
				"ui",
				"uint8"
			],
			[
				"u",
				"uint"
			],
			[
				"Res",
				"result"
			],
			[
				"in",
				"input"
			],
			[
				"ex",
				"exceptionThrown"
			],
			[
				"lint",
				"lintException"
			],
			[
				"proje",
				"projectionMatrix"
			],
			[
				"intern",
				"internal_format"
			],
			[
				"texture_",
				"texture_cube"
			],
			[
				"Tex",
				"Texture3D"
			],
			[
				"texture",
				"texture3ds"
			],
			[
				"vert",
				"vertex_arrays"
			],
			[
				"ver",
				"vertex_array"
			],
			[
				"weak",
				"weakref"
			],
			[
				"bu",
				"buffers"
			],
			[
				"QPain",
				"QPaintEvent"
			],
			[
				"po",
				"getPosition"
			],
			[
				"p",
				"pi"
			],
			[
				"lin",
				"lintException"
			],
			[
				"li",
				"lintException"
			],
			[
				"dis",
				"distance"
			],
			[
				"Tria",
				"TRIANGLES"
			],
			[
				"Layer",
				"BoxLayer"
			],
			[
				"resiz",
				"resizeGL"
			],
			[
				"isin",
				"isinstance"
			],
			[
				"typ",
				"typing"
			],
			[
				"defaultdi",
				"defaultdict"
			],
			[
				"Press",
				"MouseButtonPress"
			],
			[
				"Qtopen",
				"QtOpenGLWidgets"
			],
			[
				"q",
				"QtWidgets"
			],
			[
				"QtOpe",
				"QtOpenGLWidgets"
			],
			[
				"Q",
				"QOpenGLWidget"
			],
			[
				"QtOpen",
				"QtOpenGLWidgets"
			],
			[
				"completion",
				"gui_completion_height"
			],
			[
				"compl",
				"gui_completion"
			],
			[
				"Color",
				"ColorGroup"
			],
			[
				"set",
				"setColor"
			],
			[
				"kernel_",
				"kernel_client"
			],
			[
				"kerne",
				"kernel_manager"
			],
			[
				"Execution",
				"ExecutionResult"
			],
			[
				"std",
				"stderr"
			],
			[
				"up",
				"updateGeometry"
			],
			[
				"upda",
				"updateGeometry"
			],
			[
				"resi",
				"resizeEvent"
			],
			[
				"ins",
				"insertRow"
			],
			[
				"cell",
				"cell_layout"
			],
			[
				"cell_",
				"cells_layout"
			],
			[
				"cells",
				"cells_layout"
			],
			[
				"content",
				"contentsMargins"
			],
			[
				"minimumS",
				"minimumSizeHint"
			],
			[
				"addS",
				"addStretch"
			],
			[
				"not",
				"notebook_preview"
			],
			[
				"data",
				"dataChanged"
			],
			[
				"QPer",
				"QPersistentModelIndex"
			],
			[
				"QStandardItem",
				"QStandardItemModel"
			],
			[
				"insert",
				"insertWidget"
			],
			[
				"setPl",
				"setPlainText"
			],
			[
				"main",
				"mainLayout"
			],
			[
				"setS",
				"setSizes"
			],
			[
				"note",
				"notebook_preview"
			],
			[
				"Sc",
				"ScriptEdit"
			],
			[
				"Note",
				"NotebookPreview"
			],
			[
				"curso",
				"cursor"
			],
			[
				"End",
				"EndOfLine"
			],
			[
				"Mo",
				"MoveOperation"
			],
			[
				"bl",
				"block"
			],
			[
				"wr",
				"setWordWrap"
			],
			[
				"to",
				"toPlainText"
			],
			[
				"cursor",
				"cursorPositionChanged"
			],
			[
				"mAIN",
				"mainLayout"
			],
			[
				"setT",
				"setToolTip"
			],
			[
				"QPl",
				"QPlainTextEdit"
			],
			[
				"style",
				"style_name="
			],
			[
				"se",
				"selectionChanged"
			],
			[
				"list",
				"listwidget"
			],
			[
				"get",
				"getHsl"
			],
			[
				"under",
				"underlineError"
			],
			[
				"clear",
				"clearUnderlinedErrors"
			],
			[
				"graph",
				"graphview"
			],
			[
				"function",
				"function_name"
			],
			[
				"completionMo",
				"completionModel"
			],
			[
				"req",
				"requestCompletions"
			],
			[
				"text",
				"textCursor"
			],
			[
				"pos",
				"position"
			],
			[
				"te",
				"textUnderCursor"
			],
			[
				"sorte",
				"sorted_proposals"
			],
			[
				"sor",
				"sorted_proposals"
			],
			[
				"Qt",
				"QtScriptEditor"
			],
			[
				"Rope",
				"AsyncRopeCompleter"
			],
			[
				"update",
				"update_ui"
			],
			[
				"thre",
				"thread_pool"
			],
			[
				"track",
				"setMouseTracking"
			],
			[
				"word",
				"WordUnderCursor"
			],
			[
				"Key",
				"Key_Return"
			],
			[
				"event",
				"eventFilter"
			],
			[
				"ty",
				"typing"
			],
			[
				"sc",
				"script_edit"
			],
			[
				"cle",
				"clearNotifications"
			],
			[
				"Move",
				"MoveOperation"
			],
			[
				"drag",
				"drag_range"
			]
		]
	},
	"buffers":
	[
		{
			"file": "expreiments/file_textdocument_link.py",
			"settings":
			{
				"buffer_size": 4369,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "pylive/render_engine/GLCanvasWidget_with_painting_signal.py",
			"redo_stack":
			[
				[
					77,
					1,
					"paste",
					null,
					"AgAAADIFAAAAAAAAxw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIFAABmcm9tIHR5cGluZyBpbXBvcnQgKgpmcm9tIFB5U2lkZTYuUXRHdWkgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0Q29yZSBpbXBvcnQgKgpmcm9tIFB5U2lkZTYuUXRXaWRnZXRzIGltcG9ydCAqCmltcG9ydCBtb2Rlcm5nbApmcm9tIHB5bGl2ZS5yZW5kZXJfZW5naW5lLkdMQ2FudmFzV2lkZ2V0X3dpdGhfcGFpbnRpbmdfc2lnbmFsIGltcG9ydCBHTENhbnZhc1dpZGdldAoKaW1wb3J0IHN5cwojIyMgY3JlYXRlIHRoZSBhcHAgIyMjCmFwcCA9IFFBcHBsaWNhdGlvbi5pbnN0YW5jZSgpIG9yIFFBcHBsaWNhdGlvbihzeXMuYXJndikKZ2xjYW52YXMgPSBHTENhbnZhc1dpZGdldCgpCmdsY2FudmFzLnNob3coKQppZiBfX25hbWVfXyA9PSAiX19saXZlX18iOgoJbGl2ZS5zZXRQcmV2aWV3KGdsY2FudmFzKQpjdHggPSBOb25lCgojJSUgdXBkYXRlCiMjIyBkZWZpbmUgcmVuZGVyIGZ1bmN0aW9uICMjIwoKZnJvbSBweWxpdmUucmVuZGVyX2VuZ2luZS51dGlscyBpbXBvcnQgZHJhd190cmlhbmdsZV93aXRoX21vZGVybmdsCnNwZWVkID0gNC4wCmRlZiBwYWludCgpOgoJaW1wb3J0IHRpbWUKCSMgUU9wZW5HTFdpZGdldCB1c2VzIGFuIGludGVybmFsIEZCTyBmb3IgZHJhd2luZywgdXNlIHRoYXQgd2l0aCBtb2Rlcm5nbAoJZ2xvYmFsIGN0eAoJc3RhcnRfdGltZSA9IHRpbWUucGVyZl9jb3VudGVyX25zKCkKCWlmIG5vdCBjdHg6CgkJY3R4ID0gbW9kZXJuZ2wuZ2V0X2NvbnRleHQoKQoJCWN0eC5nY19tb2RlID0gJ2NvbnRleHRfZ2MnCgkJcHJpbnQodGltZS5wZXJmX2NvdW50ZXJfbnMoKS1zdGFydF90aW1lKQoJZmJvID0gY3R4LmRldGVjdF9mcmFtZWJ1ZmZlcigpCglmYm8udXNlKCkKCWltcG9ydCBtYXRoCglpbXBvcnQgdGltZQoJY3R4LmNsZWFyKDAuNSwuMSwwLjUsMSkKCWRyYXdfdHJpYW5nbGVfd2l0aF9tb2Rlcm5nbChjdHgsIHNpemU9bWF0aC5jb3ModGltZS50aW1lKCkqc3BlZWQpKQoJY3R4LmdjKCkKCSMgY29ubmVjdCBjb250aW5vdXNseSwgYW5kIHJlcXVlc3QgdXBkYXRlCglnbGNhbnZhcy5wYWludGluZy5jb25uZWN0KHBhaW50LCBRdC5Db25uZWN0aW9uVHlwZS5TaW5nbGVTaG90Q29ubmVjdGlvbikKCWdsY2FudmFzLnVwZGF0ZSgpICNyZXF1ZXN0IHJlcGFpbnQgY29udGlub3VzbHkKCiMjIyBzZXQgcmVuZGVyIGZ1bmN0aW9uICMjIwpnbGNhbnZhcy5wYWludGluZy5jb25uZWN0KHBhaW50LCBRdC5Db25uZWN0aW9uVHlwZS5TaW5nbGVTaG90Q29ubmVjdGlvbikKZ2xjYW52YXMudXBkYXRlKCkKCQppbXBvcnQgaW5zcGVjdApwcmludChpbnNwZWN0LmdldHNvdXJjZShzeXMubW9kdWxlc1tfX25hbWVfX10pKQphcHAuZXhlYygp",
					"AQAAAAAAAAABAAAAMgUAAAAAAAAyBQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 2709,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM0JAAAAAAAAzgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4JAAAAAAAAzwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgkAAAAAAADOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "Qt.Co"
					},
					"BQAAAM8JAAAAAAAA0AkAAAAAAAAAAAAA0AkAAAAAAADRCQAAAAAAAAAAAADRCQAAAAAAANIJAAAAAAAAAAAAANIJAAAAAAAA0wkAAAAAAAAAAAAA0wkAAAAAAADUCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwkAAAAAAADPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "nnec"
					},
					"BAAAANQJAAAAAAAA1QkAAAAAAAAAAAAA1QkAAAAAAADWCQAAAAAAAAAAAADWCQAAAAAAANcJAAAAAAAAAAAAANcJAAAAAAAA2AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AkAAAAAAADUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ConnectionType"
					},
					"AgAAANIJAAAAAAAA0gkAAAAAAAAGAAAAQ29ubmVj0gkAAAAAAADgCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AkAAAAAAADYCQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "hot"
					},
					"AwAAAOEJAAAAAAAA4gkAAAAAAAAAAAAA4gkAAAAAAADjCQAAAAAAAAAAAADjCQAAAAAAAOQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QkAAAAAAADhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "SingleShotConnection"
					},
					"AgAAAOEJAAAAAAAA4QkAAAAAAAADAAAAaG904QkAAAAAAAD1CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AkAAAAAAADkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI4JAAAAAAAAjwkAAAAAAAAAAAAAjwkAAAAAAACRCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAAJEJAAAAAAAA2QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQkAAAAAAACRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAGAJAAAAAAAAYgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgkAAAAAAACOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAGAJAAAAAAAAYAkAAAAAAAACAAAAIyA",
					"AQAAAAAAAAABAAAAkAkAAAAAAACQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"cut",
					null,
					"AQAAAGAJAAAAAAAAYAkAAAAAAAAuAAAAZ2xjYW52YXMudXBkYXRlKCkgI3JlcXVlc3QgcmVwYWludCBjb250aW5vdXNseQ",
					"AQAAAAAAAAABAAAAjgkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKsJAAAAAAAArAkAAAAAAAAAAAAArAkAAAAAAACuCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwkAAAAAAACrCQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAK4JAAAAAAAA3AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgkAAAAAAACuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AwAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABjCQAAAAAAAAAAAABjCQAAAAAAAGQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " request"
					},
					"CAAAAGQJAAAAAAAAZQkAAAAAAAAAAAAAZQkAAAAAAABmCQAAAAAAAAAAAABmCQAAAAAAAGcJAAAAAAAAAAAAAGcJAAAAAAAAaAkAAAAAAAAAAAAAaAkAAAAAAABpCQAAAAAAAAAAAABpCQAAAAAAAGoJAAAAAAAAAAAAAGoJAAAAAAAAawkAAAAAAAAAAAAAawkAAAAAAABsCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " anuim"
					},
					"BgAAAGwJAAAAAAAAbQkAAAAAAAAAAAAAbQkAAAAAAABuCQAAAAAAAAAAAABuCQAAAAAAAG8JAAAAAAAAAAAAAG8JAAAAAAAAcAkAAAAAAAAAAAAAcAkAAAAAAABxCQAAAAAAAAAAAABxCQAAAAAAAHIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					5,
					"left_delete",
					null,
					"BQAAAHEJAAAAAAAAcQkAAAAAAAABAAAAbXAJAAAAAAAAcAkAAAAAAAABAAAAaW8JAAAAAAAAbwkAAAAAAAABAAAAdW4JAAAAAAAAbgkAAAAAAAABAAAAbm0JAAAAAAAAbQkAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAcgkAAAAAAAByCQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "paint"
					},
					"BQAAAG0JAAAAAAAAbgkAAAAAAAAAAAAAbgkAAAAAAABvCQAAAAAAAAAAAABvCQAAAAAAAHAJAAAAAAAAAAAAAHAJAAAAAAAAcQkAAAAAAAAAAAAAcQkAAAAAAAByCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQkAAAAAAABtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " frame,"
					},
					"BwAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAB0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAAdgkAAAAAAAB3CQAAAAAAAAAAAAB3CQAAAAAAAHgJAAAAAAAAAAAAAHgJAAAAAAAAeQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgkAAAAAAAByCQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkJAAAAAAAAegkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					20,
					"left_delete",
					null,
					"FAAAAHkJAAAAAAAAeQkAAAAAAAABAAAAIHgJAAAAAAAAeAkAAAAAAAABAAAALHcJAAAAAAAAdwkAAAAAAAABAAAAZXYJAAAAAAAAdgkAAAAAAAABAAAAbXUJAAAAAAAAdQkAAAAAAAABAAAAYXQJAAAAAAAAdAkAAAAAAAABAAAAcnMJAAAAAAAAcwkAAAAAAAABAAAAZnIJAAAAAAAAcgkAAAAAAAABAAAAIHEJAAAAAAAAcQkAAAAAAAABAAAAdHAJAAAAAAAAcAkAAAAAAAABAAAAbm8JAAAAAAAAbwkAAAAAAAABAAAAaW4JAAAAAAAAbgkAAAAAAAABAAAAYW0JAAAAAAAAbQkAAAAAAAABAAAAcGwJAAAAAAAAbAkAAAAAAAABAAAAIGsJAAAAAAAAawkAAAAAAAABAAAAdGoJAAAAAAAAagkAAAAAAAABAAAAc2kJAAAAAAAAaQkAAAAAAAABAAAAZWgJAAAAAAAAaAkAAAAAAAABAAAAdWcJAAAAAAAAZwkAAAAAAAABAAAAcWYJAAAAAAAAZgkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAegkAAAAAAAB6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAGUJAAAAAAAAZQkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAZgkAAAAAAABmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "connect"
					},
					"BwAAAGUJAAAAAAAAZgkAAAAAAAAAAAAAZgkAAAAAAABnCQAAAAAAAAAAAABnCQAAAAAAAGgJAAAAAAAAAAAAAGgJAAAAAAAAaQkAAAAAAAAAAAAAaQkAAAAAAABqCQAAAAAAAAAAAABqCQAAAAAAAGsJAAAAAAAAAAAAAGsJAAAAAAAAbAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQkAAAAAAABlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " continous"
					},
					"CgAAAGwJAAAAAAAAbQkAAAAAAAAAAAAAbQkAAAAAAABuCQAAAAAAAAAAAABuCQAAAAAAAG8JAAAAAAAAAAAAAG8JAAAAAAAAcAkAAAAAAAAAAAAAcAkAAAAAAABxCQAAAAAAAAAAAABxCQAAAAAAAHIJAAAAAAAAAAAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAB0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "ly,"
					},
					"AwAAAHYJAAAAAAAAdwkAAAAAAAAAAAAAdwkAAAAAAAB4CQAAAAAAAAAAAAB4CQAAAAAAAHkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgkAAAAAAAB2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " adn"
					},
					"BAAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAB7CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH0JAAAAAAAAfgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQkAAAAAAAB9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					3,
					"left_delete",
					null,
					"AwAAAH0JAAAAAAAAfQkAAAAAAAABAAAAIHwJAAAAAAAAfAkAAAAAAAABAAAAbnsJAAAAAAAAewkAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAfgkAAAAAAAB+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "nd"
					},
					"AgAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewkAAAAAAAB7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " request"
					},
					"CAAAAH0JAAAAAAAAfgkAAAAAAAAAAAAAfgkAAAAAAAB/CQAAAAAAAAAAAAB/CQAAAAAAAIAJAAAAAAAAAAAAAIAJAAAAAAAAgQkAAAAAAAAAAAAAgQkAAAAAAACCCQAAAAAAAAAAAACCCQAAAAAAAIMJAAAAAAAAAAAAAIMJAAAAAAAAhAkAAAAAAAAAAAAAhAkAAAAAAACFCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQkAAAAAAAB9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " aupdate"
					},
					"CAAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAACHCQAAAAAAAIgJAAAAAAAAAAAAAIgJAAAAAAAAiQkAAAAAAAAAAAAAiQkAAAAAAACKCQAAAAAAAAAAAACKCQAAAAAAAIsJAAAAAAAAAAAAAIsJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACNCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQkAAAAAAACFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					7,
					"left_delete",
					null,
					"BwAAAIwJAAAAAAAAjAkAAAAAAAABAAAAZYsJAAAAAAAAiwkAAAAAAAABAAAAdIoJAAAAAAAAigkAAAAAAAABAAAAYYkJAAAAAAAAiQkAAAAAAAABAAAAZIgJAAAAAAAAiAkAAAAAAAABAAAAcIcJAAAAAAAAhwkAAAAAAAABAAAAdYYJAAAAAAAAhgkAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAjQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "update"
					},
					"BgAAAIYJAAAAAAAAhwkAAAAAAAAAAAAAhwkAAAAAAACICQAAAAAAAAAAAACICQAAAAAAAIkJAAAAAAAAAAAAAIkJAAAAAAAAigkAAAAAAAAAAAAAigkAAAAAAACLCQAAAAAAAAAAAACLCQAAAAAAAIwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgkAAAAAAACGCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
			"settings":
			{
				"buffer_size": 1330,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAAHcBAAAAAAAAdwEAAAAAAAAeAAAAZ2xjYW52YXMucGFpbnRpbmcuZGlzY29ubmVjdCgp",
					"AQAAAAAAAAABAAAAlQEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AgAAAHgDAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACHBAAAAAAAAFEAAAAJZ2xjYW52YXMudXBkYXRlKCkgI3JlcXVlc3QgcmVwYWludCBjb250aW5vdXNseQoKZ2xjYW52YXMucGFpbnRpbmcuY29ubmVjdChwYWludCk",
					"AQAAAAAAAAABAAAAyQMAAAAAAAB4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIcEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACJBAAAAAAAAAAAAACJBAAAAAAAAIoEAAAAAAAAAAAAAIoEAAAAAAAAiwQAAAAAAAAAAAAAiAQAAAAAAACIBAAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAAhwQAAAAAAACHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"unindent",
					null,
					"BQAAAHgDAAAAAAAAeAMAAAAAAAABAAAACaMDAAAAAAAAowMAAAAAAAABAAAACe0DAAAAAAAA7QMAAAAAAAABAAAACR4EAAAAAAAAHgQAAAAAAAABAAAACToEAAAAAAAAOgQAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAhwQAAAAAAAB4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAHQUAAAAAAAAAAAAAHQUAAAAAAAAdBQAAAAAAAM8EAABmcm9tIFB5U2lkZTYuUXRXaWRnZXRzIGltcG9ydCAqCmltcG9ydCBtb2Rlcm5nbApmcm9tIHB5bGl2ZS5yZW5kZXJfZW5naW5lLkdMQ2FudmFzV2lkZ2V0X3dpdGhfcGFpbnRpbmdfc2lnbmFsIGltcG9ydCBHTENhbnZhc1dpZGdldAoKaW1wb3J0IHN5cwojIyMgY3JlYXRlIHRoZSBhcHAgIyMjCmFwcCA9IFFBcHBsaWNhdGlvbi5pbnN0YW5jZSgpIG9yIFFBcHBsaWNhdGlvbihzeXMuYXJndikKZ2xjYW52YXMgPSBHTENhbnZhc1dpZGdldCgpCmdsY2FudmFzLnNob3coKQppZiBfX25hbWVfXyA9PSAiX19saXZlX18iOgoJbGl2ZS5zZXRQcmV2aWV3KGdsY2FudmFzKQpjdHggPSBOb25lCgojJSUgdXBkYXRlCiMjIyBkZWZpbmUgcmVuZGVyIGZ1bmN0aW9uICMjIwoKZnJvbSBweWxpdmUucmVuZGVyX2VuZ2luZS51dGlscyBpbXBvcnQgZHJhd190cmlhbmdsZV93aXRoX21vZGVybmdsCnNwZWVkID0gMy4wCmRlZiBwYWludCgpOgoJaW1wb3J0IHRpbWUKCSMgUU9wZW5HTFdpZGdldCB1c2VzIGFuIGludGVybmFsIEZCTyBmb3IgZHJhd2luZywgdXNlIHRoYXQgd2l0aCBtb2Rlcm5nbAoJZ2xvYmFsIGN0eAoJc3RhcnRfdGltZSA9IHRpbWUucGVyZl9jb3VudGVyX25zKCkKCWlmIG5vdCBjdHg6CgkJY3R4ID0gbW9kZXJuZ2wuZ2V0X2NvbnRleHQoKQoJCWN0eC5nY19tb2RlID0gJ2NvbnRleHRfZ2MnCgkJcHJpbnQodGltZS5wZXJmX2NvdW50ZXJfbnMoKS1zdGFydF90aW1lKQoJZmJvID0gY3R4LmRldGVjdF9mcmFtZWJ1ZmZlcigpCglmYm8udXNlKCkKCWltcG9ydCBtYXRoCglpbXBvcnQgdGltZQoJY3R4LmNsZWFyKDAuNSwuMSwwLjUsMSkKCWRyYXdfdHJpYW5nbGVfd2l0aF9tb2Rlcm5nbChjdHgsIHNpemU9bWF0aC5jb3ModGltZS50aW1lKCkqMSkpCgljdHguZ2MoKQoJIyBjb25uZWN0IGNvbnRpbm91c2x5LCBhbmQgcmVxdWVzdCB1cGRhdGUKCWdsY2FudmFzLnBhaW50aW5nLmNvbm5lY3QocGFpbnQsIFF0LkNvbm5lY3Rpb25UeXBlLlNpbmdsZVNob3RDb25uZWN0aW9uKQoJZ2xjYW52YXMudXBkYXRlKCkgI3JlcXVlc3QgcmVwYWludCBjb250aW5vdXNseQoKIyMjIHNldCByZW5kZXIgZnVuY3Rpb24gIyMjCmdsY2FudmFzLnBhaW50aW5nLmNvbm5lY3QocGFpbnQsIFF0LkNvbm5lY3Rpb25UeXBlLlNpbmdsZVNob3RDb25uZWN0aW9uKQoKCQppbXBvcnQgaW5zcGVjdApwcmludChpbnNwZWN0LmdldHNvdXJjZShzeXMubW9kdWxlc1tfX25hbWVfX10pKQphcHAuZXhlYygp",
					"AgAAAAAAAAABAAAAAAAAAAAAAADPBAAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAAAAAAAAAAM8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAyBQAAAAAAAB0FAABmcm9tIHR5cGluZyBpbXBvcnQgKgpmcm9tIFB5U2lkZTYuUXRHdWkgaW1wb3J0ICoKZnJvbSBQeVNpZGU2LlF0Q29yZSBpbXBvcnQgKgpmcm9tIFB5U2lkZTYuUXRXaWRnZXRzIGltcG9ydCAqCmltcG9ydCBtb2Rlcm5nbApmcm9tIHB5bGl2ZS5yZW5kZXJfZW5naW5lLkdMQ2FudmFzV2lkZ2V0X3dpdGhfcGFpbnRpbmdfc2lnbmFsIGltcG9ydCBHTENhbnZhc1dpZGdldAoKaW1wb3J0IHN5cwojIyMgY3JlYXRlIHRoZSBhcHAgIyMjCmFwcCA9IFFBcHBsaWNhdGlvbi5pbnN0YW5jZSgpIG9yIFFBcHBsaWNhdGlvbihzeXMuYXJndikKZ2xjYW52YXMgPSBHTENhbnZhc1dpZGdldCgpCmdsY2FudmFzLnNob3coKQppZiBfX25hbWVfXyA9PSAiX19saXZlX18iOgoJbGl2ZS5zZXRQcmV2aWV3KGdsY2FudmFzKQpjdHggPSBOb25lCgojJSUgdXBkYXRlCiMjIyBkZWZpbmUgcmVuZGVyIGZ1bmN0aW9uICMjIwoKZnJvbSBweWxpdmUucmVuZGVyX2VuZ2luZS51dGlscyBpbXBvcnQgZHJhd190cmlhbmdsZV93aXRoX21vZGVybmdsCnNwZWVkID0gMy4wCmRlZiBwYWludCgpOgoJaW1wb3J0IHRpbWUKCSMgUU9wZW5HTFdpZGdldCB1c2VzIGFuIGludGVybmFsIEZCTyBmb3IgZHJhd2luZywgdXNlIHRoYXQgd2l0aCBtb2Rlcm5nbAoJZ2xvYmFsIGN0eAoJc3RhcnRfdGltZSA9IHRpbWUucGVyZl9jb3VudGVyX25zKCkKCWlmIG5vdCBjdHg6CgkJY3R4ID0gbW9kZXJuZ2wuZ2V0X2NvbnRleHQoKQoJCWN0eC5nY19tb2RlID0gJ2NvbnRleHRfZ2MnCgkJcHJpbnQodGltZS5wZXJmX2NvdW50ZXJfbnMoKS1zdGFydF90aW1lKQoJZmJvID0gY3R4LmRldGVjdF9mcmFtZWJ1ZmZlcigpCglmYm8udXNlKCkKCWltcG9ydCBtYXRoCglpbXBvcnQgdGltZQoJY3R4LmNsZWFyKDAuNSwuMSwwLjUsMSkKCWRyYXdfdHJpYW5nbGVfd2l0aF9tb2Rlcm5nbChjdHgsIHNpemU9bWF0aC5jb3ModGltZS50aW1lKCkqMSkpCgljdHguZ2MoKQoJIyBjb25uZWN0IGNvbnRpbm91c2x5LCBhbmQgcmVxdWVzdCB1cGRhdGUKCWdsY2FudmFzLnBhaW50aW5nLmNvbm5lY3QocGFpbnQsIFF0LkNvbm5lY3Rpb25UeXBlLlNpbmdsZVNob3RDb25uZWN0aW9uKQoJZ2xjYW52YXMudXBkYXRlKCkgI3JlcXVlc3QgcmVwYWludCBjb250aW5vdXNseQoKIyMjIHNldCByZW5kZXIgZnVuY3Rpb24gIyMjCmdsY2FudmFzLnBhaW50aW5nLmNvbm5lY3QocGFpbnQsIFF0LkNvbm5lY3Rpb25UeXBlLlNpbmdsZVNob3RDb25uZWN0aW9uKQoKCQppbXBvcnQgaW5zcGVjdApwcmludChpbnNwZWN0LmdldHNvdXJjZShzeXMubW9kdWxlc1tfX25hbWVfX10pKQphcHAuZXhlYygp",
					"AgAAAAAAAAABAAAAHQUAAAAAAAAdBQAAAAAAAAAAAAAAAPC/AQAAAAEAAAAAAAAAAAAAAB0FAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "pylive/QtLiveFramework/live_framework_with_exec.py",
			"settings":
			{
				"buffer_size": 4433,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					27,
					1,
					"insert",
					{
						"characters": "live"
					},
					"BQAAAAYGAAAAAAAABwYAAAAAAAAAAAAABwYAAAAAAAAHBgAAAAAAAAMAAABhcHAHBgAAAAAAAAgGAAAAAAAAAAAAAAgGAAAAAAAACQYAAAAAAAAAAAAACQYAAAAAAAAKBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGBgAAAAAAAAkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABEGAAAAAAAAEgYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARBgAAAAAAABEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIGAAAAAAAAEwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASBgAAAAAAABIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABMGAAAAAAAAFQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATBgAAAAAAABMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "__name__"
					},
					"CAAAABQGAAAAAAAAFQYAAAAAAAAAAAAAFQYAAAAAAAAWBgAAAAAAAAAAAAAWBgAAAAAAABcGAAAAAAAAAAAAABcGAAAAAAAAGAYAAAAAAAAAAAAAGAYAAAAAAAAZBgAAAAAAAAAAAAAZBgAAAAAAABoGAAAAAAAAAAAAABoGAAAAAAAAGwYAAAAAAAAAAAAAGwYAAAAAAAAcBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUBgAAAAAAABQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAB0GAAAAAAAAHgYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdBgAAAAAAAB0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4GAAAAAAAAHwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeBgAAAAAAAB4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAB8GAAAAAAAAIQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfBgAAAAAAAB8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "__vile"
					},
					"BgAAACAGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAiBgAAAAAAAAAAAAAiBgAAAAAAACMGAAAAAAAAAAAAACMGAAAAAAAAJAYAAAAAAAAAAAAAJAYAAAAAAAAlBgAAAAAAAAAAAAAlBgAAAAAAACYGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgBgAAAAAAACAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					4,
					"left_delete",
					null,
					"BAAAACUGAAAAAAAAJQYAAAAAAAABAAAAZSQGAAAAAAAAJAYAAAAAAAABAAAAbCMGAAAAAAAAIwYAAAAAAAABAAAAaSIGAAAAAAAAIgYAAAAAAAABAAAAdg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmBgAAAAAAACYGAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "live__"
					},
					"BgAAACIGAAAAAAAAIwYAAAAAAAAAAAAAIwYAAAAAAAAkBgAAAAAAAAAAAAAkBgAAAAAAACUGAAAAAAAAAAAAACUGAAAAAAAAJgYAAAAAAAAAAAAAJgYAAAAAAAAnBgAAAAAAAAAAAAAnBgAAAAAAACgGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiBgAAAAAAACIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAGEHAAAAAAAAYgcAAAAAAAAAAAAAYgcAAAAAAABkBwAAAAAAAAAAAABkBwAAAAAAAGUHAAAAAAAAAAAAAGUHAAAAAAAAZwcAAAAAAAAAAAAAYgcAAAAAAABiBwAAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAAYQcAAAAAAABhBwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAGQHAAAAAAAAZAcAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAZQcAAAAAAABlBwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAGQHAAAAAAAAZQcAAAAAAAAAAAAAZQcAAAAAAABmBwAAAAAAAAAAAABmBwAAAAAAAGcHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAcAAAAAAABkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcHAAAAAAAAaAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwcAAAAAAABnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "display"
					},
					"BwAAAGgHAAAAAAAAaQcAAAAAAAAAAAAAaQcAAAAAAABqBwAAAAAAAAAAAABqBwAAAAAAAGsHAAAAAAAAAAAAAGsHAAAAAAAAbAcAAAAAAAAAAAAAbAcAAAAAAABtBwAAAAAAAAAAAABtBwAAAAAAAG4HAAAAAAAAAAAAAG4HAAAAAAAAbwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAcAAAAAAABoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG8HAAAAAAAAcQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwcAAAAAAABvBwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "self,"
					},
					"BQAAAHAHAAAAAAAAcQcAAAAAAAAAAAAAcQcAAAAAAAByBwAAAAAAAAAAAAByBwAAAAAAAHMHAAAAAAAAAAAAAHMHAAAAAAAAdAcAAAAAAAAAAAAAdAcAAAAAAAB1BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAcAAAAAAABwBwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAHUHAAAAAAAAdgcAAAAAAAAAAAAAdgcAAAAAAAB3BwAAAAAAAAAAAAB3BwAAAAAAAHgHAAAAAAAAAAAAAHgHAAAAAAAAeQcAAAAAAAAAAAAAeQcAAAAAAAB6BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQcAAAAAAAB1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHsHAAAAAAAAfAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewcAAAAAAAB7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\nmat"
					},
					"BgAAAHwHAAAAAAAAfQcAAAAAAAAAAAAAfQcAAAAAAAB+BwAAAAAAAAAAAAB+BwAAAAAAAH8HAAAAAAAAAAAAAH8HAAAAAAAAgAcAAAAAAAAAAAAAgAcAAAAAAACBBwAAAAAAAAAAAACBBwAAAAAAAIIHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAcAAAAAAAB8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					3,
					"left_delete",
					null,
					"AwAAAIEHAAAAAAAAgQcAAAAAAAABAAAAdIAHAAAAAAAAgAcAAAAAAAABAAAAYX8HAAAAAAAAfwcAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAggcAAAAAAACCBwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAAHcCAAAAAAAAeAIAAAAAAAAAAAAAfgcAAAAAAAB+BwAAAAAAAAIAAAAJCXgCAAAAAAAAeQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwIAAAAAAAB3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AQAAAHkCAAAAAAAAwAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQIAAAAAAAB5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "Display"
					},
					"CAAAAH8CAAAAAAAAgAIAAAAAAAAAAAAAgAIAAAAAAACAAgAAAAAAAA0AAABTdXBwb3J0c0Nsb3NlgAIAAAAAAACBAgAAAAAAAAAAAACBAgAAAAAAAIICAAAAAAAAAAAAAIICAAAAAAAAgwIAAAAAAAAAAAAAgwIAAAAAAACEAgAAAAAAAAAAAACEAgAAAAAAAIUCAAAAAAAAAAAAAIUCAAAAAAAAhgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "Live"
					},
					"BAAAAIYCAAAAAAAAhwIAAAAAAAAAAAAAhwIAAAAAAACIAgAAAAAAAAAAAACIAgAAAAAAAIkCAAAAAAAAAAAAAIkCAAAAAAAAigIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgIAAAAAAACGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					2,
					"left_delete",
					null,
					"AgAAAJ8CAAAAAAAAnwIAAAAAAAAgAAAAbG9zZShzZWxmKSAtPiBOb25lOgogICAgICAgIC4uLgqeAgAAAAAAAJ4CAAAAAAAAAQAAAGM",
					"AQAAAAAAAAABAAAAvwIAAAAAAACfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "_repr_"
					},
					"BgAAAJ4CAAAAAAAAnwIAAAAAAAAAAAAAnwIAAAAAAACgAgAAAAAAAAAAAACgAgAAAAAAAKECAAAAAAAAAAAAAKECAAAAAAAAogIAAAAAAAAAAAAAogIAAAAAAACjAgAAAAAAAAAAAACjAgAAAAAAAKQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "html_"
					},
					"BQAAAKQCAAAAAAAApQIAAAAAAAAAAAAApQIAAAAAAACmAgAAAAAAAAAAAACmAgAAAAAAAKcCAAAAAAAAAAAAAKcCAAAAAAAAqAIAAAAAAAAAAAAAqAIAAAAAAACpAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAIAAAAAAACkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKkCAAAAAAAAqwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQIAAAAAAACpAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAK0CAAAAAAAArgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAK8CAAAAAAAAsAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwIAAAAAAACvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\npass"
					},
					"BwAAALACAAAAAAAAsQIAAAAAAAAAAAAAsQIAAAAAAAC1AgAAAAAAAAAAAAC1AgAAAAAAALYCAAAAAAAAAAAAALYCAAAAAAAAtwIAAAAAAAAAAAAAtwIAAAAAAAC4AgAAAAAAAAAAAAC4AgAAAAAAALkCAAAAAAAAAAAAALkCAAAAAAAAugIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAIAAAAAAACwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALoCAAAAAAAAuwIAAAAAAAAAAAAAuwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAMECAAAAAAAAxgIAAAAAAAAAAAAAuwIAAAAAAAC7AgAAAAAAAAUAAAAgICAgCQ",
					"AQAAAAAAAAABAAAAugIAAAAAAAC6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAMACAAAAAAAAwAIAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAwQIAAAAAAADBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAAMACAAAAAAAAzAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAIAAAAAAADAAgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMwCAAAAAAAAzgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAIAAAAAAADMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAAM0CAAAAAAAAzgIAAAAAAAAAAAAAzgIAAAAAAADPAgAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAANACAAAAAAAA0QIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQIAAAAAAADNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANICAAAAAAAA0wIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gIAAAAAAADSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADYAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wIAAAAAAADTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "def"
					},
					"BAAAAMACAAAAAAAAwQIAAAAAAAAAAAAA1QIAAAAAAADVAgAAAAAAAAQAAAAgICAgwQIAAAAAAADCAgAAAAAAAAAAAADCAgAAAAAAAMMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAIAAAAAAADAAgAAAAAAAAAAAAAAADpA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMCAAAAAAAAxAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwIAAAAAAADDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"reindent",
					null,
					"AQAAANgCAAAAAAAA3QIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AIAAAAAAADYAgAAAAAAAAAAAAAAgEpA"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "pass"
					},
					"BAAAAN0CAAAAAAAA3gIAAAAAAAAAAAAA3gIAAAAAAADfAgAAAAAAAAAAAADfAgAAAAAAAOACAAAAAAAAAAAAAOACAAAAAAAA4QIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QIAAAAAAADdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "->str"
					},
					"BQAAAK8CAAAAAAAAsAIAAAAAAAAAAAAAsAIAAAAAAACxAgAAAAAAAAAAAACxAgAAAAAAALICAAAAAAAAAAAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC0AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwIAAAAAAACvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "->str"
					},
					"BQAAANsCAAAAAAAA3AIAAAAAAAAAAAAA3AIAAAAAAADdAgAAAAAAAAAAAADdAgAAAAAAAN4CAAAAAAAAAAAAAN4CAAAAAAAA3wIAAAAAAAAAAAAA3wIAAAAAAADgAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wIAAAAAAADbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAOsCAAAAAAAA7AIAAAAAAAAAAAAA7AIAAAAAAADxAgAAAAAAAAAAAADxAgAAAAAAAPICAAAAAAAAAAAAAPICAAAAAAAA9wIAAAAAAAAAAAAA7AIAAAAAAADsAgAAAAAAAAUAAAAgICAgCQ",
					"AQAAAAAAAAABAAAA6wIAAAAAAADrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAPECAAAAAAAA8QIAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAA8gIAAAAAAADyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAPECAAAAAAAA8gIAAAAAAAAAAAAA8gIAAAAAAADzAgAAAAAAAAAAAADzAgAAAAAAAPQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QIAAAAAAADxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " _rep"
					},
					"BQAAAPQCAAAAAAAA9QIAAAAAAAAAAAAA9QIAAAAAAAD2AgAAAAAAAAAAAAD2AgAAAAAAAPcCAAAAAAAAAAAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AIAAAAAAAD0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "r_"
					},
					"AgAAAPkCAAAAAAAA+gIAAAAAAAAAAAAA+gIAAAAAAAD7AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QIAAAAAAAD5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "widfget_"
					},
					"CAAAAPsCAAAAAAAA/AIAAAAAAAAAAAAA/AIAAAAAAAD9AgAAAAAAAAAAAAD9AgAAAAAAAP4CAAAAAAAAAAAAAP4CAAAAAAAA/wIAAAAAAAAAAAAA/wIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAEDAAAAAAAAAAAAAAEDAAAAAAAAAgMAAAAAAAAAAAAAAgMAAAAAAAADAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wIAAAAAAAD7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAMDAAAAAAAABQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwMAAAAAAAADAwAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAACAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAMAAAAAAAAEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "->QWidge"
					},
					"CAAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "t:"
					},
					"AgAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQMAAAAAAAARAwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\npre"
					},
					"BgAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABwDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					3,
					"left_delete",
					null,
					"AwAAABsDAAAAAAAAGwMAAAAAAAABAAAAZRoDAAAAAAAAGgMAAAAAAAABAAAAchkDAAAAAAAAGQMAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAHAMAAAAAAAAcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABwDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQMAAAAAAAAZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "..."
					},
					"BAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADoAgAAAAAAAAQAAABwYXNz6AIAAAAAAADpAgAAAAAAAAAAAADpAgAAAAAAAOoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wIAAAAAAADrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "..."
					},
					"BAAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC8AgAAAAAAAAQAAABwYXNzvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwIAAAAAAAC/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABoDAAAAAAAAGwMAAAAAAAAAAAAAGwMAAAAAAAAgAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgMAAAAAAAAaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"reindent",
					null,
					"AQAAACUIAAAAAAAAJwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "..."
					},
					"BAAAACcIAAAAAAAAKAgAAAAAAAAAAAAAGwMAAAAAAAAbAwAAAAAAAAUAAAAgICAgCSMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwgAAAAAAAAnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\ndef"
					},
					"BAAAACYIAAAAAAAAJwgAAAAAAAAAAAAAJwgAAAAAAAAoCAAAAAAAAAAAAAAoCAAAAAAAACkIAAAAAAAAAAAAACkIAAAAAAAAKggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJggAAAAAAAAmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " display"
					},
					"CAAAACoIAAAAAAAAKwgAAAAAAAAAAAAAKwgAAAAAAAAsCAAAAAAAAAAAAAAsCAAAAAAAAC0IAAAAAAAAAAAAAC0IAAAAAAAALggAAAAAAAAAAAAALggAAAAAAAAvCAAAAAAAAAAAAAAvCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKggAAAAAAAAqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADIIAAAAAAAANAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAADQIAAAAAAAANQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n..."
					},
					"BQAAADUIAAAAAAAANggAAAAAAAAAAAAANggAAAAAAAA3CAAAAAAAAAAAAAA3CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA6CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQgAAAAAAAA1CAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AwAAADoIAAAAAAAAOwgAAAAAAAAAAAAAOwgAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAD0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " get"
					},
					"BAAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA/CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAQQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQgAAAAAAAA9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " current"
					},
					"CAAAAEEIAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABDCAAAAAAAAAAAAABDCAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAARQgAAAAAAAAAAAAARQgAAAAAAABGCAAAAAAAAAAAAABGCAAAAAAAAEcIAAAAAAAAAAAAAEcIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABJCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQgAAAAAAABBCAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " framework"
					},
					"CgAAAEkIAAAAAAAASggAAAAAAAAAAAAASggAAAAAAABLCAAAAAAAAAAAAABLCAAAAAAAAEwIAAAAAAAAAAAAAEwIAAAAAAAATQgAAAAAAAAAAAAATQgAAAAAAABOCAAAAAAAAAAAAABOCAAAAAAAAE8IAAAAAAAAAAAAAE8IAAAAAAAAUAgAAAAAAAAAAAAAUAgAAAAAAABRCAAAAAAAAAAAAABRCAAAAAAAAFIIAAAAAAAAAAAAAFIIAAAAAAAAUwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQgAAAAAAABJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AwAAAFMIAAAAAAAAVAgAAAAAAAAAAAAAVAgAAAAAAABVCAAAAAAAAAAAAABVCAAAAAAAAFYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwgAAAAAAABTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"left_delete",
					null,
					"AQAAAFUIAAAAAAAAVQgAAAAAAAABAAAAIw",
					"AQAAAAAAAAABAAAAVggAAAAAAABWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "window.ins"
					},
					"CgAAAFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAABXCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAWQgAAAAAAAAAAAAAWQgAAAAAAABaCAAAAAAAAAAAAABaCAAAAAAAAFsIAAAAAAAAAAAAAFsIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABdCAAAAAAAAAAAAABdCAAAAAAAAF4IAAAAAAAAAAAAAF4IAAAAAAAAXwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQgAAAAAAABVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "tance"
					},
					"BQAAAF8IAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABhCAAAAAAAAAAAAABhCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAYwgAAAAAAAAAAAAAYwgAAAAAAABkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwgAAAAAAABfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGQIAAAAAAAAZggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAgAAAAAAABkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFsIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABdCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwgAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " Fram"
					},
					"BQAAAF0IAAAAAAAAXggAAAAAAAAAAAAAXggAAAAAAABfCAAAAAAAAAAAAABfCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAYQgAAAAAAAAAAAAAYQgAAAAAAABiCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQgAAAAAAABdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "FrameworkWindow"
					},
					"AgAAAF4IAAAAAAAAXggAAAAAAAAEAAAARnJhbV4IAAAAAAAAbQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYggAAAAAAABiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "\nwindow.di"
					},
					"CwAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAB9CAAAAAAAAH4IAAAAAAAAAAAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIEIAAAAAAAAAAAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAgAAAAAAAB4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAIMIAAAAAAAAhAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwgAAAAAAACDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert_completion",
					{
						"completion": "display",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "display"
					},
					"AgAAAIEIAAAAAAAAgQgAAAAAAAADAAAAZGlzgQgAAAAAAACICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgIAAAAAAAAiggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"AwAAADMIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA1CAAAAAAAAAAAAAA1CAAAAAAAADYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwgAAAAAAAAzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"AwAAAIwIAAAAAAAAjQgAAAAAAAAAAAAAjQgAAAAAAACOCAAAAAAAAAAAAACOCAAAAAAAAI8IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": ":Protocol"
					},
					"CQAAADYIAAAAAAAANwgAAAAAAAAAAAAANwgAAAAAAAA4CAAAAAAAAAAAAAA4CAAAAAAAADkIAAAAAAAAAAAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA7CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAD8IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANggAAAAAAAA2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "Protocol"
					},
					"CQAAAIYCAAAAAAAAhwIAAAAAAAAAAAAAhwIAAAAAAACHAgAAAAAAAAQAAABMaXZlhwIAAAAAAACIAgAAAAAAAAAAAACIAgAAAAAAAIkCAAAAAAAAAAAAAIkCAAAAAAAAigIAAAAAAAAAAAAAigIAAAAAAACLAgAAAAAAAAAAAACLAgAAAAAAAIwCAAAAAAAAAAAAAIwCAAAAAAAAjQIAAAAAAAAAAAAAjQIAAAAAAACOAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"paste",
					null,
					"AgAAADsIAAAAAAAASggAAAAAAAAAAAAASggAAAAAAABKCAAAAAAAAAgAAABQcm90b2NvbA",
					"AQAAAAAAAAABAAAAOwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "LivePere"
					},
					"CQAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA8CAAAAAAAAA8AAABEaXNwbGF5UHJvdG9jb2w8CAAAAAAAAD0IAAAAAAAAAAAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA/CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABCCAAAAAAAAAAAAABCCAAAAAAAAEMIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwgAAAAAAABKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					4,
					"left_delete",
					null,
					"BAAAAEIIAAAAAAAAQggAAAAAAAABAAAAZUEIAAAAAAAAQQgAAAAAAAABAAAAckAIAAAAAAAAQAgAAAAAAAABAAAAZT8IAAAAAAAAPwgAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "Displayable"
					},
					"CwAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAAQwgAAAAAAABECAAAAAAAAAAAAABECAAAAAAAAEUIAAAAAAAAAAAAAEUIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABHCAAAAAAAAAAAAABHCAAAAAAAAEgIAAAAAAAAAAAAAEgIAAAAAAAASQgAAAAAAAAAAAAASQgAAAAAAABKCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"paste",
					null,
					"AgAAAH8CAAAAAAAAjgIAAAAAAAAAAAAAjgIAAAAAAACOAgAAAAAAAA8AAABEaXNwbGF5UHJvdG9jb2w",
					"AQAAAAAAAAABAAAAfwIAAAAAAACOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "SupportLiveD"
					},
					"DQAAADsIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAAA8CAAAAAAAAA8AAABMaXZlRGlzcGxheWFibGU8CAAAAAAAAD0IAAAAAAAAAAAAAD0IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA/CAAAAAAAAAAAAAA/CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABCCAAAAAAAAAAAAABCCAAAAAAAAEMIAAAAAAAAAAAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABFCAAAAAAAAAAAAABFCAAAAAAAAEYIAAAAAAAAAAAAAEYIAAAAAAAARwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwgAAAAAAABKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "isplay"
					},
					"BgAAAEcIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABJCAAAAAAAAAAAAABJCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAASwgAAAAAAAAAAAAASwgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAE0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwgAAAAAAABHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"paste",
					null,
					"AgAAAH8CAAAAAAAAkQIAAAAAAAAAAAAAkQIAAAAAAACRAgAAAAAAAA8AAABMaXZlRGlzcGxheWFibGU",
					"AQAAAAAAAAABAAAAfwIAAAAAAACOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKsIAAAAAAAArAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwgAAAAAAACrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFkDAAAAAAAAWgMAAAAAAAAAAAAAWgMAAAAAAABbAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQMAAAAAAABZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"paste",
					null,
					"AQAAAFsDAAAAAAAAGAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwMAAAAAAABbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					2,
					"left_delete",
					null,
					"AgAAAFoDAAAAAAAAWgMAAAAAAAAeAAAACWNsYXNzIFByZXZpZXdXaWRnZXQoUVdpZGdldCk6WQMAAAAAAABZAwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAeAMAAAAAAABaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"left_delete",
					null,
					"AQAAAHADAAAAAAAAcAMAAAAAAAANAAAAUHJldmlld1dpZGdldA",
					"AQAAAAAAAAABAAAAcAMAAAAAAAB9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAG8DAAAAAAAAbwMAAAAAAAABAAAAJ28DAAAAAAAAbwMAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAcAMAAAAAAABwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": "Self"
					},
					"BAAAAG8DAAAAAAAAcAMAAAAAAAAAAAAAcAMAAAAAAABxAwAAAAAAAAAAAABxAwAAAAAAAHIDAAAAAAAAAAAAAHIDAAAAAAAAcwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwMAAAAAAABvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"left_delete",
					null,
					"AQAAALsDAAAAAAAAuwMAAAAAAAANAAAAUHJldmlld1dpZGdldA",
					"AQAAAAAAAAABAAAAuwMAAAAAAADIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAALoDAAAAAAAAugMAAAAAAAABAAAAJ7oDAAAAAAAAugMAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAuwMAAAAAAAC7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "Self"
					},
					"BAAAALoDAAAAAAAAuwMAAAAAAAAAAAAAuwMAAAAAAAC8AwAAAAAAAAAAAAC8AwAAAAAAAL0DAAAAAAAAAAAAAL0DAAAAAAAAvgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugMAAAAAAAC6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "class"
					},
					"BgAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACbAwAAAAAAAAwAAABzdGF0aWNtZXRob2SbAwAAAAAAAJwDAAAAAAAAAAAAAJwDAAAAAAAAnQMAAAAAAAAAAAAAnQMAAAAAAACeAwAAAAAAAAAAAACeAwAAAAAAAJ8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgMAAAAAAACmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":6,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "classmethod"
					},
					"AgAAAJoDAAAAAAAAmgMAAAAAAAAFAAAAY2xhc3OaAwAAAAAAAKUDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwMAAAAAAACfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"paste",
					null,
					"AgAAABEEAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAgBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAEQQAAAAAAAAeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"paste",
					null,
					"AgAAAGQEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAABzBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAZAQAAAAAAABxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"paste",
					null,
					"AgAAAIAEAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACPBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAgAQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "cls"
					},
					"AwAAALQDAAAAAAAAtQMAAAAAAAAAAAAAtQMAAAAAAAC2AwAAAAAAAAAAAAC2AwAAAAAAALcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAMAAAAAAAC0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"paste",
					null,
					"AgAAABQEAAAAAAAAFwQAAAAAAAAAAAAAFwQAAAAAAAAXBAAAAAAAAA8AAABGcmFtZXdvcmtXaW5kb3c",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"paste",
					null,
					"AgAAAFsEAAAAAAAAXgQAAAAAAAAAAAAAXgQAAAAAAABeBAAAAAAAAA8AAABGcmFtZXdvcmtXaW5kb3c",
					"AQAAAAAAAAABAAAAWwQAAAAAAABqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"paste",
					null,
					"AgAAAGsEAAAAAAAAbgQAAAAAAAAAAAAAbgQAAAAAAABuBAAAAAAAAA8AAABGcmFtZXdvcmtXaW5kb3c",
					"AQAAAAAAAAABAAAAawQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"paste",
					null,
					"AgAAAHcEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB6BAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAdwQAAAAAAACEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"paste",
					null,
					"AgAAAH8EAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACCBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAfwQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"paste",
					null,
					"AgAAAKEEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAACkBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAAoQQAAAAAAACuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"paste",
					null,
					"AgAAAPoDAAAAAAAACQQAAAAAAAAAAAAACQQAAAAAAAAJBAAAAAAAAA0AAABQcmV2aWV3V2lkZ2V0",
					"AQAAAAAAAAABAAAA+gMAAAAAAAAHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKsFAAAAAAAArAUAAAAAAAAAAAAArAUAAAAAAACuBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwUAAAAAAACrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "_setupUI"
					},
					"CgAAALQFAAAAAAAAtQUAAAAAAAAAAAAAtQUAAAAAAAC1BQAAAAAAACQAAABfX2luaXRfXyhzZWxmKToKCQlzdXBlcigpLl9faW5pdF9fKCmsBQAAAAAAAKwFAAAAAAAAAgAAAAkJswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAC3BQAAAAAAALgFAAAAAAAAAAAAALgFAAAAAAAAuQUAAAAAAAAAAAAAuQUAAAAAAAC6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AUAAAAAAAC0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALoFAAAAAAAAvAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugUAAAAAAAC6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAALwFAAAAAAAAvQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAUAAAAAAAC8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAALsFAAAAAAAAvAUAAAAAAAAAAAAAvAUAAAAAAAC9BQAAAAAAAAAAAAC9BQAAAAAAAL4FAAAAAAAAAAAAAL4FAAAAAAAAvwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwUAAAAAAAC7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC0DAAAAAAAALgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"paste",
					null,
					"AQAAAC4DAAAAAAAAVwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgMAAAAAAAAuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFcDAAAAAAAAWAMAAAAAAAAAAAAAWAMAAAAAAABZAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwMAAAAAAABXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC0DAAAAAAAALgMAAAAAAAAAAAAAWQMAAAAAAABZAwAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					2,
					"left_delete",
					null,
					"AgAAAL0KAAAAAAAAvQoAAAAAAAAEAAAACS4uLrwKAAAAAAAAvAoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAwQoAAAAAAAC9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					2,
					"left_delete",
					null,
					"AgAAAAsMAAAAAAAACwwAAAAAAAABAAAAKQoMAAAAAAAACgwAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAADAwAAAAAAAAMDAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": ".instance"
					},
					"CQAAAAoMAAAAAAAACwwAAAAAAAAAAAAACwwAAAAAAAAMDAAAAAAAAAAAAAAMDAAAAAAAAA0MAAAAAAAAAAAAAA0MAAAAAAAADgwAAAAAAAAAAAAADgwAAAAAAAAPDAAAAAAAAAAAAAAPDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAEQwAAAAAAAAAAAAAEQwAAAAAAAASDAAAAAAAAAAAAAASDAAAAAAAABMMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgwAAAAAAAAKDAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABMMAAAAAAAAFQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA7gUAAAAAAADvBQAAAAAAAAAAAADvBQAAAAAAAPAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QUAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"paste",
					null,
					"AQAAAPAFAAAAAAAAEwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AUAAAAAAADwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "super()"
					},
					"CAAAAPAFAAAAAAAA8QUAAAAAAAAAAAAA8QUAAAAAAADxBQAAAAAAAAcAAABRV2lkZ2V08QUAAAAAAADyBQAAAAAAAAAAAADyBQAAAAAAAPMFAAAAAAAAAAAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA9AUAAAAAAAD1BQAAAAAAAAAAAAD1BQAAAAAAAPYFAAAAAAAAAAAAAPYFAAAAAAAA9wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AUAAAAAAAD3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					3,
					"right_delete",
					null,
					"AwAAAAEGAAAAAAAAAQYAAAAAAAAEAAAAc2VsZgEGAAAAAAAAAQYAAAAAAAABAAAALAEGAAAAAAAAAQYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAAQYAAAAAAAAFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "display"
					},
					"CAAAADoJAAAAAAAAOwkAAAAAAAAAAAAAOwkAAAAAAAA7CQAAAAAAAAQAAABsaXZlOwkAAAAAAAA8CQAAAAAAAAAAAAA8CQAAAAAAAD0JAAAAAAAAAAAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgkAAAAAAAA+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"cut",
					null,
					"AQAAALsKAAAAAAAAuwoAAAAAAAB3AAAAZGVmIGRpc3BsYXkob2JqOlN1cHBvcnRMaXZlRGlzcGxheSk6CgkjIGdldCBjdXJyZW50IGZyYW1ld29yawoJd2luZG93ID0gRnJhbWV3b3JrV2luZG93Lmluc3RhbmNlKCkKCXdpbmRvdy5kaXNwbGF5KG9iaik",
					"AQAAAAAAAAABAAAAMgsAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFgDAAAAAAAAWQMAAAAAAAAAAAAAWQMAAAAAAABaAwAAAAAAAAAAAABaAwAAAAAAAFsDAAAAAAAAAAAAAFsDAAAAAAAAXAMAAAAAAAAAAAAAWQMAAAAAAABZAwAAAAAAAAEAAAAJ",
					"AQAAAAAAAAABAAAAWAMAAAAAAABYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"left_delete",
					null,
					"AQAAAFoDAAAAAAAAWgMAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAWwMAAAAAAABbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"paste",
					null,
					"AQAAAFoDAAAAAAAA0QMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgMAAAAAAABaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "displat"
					},
					"CAAAAL0JAAAAAAAAvgkAAAAAAAAAAAAAvgkAAAAAAAC+CQAAAAAAAAQAAABzZWxmvgkAAAAAAAC/CQAAAAAAAAAAAAC/CQAAAAAAAMAJAAAAAAAAAAAAAMAJAAAAAAAAwQkAAAAAAAAAAAAAwQkAAAAAAADCCQAAAAAAAAAAAADCCQAAAAAAAMMJAAAAAAAAAAAAAMMJAAAAAAAAxAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQkAAAAAAADBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"left_delete",
					null,
					"AQAAAMMJAAAAAAAAwwkAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAxAkAAAAAAADECQAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAMMJAAAAAAAAxAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwkAAAAAAADDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BgAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAAzCwAAAAAAAAMAAAAuLi4zCwAAAAAAADQLAAAAAAAAAAAAADQLAAAAAAAANQsAAAAAAAAAAAAANQsAAAAAAAA2CwAAAAAAAAAAAAA2CwAAAAAAADcLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAAyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADcLAAAAAAAAOQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwsAAAAAAAA3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA6CwAAAAAAAAAAAAA6CwAAAAAAADsLAAAAAAAAAAAAADsLAAAAAAAAPAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAsAAAAAAAA4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": "\"\""
					},
					"AgAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA6CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAsAAAAAAAA4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "display:"
					},
					"CAAAADkLAAAAAAAAOgsAAAAAAAAAAAAAOgsAAAAAAAA7CwAAAAAAAAAAAAA7CwAAAAAAADwLAAAAAAAAAAAAADwLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA+CwAAAAAAAAAAAAA+CwAAAAAAAD8LAAAAAAAAAAAAAD8LAAAAAAAAQAsAAAAAAAAAAAAAQAsAAAAAAABBCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQsAAAAAAAA5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEILAAAAAAAAQwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgsAAAAAAABCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMLAAAAAAAARAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwsAAAAAAABDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "\nmatch:"
					},
					"CQAAAC8LAAAAAAAAMAsAAAAAAAAAAAAAMAsAAAAAAAAxCwAAAAAAAAAAAAAxCwAAAAAAADILAAAAAAAAAAAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAA0CwAAAAAAAAAAAAA0CwAAAAAAADULAAAAAAAAAAAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA3CwAAAAAAADgLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwsAAAAAAAAvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"left_delete",
					null,
					"AQAAADcLAAAAAAAANwsAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAOAsAAAAAAAA4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " data:"
					},
					"BgAAADcLAAAAAAAAOAsAAAAAAAAAAAAAOAsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOwsAAAAAAAAAAAAAOwsAAAAAAAA8CwAAAAAAAAAAAAA8CwAAAAAAAD0LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwsAAAAAAAA3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": "\nQWid"
					},
					"BwAAAD0LAAAAAAAAPgsAAAAAAAAAAAAAPgsAAAAAAABACwAAAAAAAAAAAABACwAAAAAAAEELAAAAAAAAAAAAAEELAAAAAAAAQgsAAAAAAAAAAAAAQgsAAAAAAABDCwAAAAAAAAAAAABDCwAAAAAAAEQLAAAAAAAAAAAAAEQLAAAAAAAARQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQsAAAAAAAA9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAAEULAAAAAAAARgsAAAAAAAAAAAAARgsAAAAAAABHCwAAAAAAAAAAAABHCwAAAAAAAEgLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQsAAAAAAABFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEgLAAAAAAAASgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAsAAAAAAABICwAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "case"
					},
					"BAAAAEELAAAAAAAAQgsAAAAAAAAAAAAAQgsAAAAAAABDCwAAAAAAAAAAAABDCwAAAAAAAEQLAAAAAAAAAAAAAEQLAAAAAAAARQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQsAAAAAAABBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEULAAAAAAAARgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQsAAAAAAABFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAE8LAAAAAAAAUAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwsAAAAAAABPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "\npass"
					},
					"BwAAAFALAAAAAAAAUQsAAAAAAAAAAAAAUQsAAAAAAABUCwAAAAAAAAAAAABUCwAAAAAAAFULAAAAAAAAAAAAAFULAAAAAAAAVgsAAAAAAAAAAAAAVgsAAAAAAABXCwAAAAAAAAAAAABXCwAAAAAAAFgLAAAAAAAAAAAAAFgLAAAAAAAAWQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAsAAAAAAABQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFkLAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABeCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQsAAAAAAABZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"left_delete",
					null,
					"AQAAAF0LAAAAAAAAXQsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAXgsAAAAAAABeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "cx"
					},
					"AgAAAF0LAAAAAAAAXgsAAAAAAAAAAAAAXgsAAAAAAABfCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQsAAAAAAABdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAAF4LAAAAAAAAXgsAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAXwsAAAAAAABfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": "ase:"
					},
					"BAAAAF4LAAAAAAAAXwsAAAAAAAAAAAAAXwsAAAAAAABgCwAAAAAAAAAAAABgCwAAAAAAAGELAAAAAAAAAAAAAGELAAAAAAAAYgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgsAAAAAAABeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"left_delete",
					null,
					"AQAAAGELAAAAAAAAYQsAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAYgsAAAAAAABiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " _:"
					},
					"AwAAAGELAAAAAAAAYgsAAAAAAAAAAAAAYgsAAAAAAABjCwAAAAAAAAAAAABjCwAAAAAAAGQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQsAAAAAAABhCwAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGQLAAAAAAAAZQsAAAAAAAAAAAAAZQsAAAAAAABoCwAAAAAAAAAAAABoCwAAAAAAAGkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAsAAAAAAABkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AwAAAGwLAAAAAAAAbQsAAAAAAAAAAAAAZQsAAAAAAABlCwAAAAAAAAQAAAAJCQkJaQsAAAAAAABqCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAsAAAAAAABsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"left_delete",
					null,
					"AQAAAGQLAAAAAAAAZAsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAZQsAAAAAAABlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAN4JAAAAAAAA3wkAAAAAAAAAAAAA3wkAAAAAAADhCQAAAAAAAAAAAADhCQAAAAAAAOIJAAAAAAAAAAAAAOIJAAAAAAAA5AkAAAAAAAAAAAAA3wkAAAAAAADfCQAAAAAAAAIAAAAJCQ",
					"AQAAAAAAAAABAAAA3gkAAAAAAADeCQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": "QWidget"
					},
					"BwAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADkCQAAAAAAAAAAAADkCQAAAAAAAOUJAAAAAAAAAAAAAOUJAAAAAAAA5gkAAAAAAAAAAAAA5gkAAAAAAADnCQAAAAAAAAAAAADnCQAAAAAAAOgJAAAAAAAAAAAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOkJAAAAAAAA6wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QkAAAAAAADpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "preview_area"
					},
					"DAAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADkCQAAAAAAAAAAAADkCQAAAAAAAOUJAAAAAAAAAAAAAOUJAAAAAAAA5gkAAAAAAAAAAAAA5gkAAAAAAADnCQAAAAAAAAAAAADnCQAAAAAAAOgJAAAAAAAAAAAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA6QkAAAAAAADqCQAAAAAAAAAAAADqCQAAAAAAAOsJAAAAAAAAAAAAAOsJAAAAAAAA7AkAAAAAAAAAAAAA7AkAAAAAAADtCQAAAAAAAAAAAADtCQAAAAAAAO4JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA7wkAAAAAAADwCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gkAAAAAAADuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAJAAAAAAAA8QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AkAAAAAAADwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADkCQAAAAAAAAAAAADkCQAAAAAAAOUJAAAAAAAAAAAAAOUJAAAAAAAA5gkAAAAAAAAAAAAA5gkAAAAAAADnCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "\nself.preview"
					},
					"DgAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAAFCgAAAAAAAAYKAAAAAAAAAAAAAAYKAAAAAAAABwoAAAAAAAAAAAAABwoAAAAAAAAICgAAAAAAAAAAAAAICgAAAAAAAAkKAAAAAAAAAAAAAAkKAAAAAAAACgoAAAAAAAAAAAAACgoAAAAAAAALCgAAAAAAAAAAAAALCgAAAAAAAAwKAAAAAAAAAAAAAAwKAAAAAAAADQoAAAAAAAAAAAAADQoAAAAAAAAOCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":4,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "preview_area"
					},
					"AgAAAAcKAAAAAAAABwoAAAAAAAAHAAAAcHJldmlldwcKAAAAAAAAEwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgoAAAAAAAAOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABMKAAAAAAAAFAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "setLayout"
					},
					"CQAAABQKAAAAAAAAFQoAAAAAAAAAAAAAFQoAAAAAAAAWCgAAAAAAAAAAAAAWCgAAAAAAABcKAAAAAAAAAAAAABcKAAAAAAAAGAoAAAAAAAAAAAAAGAoAAAAAAAAZCgAAAAAAAAAAAAAZCgAAAAAAABoKAAAAAAAAAAAAABoKAAAAAAAAGwoAAAAAAAAAAAAAGwoAAAAAAAAcCgAAAAAAAAAAAAAcCgAAAAAAAB0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAoAAAAAAAAUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB0KAAAAAAAAHwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQoAAAAAAAAdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "QVBoxLayout"
					},
					"CwAAAB4KAAAAAAAAHwoAAAAAAAAAAAAAHwoAAAAAAAAgCgAAAAAAAAAAAAAgCgAAAAAAACEKAAAAAAAAAAAAACEKAAAAAAAAIgoAAAAAAAAAAAAAIgoAAAAAAAAjCgAAAAAAAAAAAAAjCgAAAAAAACQKAAAAAAAAAAAAACQKAAAAAAAAJQoAAAAAAAAAAAAAJQoAAAAAAAAmCgAAAAAAAAAAAAAmCgAAAAAAACcKAAAAAAAAAAAAACcKAAAAAAAAKAoAAAAAAAAAAAAAKAoAAAAAAAApCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACkKAAAAAAAAKwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQoAAAAAAAApCgAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "self.p"
					},
					"BwAAAKMLAAAAAAAApAsAAAAAAAAAAAAApAsAAAAAAACkCwAAAAAAAAQAAABwYXNzpAsAAAAAAAClCwAAAAAAAAAAAAClCwAAAAAAAKYLAAAAAAAAAAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowsAAAAAAACnCwAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAKkLAAAAAAAAqgsAAAAAAAAAAAAAqgsAAAAAAACrCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQsAAAAAAACpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "preview_area"
					},
					"AgAAAKgLAAAAAAAAqAsAAAAAAAADAAAAcHJlqAsAAAAAAAC0CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwsAAAAAAACrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": ".layout"
					},
					"BwAAALQLAAAAAAAAtQsAAAAAAAAAAAAAtQsAAAAAAAC2CwAAAAAAAAAAAAC2CwAAAAAAALcLAAAAAAAAAAAAALcLAAAAAAAAuAsAAAAAAAAAAAAAuAsAAAAAAAC5CwAAAAAAAAAAAAC5CwAAAAAAALoLAAAAAAAAAAAAALoLAAAAAAAAuwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAsAAAAAAAC0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALsLAAAAAAAAvQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwsAAAAAAAC7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": ".addW"
					},
					"BQAAAL0LAAAAAAAAvgsAAAAAAAAAAAAAvgsAAAAAAAC/CwAAAAAAAAAAAAC/CwAAAAAAAMALAAAAAAAAAAAAAMALAAAAAAAAwQsAAAAAAAAAAAAAwQsAAAAAAADCCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQsAAAAAAAC9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "addWidget"
					},
					"AgAAAL4LAAAAAAAAvgsAAAAAAAAEAAAAYWRkV74LAAAAAAAAxwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgsAAAAAAADCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwsAAAAAAADHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAAMgLAAAAAAAAyQsAAAAAAAAAAAAAyQsAAAAAAADKCwAAAAAAAAAAAADKCwAAAAAAAMsLAAAAAAAAAAAAAMsLAAAAAAAAzAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAsAAAAAAADICwAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "\nwidget"
					},
					"CQAAAJ4LAAAAAAAAnwsAAAAAAAAAAAAAnwsAAAAAAACiCwAAAAAAAAAAAACiCwAAAAAAAKMLAAAAAAAAAAAAAKMLAAAAAAAApAsAAAAAAAAAAAAApAsAAAAAAAClCwAAAAAAAAAAAAClCwAAAAAAAKYLAAAAAAAAAAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngsAAAAAAACeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKkLAAAAAAAAqgsAAAAAAAAAAAAAqgsAAAAAAACrCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQsAAAAAAACpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": " cast"
					},
					"BQAAAKsLAAAAAAAArAsAAAAAAAAAAAAArAsAAAAAAACtCwAAAAAAAAAAAACtCwAAAAAAAK4LAAAAAAAAAAAAAK4LAAAAAAAArwsAAAAAAAAAAAAArwsAAAAAAACwCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwsAAAAAAACrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALALAAAAAAAAsgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAsAAAAAAACwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "QWidget,"
					},
					"CAAAALELAAAAAAAAsgsAAAAAAAAAAAAAsgsAAAAAAACzCwAAAAAAAAAAAACzCwAAAAAAALQLAAAAAAAAAAAAALQLAAAAAAAAtQsAAAAAAAAAAAAAtQsAAAAAAAC2CwAAAAAAAAAAAAC2CwAAAAAAALcLAAAAAAAAAAAAALcLAAAAAAAAuAsAAAAAAAAAAAAAuAsAAAAAAAC5CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQsAAAAAAACxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAALkLAAAAAAAAugsAAAAAAAAAAAAAugsAAAAAAAC7CwAAAAAAAAAAAAC7CwAAAAAAALwLAAAAAAAAAAAAALwLAAAAAAAAvQsAAAAAAAAAAAAAvQsAAAAAAAC+CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQsAAAAAAAC5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": "widget"
					},
					"BwAAAOkLAAAAAAAA6gsAAAAAAAAAAAAA6gsAAAAAAADqCwAAAAAAAAQAAABkYXRh6gsAAAAAAADrCwAAAAAAAAAAAADrCwAAAAAAAOwLAAAAAAAAAAAAAOwLAAAAAAAA7QsAAAAAAAAAAAAA7QsAAAAAAADuCwAAAAAAAAAAAADuCwAAAAAAAO8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QsAAAAAAADtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "\nQLabel"
					},
					"CQAAAPsLAAAAAAAA/AsAAAAAAAAAAAAA/AsAAAAAAAD/CwAAAAAAAAAAAAD/CwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAAFDAAAAAAAAAYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wsAAAAAAAD7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAYMAAAAAAAACAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgwAAAAAAAAGDAAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"insert",
					{
						"characters": "label"
					},
					"BQAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					5,
					"left_delete",
					null,
					"BQAAAAQMAAAAAAAABAwAAAAAAAABAAAAbAMMAAAAAAAAAwwAAAAAAAABAAAAZQIMAAAAAAAAAgwAAAAAAAABAAAAYgEMAAAAAAAAAQwAAAAAAAABAAAAYQAMAAAAAAAAAAwAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAABQwAAAAAAAAFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": "msg_la"
					},
					"BgAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAAFDAAAAAAAAAYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "bel"
					},
					"AwAAAAYMAAAAAAAABwwAAAAAAAAAAAAABwwAAAAAAAAIDAAAAAAAAAAAAAAIDAAAAAAAAAkMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgwAAAAAAAAGDAAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAkMAAAAAAAACgwAAAAAAAAAAAAACgwAAAAAAAALDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQwAAAAAAAAJDAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsMAAAAAAAADAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwwAAAAAAAALDAAAAAAAAAAAAAAAAPC/"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAABMMAAAAAAAAFAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAPC/"
				],
				[
					560,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABQMAAAAAAAAFgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAwAAAAAAAAUDAAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABUMAAAAAAAAFwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQwAAAAAAAAVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABkMAAAAAAAAAAAAABkMAAAAAAAAGgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB0MAAAAAAAAHgwAAAAAAAAAAAAAHgwAAAAAAAAiDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQwAAAAAAAAdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"paste",
					null,
					"AgAAACIMAAAAAAAATgwAAAAAAAAAAAAATgwAAAAAAABODAAAAAAAABwAAAAKCQkJCXByaW50KCJkaXNwbGF5OiIsIGRhdGEp",
					"AQAAAAAAAAABAAAAPgwAAAAAAAAiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"paste",
					null,
					"AgAAAEcMAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABQDAAAAAAAAAYAAAB3aWRnZXQ",
					"AQAAAAAAAAABAAAARwwAAAAAAABNDAAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"CAAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB/CwAAAAAAAAAAAAB/CwAAAAAAAIALAAAAAAAAAAAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACCCwAAAAAAAAAAAACCCwAAAAAAAIMLAAAAAAAAAAAAAIMLAAAAAAAAhAsAAAAAAAAAAAAAhAsAAAAAAACFCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIULAAAAAAAAhwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQsAAAAAAACFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAIYLAAAAAAAAiAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgsAAAAAAACGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": "disdpla"
					},
					"BwAAAIcLAAAAAAAAiAsAAAAAAAAAAAAAiAsAAAAAAACJCwAAAAAAAAAAAACJCwAAAAAAAIoLAAAAAAAAAAAAAIoLAAAAAAAAiwsAAAAAAAAAAAAAiwsAAAAAAACMCwAAAAAAAAAAAACMCwAAAAAAAI0LAAAAAAAAAAAAAI0LAAAAAAAAjgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwsAAAAAAACHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					4,
					"left_delete",
					null,
					"BAAAAI0LAAAAAAAAjQsAAAAAAAABAAAAYYwLAAAAAAAAjAsAAAAAAAABAAAAbIsLAAAAAAAAiwsAAAAAAAABAAAAcIoLAAAAAAAAigsAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAjgsAAAAAAACOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": "play"
					},
					"BAAAAIoLAAAAAAAAiwsAAAAAAAAAAAAAiwsAAAAAAACMCwAAAAAAAAAAAACMCwAAAAAAAI0LAAAAAAAAAAAAAI0LAAAAAAAAjgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigsAAAAAAACKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI8LAAAAAAAAkAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwsAAAAAAACPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAJALAAAAAAAAkQsAAAAAAAAAAAAAkQsAAAAAAACSCwAAAAAAAAAAAACSCwAAAAAAAJMLAAAAAAAAAAAAAJMLAAAAAAAAlAsAAAAAAAAAAAAAlAsAAAAAAACVCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAsAAAAAAACQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": "\nself.set"
					},
					"CgAAACwKAAAAAAAALQoAAAAAAAAAAAAALQoAAAAAAAAvCgAAAAAAAAAAAAAvCgAAAAAAADAKAAAAAAAAAAAAADAKAAAAAAAAMQoAAAAAAAAAAAAAMQoAAAAAAAAyCgAAAAAAAAAAAAAyCgAAAAAAADMKAAAAAAAAAAAAADMKAAAAAAAANAoAAAAAAAAAAAAANAoAAAAAAAA1CgAAAAAAAAAAAAA1CgAAAAAAADYKAAAAAAAAAAAAADYKAAAAAAAANwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAoAAAAAAAAsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": "Pre"
					},
					"AwAAADcKAAAAAAAAOAoAAAAAAAAAAAAAOAoAAAAAAAA5CgAAAAAAAAAAAAA5CgAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwoAAAAAAAA3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":2,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setPreview"
					},
					"AgAAADQKAAAAAAAANAoAAAAAAAAGAAAAc2V0UHJlNAoAAAAAAAA+CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgoAAAAAAAA6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD4KAAAAAAAAQAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgoAAAAAAAA+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "self.pre"
					},
					"CAAAAD8KAAAAAAAAQAoAAAAAAAAAAAAAQAoAAAAAAABBCgAAAAAAAAAAAABBCgAAAAAAAEIKAAAAAAAAAAAAAEIKAAAAAAAAQwoAAAAAAAAAAAAAQwoAAAAAAABECgAAAAAAAAAAAABECgAAAAAAAEUKAAAAAAAAAAAAAEUKAAAAAAAARgoAAAAAAAAAAAAARgoAAAAAAABHCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwoAAAAAAAA/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "preview_area"
					},
					"AgAAAEQKAAAAAAAARAoAAAAAAAADAAAAcHJlRAoAAAAAAABQCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwoAAAAAAABHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					619,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC0JAAAAAAAALgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQkAAAAAAAAtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": " cell_idx"
					},
					"CQAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAADQJAAAAAAAANQkAAAAAAAAAAAAANQkAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADcJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": "idx"
					},
					"BAAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAwCQAAAAAAAAgAAABjZWxsX2lkeDAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANAKAAAAAAAA0QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AoAAAAAAADQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"insert",
					{
						"characters": " cell:int"
					},
					"CQAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADTCgAAAAAAAAAAAADTCgAAAAAAANQKAAAAAAAAAAAAANQKAAAAAAAA1QoAAAAAAAAAAAAA1QoAAAAAAADWCgAAAAAAAAAAAADWCgAAAAAAANcKAAAAAAAAAAAAANcKAAAAAAAA2AoAAAAAAAAAAAAA2AoAAAAAAADZCgAAAAAAAAAAAADZCgAAAAAAANoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QoAAAAAAADRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": ":str"
					},
					"BAAAANAKAAAAAAAA0QoAAAAAAAAAAAAA0QoAAAAAAADSCgAAAAAAAAAAAADSCgAAAAAAANMKAAAAAAAAAAAAANMKAAAAAAAA1AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AoAAAAAAADQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "\nself.cell"
					},
					"CwAAAFYKAAAAAAAAVwoAAAAAAAAAAAAAVwoAAAAAAABZCgAAAAAAAAAAAABZCgAAAAAAAFoKAAAAAAAAAAAAAFoKAAAAAAAAWwoAAAAAAAAAAAAAWwoAAAAAAABcCgAAAAAAAAAAAABcCgAAAAAAAF0KAAAAAAAAAAAAAF0KAAAAAAAAXgoAAAAAAAAAAAAAXgoAAAAAAABfCgAAAAAAAAAAAABfCgAAAAAAAGAKAAAAAAAAAAAAAGAKAAAAAAAAYQoAAAAAAAAAAAAAYQoAAAAAAABiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgoAAAAAAABWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": "_previews"
					},
					"CQAAAGIKAAAAAAAAYwoAAAAAAAAAAAAAYwoAAAAAAABkCgAAAAAAAAAAAABkCgAAAAAAAGUKAAAAAAAAAAAAAGUKAAAAAAAAZgoAAAAAAAAAAAAAZgoAAAAAAABnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAAaQoAAAAAAABqCgAAAAAAAAAAAABqCgAAAAAAAGsKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgoAAAAAAABiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGsKAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABtCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawoAAAAAAABrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG0KAAAAAAAAbgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQoAAAAAAABtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG4KAAAAAAAAcAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgoAAAAAAABuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": "\ns"
					},
					"BAAAAPoKAAAAAAAA+woAAAAAAAAAAAAA+woAAAAAAAD8CgAAAAAAAAAAAAD8CgAAAAAAAP0KAAAAAAAAAAAAAP0KAAAAAAAA/goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+goAAAAAAAD6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "elf._cu"
					},
					"BwAAAP4KAAAAAAAA/woAAAAAAAAAAAAA/woAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAELAAAAAAAAAAAAAAELAAAAAAAAAgsAAAAAAAAAAAAAAgsAAAAAAAADCwAAAAAAAAAAAAADCwAAAAAAAAQLAAAAAAAAAAAAAAQLAAAAAAAABQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/goAAAAAAAD+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": "rrent_cell"
					},
					"CgAAAAULAAAAAAAABgsAAAAAAAAAAAAABgsAAAAAAAAHCwAAAAAAAAAAAAAHCwAAAAAAAAgLAAAAAAAAAAAAAAgLAAAAAAAACQsAAAAAAAAAAAAACQsAAAAAAAAKCwAAAAAAAAAAAAAKCwAAAAAAAAsLAAAAAAAAAAAAAAsLAAAAAAAADAsAAAAAAAAAAAAADAsAAAAAAAANCwAAAAAAAAAAAAANCwAAAAAAAA4LAAAAAAAAAAAAAA4LAAAAAAAADwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQsAAAAAAAAFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAA8LAAAAAAAAEAsAAAAAAAAAAAAAEAsAAAAAAAARCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": " cell"
					},
					"BQAAABELAAAAAAAAEgsAAAAAAAAAAAAAEgsAAAAAAAATCwAAAAAAAAAAAAATCwAAAAAAABQLAAAAAAAAAAAAABQLAAAAAAAAFQsAAAAAAAAAAAAAFQsAAAAAAAAWCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQsAAAAAAAARCwAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMoKAAAAAAAAywoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygoAAAAAAADKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					1,
					"reindent",
					null,
					"AQAAAMsKAAAAAAAAzQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywoAAAAAAADLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"left_delete",
					null,
					"AQAAAMwKAAAAAAAAzAoAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAzQoAAAAAAADNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert",
					{
						"characters": "def"
					},
					"AwAAAMwKAAAAAAAAzQoAAAAAAAAAAAAAzQoAAAAAAADOCgAAAAAAAAAAAADOCgAAAAAAAM8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAoAAAAAAADMCgAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": " execute_"
					},
					"CQAAAM8KAAAAAAAA0AoAAAAAAAAAAAAA0AoAAAAAAADRCgAAAAAAAAAAAADRCgAAAAAAANIKAAAAAAAAAAAAANIKAAAAAAAA0woAAAAAAAAAAAAA0woAAAAAAADUCgAAAAAAAAAAAADUCgAAAAAAANUKAAAAAAAAAAAAANUKAAAAAAAA1goAAAAAAAAAAAAA1goAAAAAAADXCgAAAAAAAAAAAADXCgAAAAAAANgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwoAAAAAAADPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					1,
					"insert",
					{
						"characters": "cells"
					},
					"BQAAANgKAAAAAAAA2QoAAAAAAAAAAAAA2QoAAAAAAADaCgAAAAAAAAAAAADaCgAAAAAAANsKAAAAAAAAAAAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADdCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AoAAAAAAADYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN0KAAAAAAAA3woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QoAAAAAAADdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"insert",
					{
						"characters": "self,"
					},
					"BQAAAN4KAAAAAAAA3woAAAAAAAAAAAAA3woAAAAAAADgCgAAAAAAAAAAAADgCgAAAAAAAOEKAAAAAAAAAAAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3goAAAAAAADeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": " indexes:"
					},
					"CQAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA5AoAAAAAAADlCgAAAAAAAAAAAADlCgAAAAAAAOYKAAAAAAAAAAAAAOYKAAAAAAAA5woAAAAAAAAAAAAA5woAAAAAAADoCgAAAAAAAAAAAADoCgAAAAAAAOkKAAAAAAAAAAAAAOkKAAAAAAAA6goAAAAAAAAAAAAA6goAAAAAAADrCgAAAAAAAAAAAADrCgAAAAAAAOwKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4woAAAAAAADjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BAAAAOwKAAAAAAAA7QoAAAAAAAAAAAAA7QoAAAAAAADuCgAAAAAAAAAAAADuCgAAAAAAAO8KAAAAAAAAAAAAAO8KAAAAAAAA8AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AoAAAAAAADsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPAKAAAAAAAA8goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AoAAAAAAADwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					667,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAPEKAAAAAAAA8goAAAAAAAAAAAAA8goAAAAAAADzCgAAAAAAAAAAAADzCgAAAAAAAPQKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QoAAAAAAADxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					669,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPYKAAAAAAAA9woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9goAAAAAAAD2CgAAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPcKAAAAAAAA+AoAAAAAAAAAAAAA+AoAAAAAAAD5CgAAAAAAAAAAAAD5CgAAAAAAAPoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9woAAAAAAAD3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"left_delete",
					null,
					"AgAAAPsKAAAAAAAA+woAAAAAAAAvAAAACWRlZiBfZXhlY3V0ZV9jb2RlKHNlbGYsIHNvdXJjZTpzdHIsIGNlbGw6aW50KTr4CgAAAAAAAPgKAAAAAAAAAgAAAAkJ",
					"AQAAAAAAAAABAAAAKgsAAAAAAAD7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"reindent",
					null,
					"AQAAAPkKAAAAAAAA+woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QoAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"reindent",
					null,
					"AQAAAPgKAAAAAAAA+goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AoAAAAAAAD4CgAAAAAAAAAAAAAAgEpA"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": "for"
					},
					"BAAAAPoKAAAAAAAA+woAAAAAAAAAAAAA/AoAAAAAAAD8CgAAAAAAAAIAAAAJCfsKAAAAAAAA/AoAAAAAAAAAAAAA/AoAAAAAAAD9CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+goAAAAAAAD6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": " cell"
					},
					"BQAAAP0KAAAAAAAA/goAAAAAAAAAAAAA/goAAAAAAAD/CgAAAAAAAAAAAAD/CgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAQsAAAAAAAAAAAAAAQsAAAAAAAACCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QoAAAAAAAD9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAAILAAAAAAAAAwsAAAAAAAAAAAAAAwsAAAAAAAAECwAAAAAAAAAAAAAECwAAAAAAAAULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgsAAAAAAAACCwAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": " indexes"
					},
					"CAAAAAULAAAAAAAABgsAAAAAAAAAAAAABgsAAAAAAAAHCwAAAAAAAAAAAAAHCwAAAAAAAAgLAAAAAAAAAAAAAAgLAAAAAAAACQsAAAAAAAAAAAAACQsAAAAAAAAKCwAAAAAAAAAAAAAKCwAAAAAAAAsLAAAAAAAAAAAAAAsLAAAAAAAADAsAAAAAAAAAAAAADAsAAAAAAAANCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQsAAAAAAAAFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAA0LAAAAAAAADgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQsAAAAAAAANCwAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAA4LAAAAAAAADwsAAAAAAAAAAAAADwsAAAAAAAARCwAAAAAAAAAAAAARCwAAAAAAABILAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"indent",
					null,
					"CAAAABQLAAAAAAAAFQsAAAAAAAAAAAAAMQsAAAAAAAAyCwAAAAAAAAAAAABWCwAAAAAAAFcLAAAAAAAAAAAAAIQLAAAAAAAAhQsAAAAAAAAAAAAAmQsAAAAAAACaCwAAAAAAAAAAAACvCwAAAAAAALALAAAAAAAAAAAAAMwLAAAAAAAAzQsAAAAAAAAAAAAA0AsAAAAAAADRCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QsAAAAAAAAUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"cut",
					null,
					"AQAAAM8HAAAAAAAAzwcAAAAAAABlAQAACQkJCWxvZ2dlci5pbmZvKGYiZXhlY3V0ZV9jZWxsOiB7aWR4fSIpCgkJCQljZWxsX2xpbmVfb2Zmc2V0ID0gMAoJCQkJZm9yIGkgaW4gcmFuZ2UoaWR4KToKCQkJCQljZWxsX3NvdXJjZSA9IHNlbGYuZWRpdG9yKCkuY2VsbChpZHgpCgkJCQkJbGluZV9jb3VudCA9IGxlbihjZWxsX3NvdXJjZS5zcGxpdCgiXG4iKSkJCQkJCQoJCQkJCWNlbGxfbGluZV9vZmZzZXQrPWxpbmVfY291bnQKCQkJCWNlbGxfc291cmNlID0gc2VsZi5lZGl0b3IoKS5jZWxsKGlkeCkKCQkJCWNlbGxfc291cmNlID0gIlxuIipjZWxsX2xpbmVfb2Zmc2V0ICsgY2VsbF9zb3VyY2UKCQkJCXNlbGYuX2V4ZWN1dGVfY29kZSggY2VsbF9zb3VyY2UsIGlkeCAp",
					"AQAAAAAAAAABAAAANAkAAAAAAADPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAJkHAAAAAAAAmwcAAAAAAAAAAAAArAkAAAAAAACsCQAAAAAAAAMAAAAJCQk",
					"AQAAAAAAAAABAAAAmQcAAAAAAACZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": "sel"
					},
					"AwAAAJoHAAAAAAAAmwcAAAAAAAAAAAAAmwcAAAAAAACcBwAAAAAAAAAAAACcBwAAAAAAAJ0HAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgcAAAAAAACaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					699,
					3,
					"left_delete",
					null,
					"AwAAAJwHAAAAAAAAnAcAAAAAAAABAAAAbJsHAAAAAAAAmwcAAAAAAAABAAAAZZoHAAAAAAAAmgcAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAnQcAAAAAAACdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"insert",
					{
						"characters": "lambda"
					},
					"BgAAAJoHAAAAAAAAmwcAAAAAAAAAAAAAmwcAAAAAAACcBwAAAAAAAAAAAACcBwAAAAAAAJ0HAAAAAAAAAAAAAJ0HAAAAAAAAngcAAAAAAAAAAAAAngcAAAAAAACfBwAAAAAAAAAAAACfBwAAAAAAAKAHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgcAAAAAAACaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": " indexes:"
					},
					"CQAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAKMHAAAAAAAApAcAAAAAAAAAAAAApAcAAAAAAAClBwAAAAAAAAAAAAClBwAAAAAAAKYHAAAAAAAAAAAAAKYHAAAAAAAApwcAAAAAAAAAAAAApwcAAAAAAACoBwAAAAAAAAAAAACoBwAAAAAAAKkHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAcAAAAAAACgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					702,
					1,
					"insert",
					{
						"characters": " self.exe"
					},
					"CQAAAKkHAAAAAAAAqgcAAAAAAAAAAAAAqgcAAAAAAACrBwAAAAAAAAAAAACrBwAAAAAAAKwHAAAAAAAAAAAAAKwHAAAAAAAArQcAAAAAAAAAAAAArQcAAAAAAACuBwAAAAAAAAAAAACuBwAAAAAAAK8HAAAAAAAAAAAAAK8HAAAAAAAAsAcAAAAAAAAAAAAAsAcAAAAAAACxBwAAAAAAAAAAAACxBwAAAAAAALIHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQcAAAAAAACpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					703,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":6,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "execute_cells"
					},
					"AgAAAK8HAAAAAAAArwcAAAAAAAADAAAAZXhlrwcAAAAAAAC8BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgcAAAAAAACyBwAAAAAAAAAAAAAAAPC/"
				],
				[
					704,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALwHAAAAAAAAvgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAcAAAAAAAC8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					705,
					1,
					"insert",
					{
						"characters": "indexes"
					},
					"BwAAAL0HAAAAAAAAvgcAAAAAAAAAAAAAvgcAAAAAAAC/BwAAAAAAAAAAAAC/BwAAAAAAAMAHAAAAAAAAAAAAAMAHAAAAAAAAwQcAAAAAAAAAAAAAwQcAAAAAAADCBwAAAAAAAAAAAADCBwAAAAAAAMMHAAAAAAAAAAAAAMMHAAAAAAAAxAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQcAAAAAAAC9BwAAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					1,
					"left_delete",
					null,
					"AQAAAMcHAAAAAAAAxwcAAAAAAAA0AAAACQlkZWYgZXhlY3V0ZV9jZWxscyhpbmRleGVzKToKCQkJZm9yIGlkeCBpbiBpbmRleGVzOg",
					"AQAAAAAAAAABAAAA+wcAAAAAAADHBwAAAAAAAAAAAAAAAPC/"
				],
				[
					711,
					1,
					"left_delete",
					null,
					"AQAAAHcHAAAAAAAAdwcAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAeAcAAAAAAAB4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					716,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAKkHAAAAAAAAqgcAAAAAAAAAAAAAqgcAAAAAAACsBwAAAAAAAAAAAACqBwAAAAAAAKoHAAAAAAAAAgAAAAkJqgcAAAAAAACtBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQcAAAAAAACpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					1,
					"left_delete",
					null,
					"AQAAAHYHAAAAAAAAdgcAAAAAAAABAAAAQA",
					"AQAAAAAAAAABAAAAdwcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					722,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHYHAAAAAAAAdwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgcAAAAAAAB2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					725,
					2,
					"left_delete",
					null,
					"AgAAAMsHAAAAAAAAywcAAAAAAAABAAAACsoHAAAAAAAAygcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzAcAAAAAAADMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					1,
					"paste",
					null,
					"AQAAAKQJAAAAAAAACQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAkAAAAAAACkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					731,
					1,
					"unindent",
					null,
					"CQAAAKQJAAAAAAAApAkAAAAAAAABAAAACcsJAAAAAAAAywkAAAAAAAABAAAACeMJAAAAAAAA4wkAAAAAAAABAAAACfsJAAAAAAAA+wkAAAAAAAABAAAACSUKAAAAAAAAJQoAAAAAAAABAAAACVgKAAAAAAAAWAoAAAAAAAABAAAACXkKAAAAAAAAeQoAAAAAAAABAAAACaIKAAAAAAAAogoAAAAAAAABAAAACdcKAAAAAAAA1woAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAACQsAAAAAAACkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"left_delete",
					null,
					"AQAAANcKAAAAAAAA1woAAAAAAAApAAAACQkJc2VsZi5fZXhlY3V0ZV9jb2RlKCBjZWxsX3NvdXJjZSwgaWR4ICk",
					"AQAAAAAAAAABAAAAAAsAAAAAAADXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					738,
					3,
					"left_delete",
					null,
					"AwAAANkKAAAAAAAA2QoAAAAAAAAcAAAACQkJc2VsZi5fY3VycmVudF9jZWxsID0gY2VsbNgKAAAAAAAA2AoAAAAAAAABAAAACtcKAAAAAAAA1woAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA9QoAAAAAAADZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					752,
					1,
					"paste",
					null,
					"AgAAAEYLAAAAAAAAUQsAAAAAAAAAAAAAUQsAAAAAAABRCwAAAAAAAAYAAABzb3VyY2U",
					"AQAAAAAAAAABAAAARgsAAAAAAABMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"paste",
					null,
					"AgAAAHALAAAAAAAAewsAAAAAAAAAAAAAewsAAAAAAAB7CwAAAAAAAAYAAABzb3VyY2U",
					"AQAAAAAAAAABAAAAcAsAAAAAAAB2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"paste",
					null,
					"AgAAAMQJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADICQAAAAAAAAMAAABpZHg",
					"AQAAAAAAAAABAAAAxAkAAAAAAADHCQAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"paste",
					null,
					"AgAAAPYJAAAAAAAA+gkAAAAAAAAAAAAA+gkAAAAAAAD6CQAAAAAAAAMAAABpZHg",
					"AQAAAAAAAAABAAAA9gkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"paste",
					null,
					"AgAAACIKAAAAAAAAJgoAAAAAAAAAAAAAJgoAAAAAAAAmCgAAAAAAAAMAAABpZHg",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAlCgAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"paste",
					null,
					"AgAAAKAKAAAAAAAApAoAAAAAAAAAAAAApAoAAAAAAACkCgAAAAAAAAMAAABpZHg",
					"AQAAAAAAAAABAAAAoAoAAAAAAACjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					789,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMsJAAAAAAAAzAkAAAAAAAAAAAAAzAkAAAAAAADPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywkAAAAAAADLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": ":Dict"
					},
					"BgAAAAAJAAAAAAAAAQkAAAAAAAAAAAAAzQkAAAAAAADNCQAAAAAAAAMAAAAJCQkBCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAAAwkAAAAAAAAECQAAAAAAAAAAAAAECQAAAAAAAAUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAUJAAAAAAAABwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAAYJAAAAAAAABwkAAAAAAAAAAAAABwkAAAAAAAAICQAAAAAAAAAAAAAICQAAAAAAAAkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgkAAAAAAAAGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAkJAAAAAAAACgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQkAAAAAAAAJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": " QWidget"
					},
					"CAAAAAoJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAAMCQAAAAAAAAAAAAAMCQAAAAAAAA0JAAAAAAAAAAAAAA0JAAAAAAAADgkAAAAAAAAAAAAADgkAAAAAAAAPCQAAAAAAAAAAAAAPCQAAAAAAABAJAAAAAAAAAAAAABAJAAAAAAAAEQkAAAAAAAAAAAAAEQkAAAAAAAASCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgkAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					1,
					"insert",
					{
						"characters": "QLa"
					},
					"BAAAAAsJAAAAAAAADAkAAAAAAAAAAAAADAkAAAAAAAAMCQAAAAAAAAcAAABRV2lkZ2V0DAkAAAAAAAANCQAAAAAAAAAAAAANCQAAAAAAAA4JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwkAAAAAAAASCQAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					3,
					"left_delete",
					null,
					"AwAAAA0JAAAAAAAADQkAAAAAAAABAAAAYQwJAAAAAAAADAkAAAAAAAABAAAATAsJAAAAAAAACwkAAAAAAAABAAAAUQ",
					"AQAAAAAAAAABAAAADgkAAAAAAAAOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "VB"
					},
					"AgAAAAsJAAAAAAAADAkAAAAAAAAAAAAADAkAAAAAAAANCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwkAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					806,
					2,
					"left_delete",
					null,
					"AgAAAAwJAAAAAAAADAkAAAAAAAABAAAAQgsJAAAAAAAACwkAAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAADQkAAAAAAAANCQAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": "QVBox"
					},
					"BQAAAAsJAAAAAAAADAkAAAAAAAAAAAAADAkAAAAAAAANCQAAAAAAAAAAAAANCQAAAAAAAA4JAAAAAAAAAAAAAA4JAAAAAAAADwkAAAAAAAAAAAAADwkAAAAAAAAQCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwkAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAABAJAAAAAAAAEQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAkAAAAAAAAQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "QVBoxLayout"
					},
					"AgAAAAsJAAAAAAAACwkAAAAAAAAGAAAAUVZCb3hMCwkAAAAAAAAWCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQkAAAAAAAARCQAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					1,
					"insert",
					{
						"characters": "\nself"
					},
					"BgAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADmCQAAAAAAAAAAAADmCQAAAAAAAOcJAAAAAAAAAAAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA6AkAAAAAAADpCQAAAAAAAAAAAADpCQAAAAAAAOoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					815,
					1,
					"insert",
					{
						"characters": ".cell"
					},
					"BQAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADsCQAAAAAAAAAAAADsCQAAAAAAAO0JAAAAAAAAAAAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gkAAAAAAADqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_previews"
					},
					"AgAAAOsJAAAAAAAA6wkAAAAAAAAEAAAAY2VsbOsJAAAAAAAA+AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wkAAAAAAADvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPgJAAAAAAAA+gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AkAAAAAAAD4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BAAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA+gkAAAAAAAD7CQAAAAAAAAAAAAD7CQAAAAAAAPwJAAAAAAAAAAAAAPwJAAAAAAAA/QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA4wkAAAAAAADmCQAAAAAAAAAAAADmCQAAAAAAAOcJAAAAAAAAAAAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AkAAAAAAADoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": ".get"
					},
					"BQAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACgAAAAAAAAYAAABbY2VsbF0ACgAAAAAAAAEKAAAAAAAAAAAAAAEKAAAAAAAAAgoAAAAAAAAAAAAAAgoAAAAAAAADCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQoAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAMKAAAAAAAABQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwoAAAAAAAADCgAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BAAAAAQKAAAAAAAABQoAAAAAAAAAAAAABQoAAAAAAAAGCgAAAAAAAAAAAAAGCgAAAAAAAAcKAAAAAAAAAAAAAAcKAAAAAAAACAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAoAAAAAAAAECgAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAgKAAAAAAAACQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAoAAAAAAAAICgAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"insert",
					{
						"characters": " None"
					},
					"BQAAAAkKAAAAAAAACgoAAAAAAAAAAAAACgoAAAAAAAALCgAAAAAAAAAAAAALCgAAAAAAAAwKAAAAAAAAAAAAAAwKAAAAAAAADQoAAAAAAAAAAAAADQoAAAAAAAAOCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQoAAAAAAAAJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"insert",
					{
						"characters": "not"
					},
					"BAAAAOkJAAAAAAAA6gkAAAAAAAAAAAAA6gkAAAAAAADqCQAAAAAAAAQAAAAKCQkJ6gkAAAAAAADrCQAAAAAAAAAAAADrCQAAAAAAAOwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QkAAAAAAADpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwJAAAAAAAA7QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AkAAAAAAADsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAA8KAAAAAAAAEAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwoAAAAAAAAPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAABAKAAAAAAAAEQoAAAAAAAAAAAAAEQoAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAoAAAAAAAAQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "self.cell"
					},
					"CQAAABUKAAAAAAAAFgoAAAAAAAAAAAAAFgoAAAAAAAAXCgAAAAAAAAAAAAAXCgAAAAAAABgKAAAAAAAAAAAAABgKAAAAAAAAGQoAAAAAAAAAAAAAGQoAAAAAAAAaCgAAAAAAAAAAAAAaCgAAAAAAABsKAAAAAAAAAAAAABsKAAAAAAAAHAoAAAAAAAAAAAAAHAoAAAAAAAAdCgAAAAAAAAAAAAAdCgAAAAAAAB4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQoAAAAAAAAVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_previews"
					},
					"AgAAABoKAAAAAAAAGgoAAAAAAAAEAAAAY2VsbBoKAAAAAAAAJwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACcKAAAAAAAAKQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwoAAAAAAAAnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					845,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BAAAACgKAAAAAAAAKQoAAAAAAAAAAAAAKQoAAAAAAAAqCgAAAAAAAAAAAAAqCgAAAAAAACsKAAAAAAAAAAAAACsKAAAAAAAALAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAoAAAAAAAAoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					847,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAC0KAAAAAAAALgoAAAAAAAAAAAAALgoAAAAAAAAvCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQoAAAAAAAAtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": " QVB"
					},
					"BAAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAxCgAAAAAAAAAAAAAxCgAAAAAAADIKAAAAAAAAAAAAADIKAAAAAAAAMwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwoAAAAAAAAvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": "oxLayout"
					},
					"CAAAADMKAAAAAAAANAoAAAAAAAAAAAAANAoAAAAAAAA1CgAAAAAAAAAAAAA1CgAAAAAAADYKAAAAAAAAAAAAADYKAAAAAAAANwoAAAAAAAAAAAAANwoAAAAAAAA4CgAAAAAAAAAAAAA4CgAAAAAAADkKAAAAAAAAAAAAADkKAAAAAAAAOgoAAAAAAAAAAAAAOgoAAAAAAAA7CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwoAAAAAAAAzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					850,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADsKAAAAAAAAPQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwoAAAAAAAA7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					852,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD0KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAABCCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"left_delete",
					null,
					"AQAAAEEKAAAAAAAAQQoAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": "else:"
					},
					"BQAAAEEKAAAAAAAAQgoAAAAAAAAAAAAAQgoAAAAAAABDCgAAAAAAAAAAAABDCgAAAAAAAEQKAAAAAAAAAAAAAEQKAAAAAAAARQoAAAAAAAAAAAAARQoAAAAAAABGCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQoAAAAAAABBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": "\nself.ce"
					},
					"CgAAAEYKAAAAAAAARwoAAAAAAAAAAAAARwoAAAAAAABKCgAAAAAAAAAAAABKCgAAAAAAAEsKAAAAAAAAAAAAAEsKAAAAAAAATAoAAAAAAAAAAAAATAoAAAAAAABNCgAAAAAAAAAAAABNCgAAAAAAAE4KAAAAAAAAAAAAAE4KAAAAAAAATwoAAAAAAAAAAAAATwoAAAAAAABQCgAAAAAAAAAAAABQCgAAAAAAAFEKAAAAAAAAAAAAAFEKAAAAAAAAUgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgoAAAAAAABGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					856,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_previews"
					},
					"AgAAAFAKAAAAAAAAUAoAAAAAAAACAAAAY2VQCgAAAAAAAF0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgoAAAAAAABSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					857,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAF0KAAAAAAAAXwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQoAAAAAAABdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					860,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BAAAAF4KAAAAAAAAXwoAAAAAAAAAAAAAXwoAAAAAAABgCgAAAAAAAAAAAABgCgAAAAAAAGEKAAAAAAAAAAAAAGEKAAAAAAAAYgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgoAAAAAAABeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					862,
					1,
					"insert",
					{
						"characters": ".clea"
					},
					"BQAAAGMKAAAAAAAAZAoAAAAAAAAAAAAAZAoAAAAAAABlCgAAAAAAAAAAAABlCgAAAAAAAGYKAAAAAAAAAAAAAGYKAAAAAAAAZwoAAAAAAAAAAAAAZwoAAAAAAABoCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwoAAAAAAABjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					5,
					"left_delete",
					null,
					"BQAAAGcKAAAAAAAAZwoAAAAAAAABAAAAYWYKAAAAAAAAZgoAAAAAAAABAAAAZWUKAAAAAAAAZQoAAAAAAAABAAAAbGQKAAAAAAAAZAoAAAAAAAABAAAAY2MKAAAAAAAAYwoAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAaAoAAAAAAABoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					1,
					"insert",
					{
						"characters": ".coun"
					},
					"BQAAAGMKAAAAAAAAZAoAAAAAAAAAAAAAZAoAAAAAAABlCgAAAAAAAAAAAABlCgAAAAAAAGYKAAAAAAAAAAAAAGYKAAAAAAAAZwoAAAAAAAAAAAAAZwoAAAAAAABoCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwoAAAAAAABjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "count"
					},
					"AgAAAGQKAAAAAAAAZAoAAAAAAAAEAAAAY291bmQKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAoAAAAAAABoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGkKAAAAAAAAawoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQoAAAAAAABpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"insert",
					{
						"characters": "while"
					},
					"BQAAAEsKAAAAAAAATAoAAAAAAAAAAAAATAoAAAAAAABNCgAAAAAAAAAAAABNCgAAAAAAAE4KAAAAAAAAAAAAAE4KAAAAAAAATwoAAAAAAAAAAAAATwoAAAAAAABQCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwoAAAAAAABLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					875,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAKAAAAAAAAUQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAoAAAAAAABQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHEKAAAAAAAAcgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQoAAAAAAABxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					1,
					"insert",
					{
						"characters": "\nitem"
					},
					"BwAAAHIKAAAAAAAAcwoAAAAAAAAAAAAAcwoAAAAAAAB3CgAAAAAAAAAAAAB3CgAAAAAAAHgKAAAAAAAAAAAAAHgKAAAAAAAAeQoAAAAAAAAAAAAAeQoAAAAAAAB6CgAAAAAAAAAAAAB6CgAAAAAAAHsKAAAAAAAAAAAAAHsKAAAAAAAAfAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgoAAAAAAAByCgAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHwKAAAAAAAAfQoAAAAAAAAAAAAAfQoAAAAAAAB+CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAoAAAAAAAB8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"insert",
					{
						"characters": " self.cell"
					},
					"CgAAAH4KAAAAAAAAfwoAAAAAAAAAAAAAfwoAAAAAAACACgAAAAAAAAAAAACACgAAAAAAAIEKAAAAAAAAAAAAAIEKAAAAAAAAggoAAAAAAAAAAAAAggoAAAAAAACDCgAAAAAAAAAAAACDCgAAAAAAAIQKAAAAAAAAAAAAAIQKAAAAAAAAhQoAAAAAAAAAAAAAhQoAAAAAAACGCgAAAAAAAAAAAACGCgAAAAAAAIcKAAAAAAAAAAAAAIcKAAAAAAAAiAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgoAAAAAAAB+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_previews"
					},
					"AgAAAIQKAAAAAAAAhAoAAAAAAAAEAAAAY2VsbIQKAAAAAAAAkQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAoAAAAAAACICgAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJEKAAAAAAAAkwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQoAAAAAAACRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BAAAAJIKAAAAAAAAkwoAAAAAAAAAAAAAkwoAAAAAAACUCgAAAAAAAAAAAACUCgAAAAAAAJUKAAAAAAAAAAAAAJUKAAAAAAAAlgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgoAAAAAAACSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					888,
					1,
					"insert",
					{
						"characters": ".ta"
					},
					"AwAAAJcKAAAAAAAAmAoAAAAAAAAAAAAAmAoAAAAAAACZCgAAAAAAAAAAAACZCgAAAAAAAJoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":28,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "takeAt"
					},
					"AgAAAJgKAAAAAAAAmAoAAAAAAAACAAAAdGGYCgAAAAAAAJ4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgoAAAAAAACaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					890,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ4KAAAAAAAAoAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngoAAAAAAACeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					891,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAJ8KAAAAAAAAoAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwoAAAAAAACfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					893,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAKEKAAAAAAAAogoAAAAAAAAAAAAAogoAAAAAAACnCgAAAAAAAAAAAACnCgAAAAAAAKgKAAAAAAAAAAAAAKgKAAAAAAAAqQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQoAAAAAAAChCgAAAAAAAAAAAAAAAPC/"
				],
				[
					894,
					1,
					"insert",
					{
						"characters": " item.w"
					},
					"BwAAAKkKAAAAAAAAqgoAAAAAAAAAAAAAqgoAAAAAAACrCgAAAAAAAAAAAACrCgAAAAAAAKwKAAAAAAAAAAAAAKwKAAAAAAAArQoAAAAAAAAAAAAArQoAAAAAAACuCgAAAAAAAAAAAACuCgAAAAAAAK8KAAAAAAAAAAAAAK8KAAAAAAAAsAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQoAAAAAAACpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAALAKAAAAAAAAsQoAAAAAAAAAAAAAsQoAAAAAAACyCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAoAAAAAAACwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":3,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "widget"
					},
					"AgAAAK8KAAAAAAAArwoAAAAAAAADAAAAd2lkrwoAAAAAAAC1CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALUKAAAAAAAAtwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQoAAAAAAAC1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					899,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAALcKAAAAAAAAuAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwoAAAAAAAC3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": ":=widget"
					},
					"CAAAAKoKAAAAAAAAqwoAAAAAAAAAAAAAqwoAAAAAAACsCgAAAAAAAAAAAACsCgAAAAAAAK0KAAAAAAAAAAAAAK0KAAAAAAAArgoAAAAAAAAAAAAArgoAAAAAAACvCgAAAAAAAAAAAACvCgAAAAAAALAKAAAAAAAAAAAAALAKAAAAAAAAsQoAAAAAAAAAAAAAsQoAAAAAAACyCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgoAAAAAAACqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": "L="
					},
					"AgAAALIKAAAAAAAAswoAAAAAAAAAAAAAswoAAAAAAAC0CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"left_delete",
					null,
					"AQAAALMKAAAAAAAAswoAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAtAoAAAAAAAC0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"insert",
					{
						"characters": ":="
					},
					"AgAAALMKAAAAAAAAtAoAAAAAAAAAAAAAtAoAAAAAAAC1CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswoAAAAAAACzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					2,
					"left_delete",
					null,
					"AgAAAKsKAAAAAAAAqwoAAAAAAAABAAAAPaoKAAAAAAAAqgoAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAArAoAAAAAAACsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"left_delete",
					null,
					"AQAAALAKAAAAAAAAsAoAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAsQoAAAAAAACxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					915,
					1,
					"insert",
					{
						"characters": "\nwidget.del"
					},
					"DQAAAMAKAAAAAAAAwQoAAAAAAAAAAAAAwQoAAAAAAADGCgAAAAAAAAAAAADGCgAAAAAAAMcKAAAAAAAAAAAAAMcKAAAAAAAAyAoAAAAAAAAAAAAAyAoAAAAAAADJCgAAAAAAAAAAAADJCgAAAAAAAMoKAAAAAAAAAAAAAMoKAAAAAAAAywoAAAAAAAAAAAAAywoAAAAAAADMCgAAAAAAAAAAAADMCgAAAAAAAM0KAAAAAAAAAAAAAM0KAAAAAAAAzgoAAAAAAAAAAAAAzgoAAAAAAADPCgAAAAAAAAAAAADPCgAAAAAAANAKAAAAAAAAAAAAANAKAAAAAAAA0QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAoAAAAAAADACgAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADTCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QoAAAAAAADRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "deleteLater"
					},
					"AgAAAM4KAAAAAAAAzgoAAAAAAAAFAAAAZGVsZXTOCgAAAAAAANkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0woAAAAAAADTCgAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANkKAAAAAAAA2woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QoAAAAAAADZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": "\nsel"
					},
					"BQAAAC0NAAAAAAAALg0AAAAAAAAAAAAALg0AAAAAAAAyDQAAAAAAAAAAAAAyDQAAAAAAADMNAAAAAAAAAAAAADMNAAAAAAAANA0AAAAAAAAAAAAANA0AAAAAAAA1DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQ0AAAAAAAAtDQAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "f."
					},
					"AgAAADUNAAAAAAAANg0AAAAAAAAAAAAANg0AAAAAAAA3DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQ0AAAAAAAA1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": "cell_wid"
					},
					"CAAAADcNAAAAAAAAOA0AAAAAAAAAAAAAOA0AAAAAAAA5DQAAAAAAAAAAAAA5DQAAAAAAADoNAAAAAAAAAAAAADoNAAAAAAAAOw0AAAAAAAAAAAAAOw0AAAAAAAA8DQAAAAAAAAAAAAA8DQAAAAAAAD0NAAAAAAAAAAAAAD0NAAAAAAAAPg0AAAAAAAAAAAAAPg0AAAAAAAA/DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANw0AAAAAAAA3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					925,
					1,
					"insert",
					{
						"characters": "ge"
					},
					"AgAAAD8NAAAAAAAAQA0AAAAAAAAAAAAAQA0AAAAAAABBDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPw0AAAAAAAA/DQAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"insert",
					{
						"characters": "cell"
					},
					"BQAAADcNAAAAAAAAOA0AAAAAAAAAAAAAOA0AAAAAAAA4DQAAAAAAAAoAAABjZWxsX3dpZGdlOA0AAAAAAAA5DQAAAAAAAAAAAAA5DQAAAAAAADoNAAAAAAAAAAAAADoNAAAAAAAAOw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANw0AAAAAAABBDQAAAAAAAAAAAAAAAPC/"
				],
				[
					941,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAADsNAAAAAAAAPA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOw0AAAAAAAA7DQAAAAAAAAAAAAAAAPC/"
				],
				[
					942,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_previews"
					},
					"AgAAADcNAAAAAAAANw0AAAAAAAAFAAAAY2VsbF83DQAAAAAAAEQNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPA0AAAAAAAA8DQAAAAAAAAAAAAAAAPC/"
				],
				[
					943,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEQNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARA0AAAAAAABEDQAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAG8MAAAAAAAAcAwAAAAAAAAAAAAAcAwAAAAAAABzDAAAAAAAAAAAAABzDAAAAAAAAHQMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwwAAAAAAABvDAAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHQMAAAAAAAAdQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAwAAAAAAAB0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					6,
					"left_delete",
					null,
					"BgAAAHQMAAAAAAAAdAwAAAAAAAABAAAAc3MMAAAAAAAAcwwAAAAAAAABAAAACXIMAAAAAAAAcgwAAAAAAAABAAAACXEMAAAAAAAAcQwAAAAAAAABAAAACXAMAAAAAAAAcAwAAAAAAAABAAAACW8MAAAAAAAAbwwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdQwAAAAAAAB1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert",
					{
						"characters": "\nself."
					},
					"CAAAAG8MAAAAAAAAcAwAAAAAAAAAAAAAcAwAAAAAAABzDAAAAAAAAAAAAABzDAAAAAAAAHQMAAAAAAAAAAAAAHQMAAAAAAAAdQwAAAAAAAAAAAAAdQwAAAAAAAB2DAAAAAAAAAAAAAB2DAAAAAAAAHcMAAAAAAAAAAAAAHcMAAAAAAAAeAwAAAAAAAAAAAAAeAwAAAAAAAB5DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwwAAAAAAABvDAAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": "current_cel"
					},
					"CwAAAHkMAAAAAAAAegwAAAAAAAAAAAAAegwAAAAAAAB7DAAAAAAAAAAAAAB7DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAfQwAAAAAAAAAAAAAfQwAAAAAAAB+DAAAAAAAAAAAAAB+DAAAAAAAAH8MAAAAAAAAAAAAAH8MAAAAAAAAgAwAAAAAAAAAAAAAgAwAAAAAAACBDAAAAAAAAAAAAACBDAAAAAAAAIIMAAAAAAAAAAAAAIIMAAAAAAAAgwwAAAAAAAAAAAAAgwwAAAAAAACEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQwAAAAAAAB5DAAAAAAAAAAAAAAAAPC/"
				],
				[
					952,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAIQMAAAAAAAAhQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAwAAAAAAACEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIUMAAAAAAAAhgwAAAAAAAAAAAAAhgwAAAAAAACHDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQwAAAAAAACFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"insert",
					{
						"characters": " cell"
					},
					"BQAAAIcMAAAAAAAAiAwAAAAAAAAAAAAAiAwAAAAAAACJDAAAAAAAAAAAAACJDAAAAAAAAIoMAAAAAAAAAAAAAIoMAAAAAAAAiwwAAAAAAAAAAAAAiwwAAAAAAACMDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwwAAAAAAACHDAAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAHkMAAAAAAAAegwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQwAAAAAAAB5DAAAAAAAAAAAAAAAAPC/"
				],
				[
					961,
					1,
					"insert",
					{
						"characters": "self._cu"
					},
					"CAAAAGMNAAAAAAAAZA0AAAAAAAAAAAAAZA0AAAAAAABlDQAAAAAAAAAAAABlDQAAAAAAAGYNAAAAAAAAAAAAAGYNAAAAAAAAZw0AAAAAAAAAAAAAZw0AAAAAAABoDQAAAAAAAAAAAABoDQAAAAAAAGkNAAAAAAAAAAAAAGkNAAAAAAAAag0AAAAAAAAAAAAAag0AAAAAAABrDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYw0AAAAAAABjDQAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "_current_cell"
					},
					"AgAAAGgNAAAAAAAAaA0AAAAAAAADAAAAX2N1aA0AAAAAAAB1DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaw0AAAAAAABrDQAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"left_delete",
					null,
					"AQAAAHYNAAAAAAAAdg0AAAAAAAAfAAAACgkJCQlzZWxmLnByZXZpZXdfYXJlYS5sYXlvdXQoKQ",
					"AQAAAAAAAAABAAAAlQ0AAAAAAAB2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					978,
					1,
					"paste",
					null,
					"AgAAALoNAAAAAAAA4Q0AAAAAAAAAAAAA4Q0AAAAAAADhDQAAAAAAABsAAABzZWxmLnByZXZpZXdfYXJlYS5sYXlvdXQoKS4",
					"AQAAAAAAAAABAAAA1Q0AAAAAAAC6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD0KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAABCCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					991,
					5,
					"left_delete",
					null,
					"BQAAAEEKAAAAAAAAQQoAAAAAAAABAAAACUAKAAAAAAAAQAoAAAAAAAABAAAACT8KAAAAAAAAPwoAAAAAAAABAAAACT4KAAAAAAAAPgoAAAAAAAABAAAACT0KAAAAAAAAPQoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					994,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1001,
					1,
					"insert",
					{
						"characters": "\nself.pre"
					},
					"CwAAAD0KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAABCCgAAAAAAAAAAAADhCgAAAAAAAOEKAAAAAAAABgAAAAkJCQkJCUIKAAAAAAAAQwoAAAAAAAAAAAAAQwoAAAAAAABECgAAAAAAAAAAAABECgAAAAAAAEUKAAAAAAAAAAAAAEUKAAAAAAAARgoAAAAAAAAAAAAARgoAAAAAAABHCgAAAAAAAAAAAABHCgAAAAAAAEgKAAAAAAAAAAAAAEgKAAAAAAAASQoAAAAAAAAAAAAASQoAAAAAAABKCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1004,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":18,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "preview_area"
					},
					"AgAAAEcKAAAAAAAARwoAAAAAAAACAAAAcHJHCgAAAAAAAFMKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQoAAAAAAABJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1006,
					1,
					"left_delete",
					null,
					"AQAAAFMKAAAAAAAAUwoAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1007,
					1,
					"insert",
					{
						"characters": ".addLa"
					},
					"BgAAAFMKAAAAAAAAVAoAAAAAAAAAAAAAVAoAAAAAAABVCgAAAAAAAAAAAABVCgAAAAAAAFYKAAAAAAAAAAAAAFYKAAAAAAAAVwoAAAAAAAAAAAAAVwoAAAAAAABYCgAAAAAAAAAAAABYCgAAAAAAAFkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwoAAAAAAABTCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1008,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAFkKAAAAAAAAWgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQoAAAAAAABZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1009,
					6,
					"left_delete",
					null,
					"BgAAAFkKAAAAAAAAWQoAAAAAAAABAAAAeVgKAAAAAAAAWAoAAAAAAAABAAAAYVcKAAAAAAAAVwoAAAAAAAABAAAATFYKAAAAAAAAVgoAAAAAAAABAAAAZFUKAAAAAAAAVQoAAAAAAAABAAAAZFQKAAAAAAAAVAoAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAWgoAAAAAAABaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1010,
					1,
					"insert",
					{
						"characters": "layout"
					},
					"BgAAAFQKAAAAAAAAVQoAAAAAAAAAAAAAVQoAAAAAAABWCgAAAAAAAAAAAABWCgAAAAAAAFcKAAAAAAAAAAAAAFcKAAAAAAAAWAoAAAAAAAAAAAAAWAoAAAAAAABZCgAAAAAAAAAAAABZCgAAAAAAAFoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1011,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFoKAAAAAAAAXAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgoAAAAAAABaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1013,
					1,
					"insert",
					{
						"characters": ".addL"
					},
					"BQAAAFwKAAAAAAAAXQoAAAAAAAAAAAAAXQoAAAAAAABeCgAAAAAAAAAAAABeCgAAAAAAAF8KAAAAAAAAAAAAAF8KAAAAAAAAYAoAAAAAAAAAAAAAYAoAAAAAAABhCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAoAAAAAAABcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1014,
					1,
					"insert",
					{
						"characters": "ayout"
					},
					"BQAAAGEKAAAAAAAAYgoAAAAAAAAAAAAAYgoAAAAAAABjCgAAAAAAAAAAAABjCgAAAAAAAGQKAAAAAAAAAAAAAGQKAAAAAAAAZQoAAAAAAAAAAAAAZQoAAAAAAABmCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQoAAAAAAABhCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYKAAAAAAAAaAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgoAAAAAAABmCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1017,
					1,
					"insert",
					{
						"characters": "Child"
					},
					"BQAAAGAKAAAAAAAAYQoAAAAAAAAAAAAAYQoAAAAAAABiCgAAAAAAAAAAAABiCgAAAAAAAGMKAAAAAAAAAAAAAGMKAAAAAAAAZAoAAAAAAAAAAAAAZAoAAAAAAABlCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAoAAAAAAABgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1022,
					1,
					"insert",
					{
						"characters": "\ncell_layo"
					},
					"DAAAABAKAAAAAAAAEQoAAAAAAAAAAAAAEQoAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABUKAAAAAAAAAAAAABUKAAAAAAAAFgoAAAAAAAAAAAAAFgoAAAAAAAAXCgAAAAAAAAAAAAAXCgAAAAAAABgKAAAAAAAAAAAAABgKAAAAAAAAGQoAAAAAAAAAAAAAGQoAAAAAAAAaCgAAAAAAAAAAAAAaCgAAAAAAABsKAAAAAAAAAAAAABsKAAAAAAAAHAoAAAAAAAAAAAAAHAoAAAAAAAAdCgAAAAAAAAAAAAAdCgAAAAAAAB4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAoAAAAAAAAQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1023,
					1,
					"insert",
					{
						"characters": "ut"
					},
					"AgAAAB4KAAAAAAAAHwoAAAAAAAAAAAAAHwoAAAAAAAAgCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACAKAAAAAAAAIQoAAAAAAAAAAAAAIQoAAAAAAAAiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAoAAAAAAAAgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1025,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIKAAAAAAAAIwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1033,
					1,
					"paste",
					null,
					"AQAAACMKAAAAAAAAMAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwoAAAAAAAAjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1041,
					1,
					"paste",
					null,
					"AgAAAFAKAAAAAAAAWwoAAAAAAAAAAAAAWwoAAAAAAABbCgAAAAAAAA0AAABRVkJveExheW91dCgp",
					"AQAAAAAAAAABAAAAUAoAAAAAAABdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1044,
					1,
					"paste",
					null,
					"AQAAAIoKAAAAAAAAlQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigoAAAAAAACKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1062,
					1,
					"insert",
					{
						"characters": "\npre"
					},
					"BQAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA7AgAAAAAAADuCAAAAAAAAAAAAADuCAAAAAAAAO8IAAAAAAAAAAAAAO8IAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAADxCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wgAAAAAAADrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1063,
					3,
					"left_delete",
					null,
					"AwAAAPAIAAAAAAAA8AgAAAAAAAABAAAAZe8IAAAAAAAA7wgAAAAAAAABAAAAcu4IAAAAAAAA7ggAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA8QgAAAAAAADxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1064,
					1,
					"insert",
					{
						"characters": "self.prev"
					},
					"CQAAAO4IAAAAAAAA7wgAAAAAAAAAAAAA7wgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPEIAAAAAAAAAAAAAPEIAAAAAAAA8ggAAAAAAAAAAAAA8ggAAAAAAADzCAAAAAAAAAAAAADzCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA9QgAAAAAAAAAAAAA9QgAAAAAAAD2CAAAAAAAAAAAAAD2CAAAAAAAAPcIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7ggAAAAAAADuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1065,
					1,
					"insert",
					{
						"characters": "iew_layout"
					},
					"CgAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD5CAAAAAAAAAAAAAD5CAAAAAAAAPoIAAAAAAAAAAAAAPoIAAAAAAAA+wgAAAAAAAAAAAAA+wgAAAAAAAD8CAAAAAAAAAAAAAD8CAAAAAAAAP0IAAAAAAAAAAAAAP0IAAAAAAAA/ggAAAAAAAAAAAAA/ggAAAAAAAD/CAAAAAAAAAAAAAD/CAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wgAAAAAAAD3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					1066,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAEJAAAAAAAAAgkAAAAAAAAAAAAAAgkAAAAAAAADCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQkAAAAAAAABCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1067,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMJAAAAAAAABAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwkAAAAAAAADCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1073,
					1,
					"paste",
					null,
					"AQAAAAQJAAAAAAAAEQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"paste",
					null,
					"AgAAALgIAAAAAAAAywgAAAAAAAAAAAAAywgAAAAAAADLCAAAAAAAAA0AAABRVkJveExheW91dCgp",
					"AQAAAAAAAAABAAAAuAgAAAAAAADFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1083,
					1,
					"cut",
					null,
					"AQAAAJwIAAAAAAAAnAgAAAAAAABVAAAAc2VsZi5wcmV2aWV3X2FyZWEuc2V0TGF5b3V0KHNlbGYucHJldmlld19sYXlvdXQpCgkJc2VsZi5zZXRQcmV2aWV3KHNlbGYucHJldmlld19hcmVhKQ",
					"AQAAAAAAAAABAAAA8QgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					3,
					"left_delete",
					null,
					"AwAAAJsIAAAAAAAAmwgAAAAAAAABAAAACZoIAAAAAAAAmggAAAAAAAABAAAACZkIAAAAAAAAmQgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAnAgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1087,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL8IAAAAAAAAwAgAAAAAAAAAAAAAwAgAAAAAAADCCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwgAAAAAAAC/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					1088,
					1,
					"paste",
					null,
					"AQAAAMIIAAAAAAAAFwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1102,
					1,
					"insert",
					{
						"characters": "layout"
					},
					"BwAAAJkKAAAAAAAAmgoAAAAAAAAAAAAAmgoAAAAAAACaCgAAAAAAAA0AAABhcmVhLmxheW91dCgpmgoAAAAAAACbCgAAAAAAAAAAAACbCgAAAAAAAJwKAAAAAAAAAAAAAJwKAAAAAAAAnQoAAAAAAAAAAAAAnQoAAAAAAACeCgAAAAAAAAAAAACeCgAAAAAAAJ8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert",
					{
						"characters": "add"
					},
					"BAAAAKAKAAAAAAAAoQoAAAAAAAAAAAAAoQoAAAAAAAChCgAAAAAAAA4AAABhZGRDaGlsZExheW91dKEKAAAAAAAAogoAAAAAAAAAAAAAogoAAAAAAACjCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAoAAAAAAACuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1109,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":3,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "addLayout"
					},
					"AgAAAKAKAAAAAAAAoAoAAAAAAAADAAAAYWRkoAoAAAAAAACpCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowoAAAAAAACjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1118,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFULAAAAAAAAVgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1119,
					1,
					"reindent",
					null,
					"AQAAAFYLAAAAAAAAXAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgsAAAAAAABWCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1120,
					3,
					"left_delete",
					null,
					"AwAAAFsLAAAAAAAAWwsAAAAAAAABAAAACVoLAAAAAAAAWgsAAAAAAAABAAAACVkLAAAAAAAAWQsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1121,
					1,
					"insert",
					{
						"characters": "cell_"
					},
					"BQAAAFkLAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABbCwAAAAAAAAAAAABbCwAAAAAAAFwLAAAAAAAAAAAAAFwLAAAAAAAAXQsAAAAAAAAAAAAAXQsAAAAAAABeCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQsAAAAAAABZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1122,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "cell_layout"
					},
					"AgAAAFkLAAAAAAAAWQsAAAAAAAAFAAAAY2VsbF9ZCwAAAAAAAGQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgsAAAAAAABeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1123,
					1,
					"insert",
					{
						"characters": ".add"
					},
					"BAAAAGQLAAAAAAAAZQsAAAAAAAAAAAAAZQsAAAAAAABmCwAAAAAAAAAAAABmCwAAAAAAAGcLAAAAAAAAAAAAAGcLAAAAAAAAaAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAsAAAAAAABkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1124,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAGgLAAAAAAAAaQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAsAAAAAAABoCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1125,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-pyright\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "addWidget"
					},
					"AgAAAGULAAAAAAAAZQsAAAAAAAAEAAAAYWRkV2ULAAAAAAAAbgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQsAAAAAAABpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1126,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG4LAAAAAAAAcAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgsAAAAAAABuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1127,
					1,
					"insert",
					{
						"characters": "QLabel"
					},
					"BgAAAG8LAAAAAAAAcAsAAAAAAAAAAAAAcAsAAAAAAABxCwAAAAAAAAAAAABxCwAAAAAAAHILAAAAAAAAAAAAAHILAAAAAAAAcwsAAAAAAAAAAAAAcwsAAAAAAAB0CwAAAAAAAAAAAAB0CwAAAAAAAHULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwsAAAAAAABvCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1128,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHULAAAAAAAAdwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQsAAAAAAAB1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1138,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFULAAAAAAAAVgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1139,
					1,
					"reindent",
					null,
					"AQAAAFYLAAAAAAAAXAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgsAAAAAAABWCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1140,
					3,
					"left_delete",
					null,
					"AwAAAFsLAAAAAAAAWwsAAAAAAAABAAAACVoLAAAAAAAAWgsAAAAAAAABAAAACVkLAAAAAAAAWQsAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1141,
					1,
					"paste",
					null,
					"AQAAAFkLAAAAAAAAcQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQsAAAAAAABZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1142,
					1,
					"insert",
					{
						"characters": ".split"
					},
					"BgAAAHELAAAAAAAAcgsAAAAAAAAAAAAAcgsAAAAAAABzCwAAAAAAAAAAAABzCwAAAAAAAHQLAAAAAAAAAAAAAHQLAAAAAAAAdQsAAAAAAAAAAAAAdQsAAAAAAAB2CwAAAAAAAAAAAAB2CwAAAAAAAHcLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQsAAAAAAABxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1143,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHcLAAAAAAAAeQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwsAAAAAAAB3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1144,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAHgLAAAAAAAAegsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAsAAAAAAAB4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1145,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAAHkLAAAAAAAAegsAAAAAAAAAAAAAegsAAAAAAAB7CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQsAAAAAAAB5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1147,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAH0LAAAAAAAAfwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1150,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAH4LAAAAAAAAfwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgsAAAAAAAB+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1154,
					1,
					"insert",
					{
						"characters": "forst_line"
					},
					"CgAAAFkLAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABbCwAAAAAAAAAAAABbCwAAAAAAAFwLAAAAAAAAAAAAAFwLAAAAAAAAXQsAAAAAAAAAAAAAXQsAAAAAAABeCwAAAAAAAAAAAABeCwAAAAAAAF8LAAAAAAAAAAAAAF8LAAAAAAAAYAsAAAAAAAAAAAAAYAsAAAAAAABhCwAAAAAAAAAAAABhCwAAAAAAAGILAAAAAAAAAAAAAGILAAAAAAAAYwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQsAAAAAAABZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1155,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGMLAAAAAAAAZAsAAAAAAAAAAAAAZAsAAAAAAABlCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwsAAAAAAABjCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1156,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGULAAAAAAAAZgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQsAAAAAAABlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1159,
					1,
					"left_delete",
					null,
					"AQAAAFoLAAAAAAAAWgsAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAWwsAAAAAAABbCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1160,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAFoLAAAAAAAAWwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgsAAAAAAABaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1168,
					1,
					"paste",
					null,
					"AQAAAK4LAAAAAAAAuAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgsAAAAAAACuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1184,
					1,
					"paste",
					null,
					"AgAAAJELAAAAAAAAqQsAAAAAAAAAAAAAqQsAAAAAAACpCwAAAAAAAAsAAABjZWxsX2xheW91dA",
					"AQAAAAAAAAABAAAAkQsAAAAAAACcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1195,
					1,
					"insert",
					{
						"characters": "\n\nclass"
					},
					"BwAAAHcCAAAAAAAAeAIAAAAAAAAAAAAAeAIAAAAAAAB5AgAAAAAAAAAAAAB5AgAAAAAAAHoCAAAAAAAAAAAAAHoCAAAAAAAAewIAAAAAAAAAAAAAewIAAAAAAAB8AgAAAAAAAAAAAAB8AgAAAAAAAH0CAAAAAAAAAAAAAH0CAAAAAAAAfgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwIAAAAAAAB3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1196,
					1,
					"insert",
					{
						"characters": " CellPre"
					},
					"CAAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAACDAgAAAAAAAIQCAAAAAAAAAAAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACGAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgIAAAAAAAB+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": "viewWidget"
					},
					"CgAAAIYCAAAAAAAAhwIAAAAAAAAAAAAAhwIAAAAAAACIAgAAAAAAAAAAAACIAgAAAAAAAIkCAAAAAAAAAAAAAIkCAAAAAAAAigIAAAAAAAAAAAAAigIAAAAAAACLAgAAAAAAAAAAAACLAgAAAAAAAIwCAAAAAAAAAAAAAIwCAAAAAAAAjQIAAAAAAAAAAAAAjQIAAAAAAACOAgAAAAAAAAAAAACOAgAAAAAAAI8CAAAAAAAAAAAAAI8CAAAAAAAAkAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgIAAAAAAACGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1198,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJACAAAAAAAAkgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAIAAAAAAACQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1199,
					1,
					"insert",
					{
						"characters": "QWidget"
					},
					"BwAAAJECAAAAAAAAkgIAAAAAAAAAAAAAkgIAAAAAAACTAgAAAAAAAAAAAACTAgAAAAAAAJQCAAAAAAAAAAAAAJQCAAAAAAAAlQIAAAAAAAAAAAAAlQIAAAAAAACWAgAAAAAAAAAAAACWAgAAAAAAAJcCAAAAAAAAAAAAAJcCAAAAAAAAmAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQIAAAAAAACRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1201,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJkCAAAAAAAAmgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQIAAAAAAACZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1202,
					1,
					"insert",
					{
						"characters": "\npass"
					},
					"BgAAAJoCAAAAAAAAmwIAAAAAAAAAAAAAmwIAAAAAAACcAgAAAAAAAAAAAACcAgAAAAAAAJ0CAAAAAAAAAAAAAJ0CAAAAAAAAngIAAAAAAAAAAAAAngIAAAAAAACfAgAAAAAAAAAAAACfAgAAAAAAAKACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgIAAAAAAACaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1203,
					4,
					"left_delete",
					null,
					"BAAAAJ8CAAAAAAAAnwIAAAAAAAABAAAAc54CAAAAAAAAngIAAAAAAAABAAAAc50CAAAAAAAAnQIAAAAAAAABAAAAYZwCAAAAAAAAnAIAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAoAIAAAAAAACgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1204,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAIAAAAAAACcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1208,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gMAAAAAAAD6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1211,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIEDAAAAAAAAggMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQMAAAAAAACBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1214,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFYDAAAAAAAAVwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgMAAAAAAABWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1217,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFUDAAAAAAAAVgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQMAAAAAAABVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1218,
					1,
					"left_delete",
					null,
					"AQAAAFUDAAAAAAAAVQMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVgMAAAAAAABWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1221,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEoDAAAAAAAASwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgMAAAAAAABKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1227,
					2,
					"left_delete",
					null,
					"AgAAABAPAAAAAAAAEA8AAAAAAAABAAAACg8PAAAAAAAADw8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEQ8AAAAAAAARDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Searching 159 files for \"instance\"\n\nC:\\dev\\src\\pylive\\.gitignore:\n   63  \n   64  # Flask stuff:\n   65: instance/\n   66  .webassets-cache\n   67  \n\nC:\\dev\\src\\pylive\\expreiments\\file_textdocument_link.py:\n   97  \n   98  \tdef saveFile(self, filepath:str|None=None):\n   99: \t\tassert filepath is None or isinstance(filepath, str), f\"got:, {filepath}\"\n  100  \t\tDoSaveAs = self.filepath!=filepath\n  101  \t\tif DoSaveAs:\n\nC:\\dev\\src\\pylive\\expreiments\\inspect_available_functions.py:\n   22  # \tfor key, val in dictionary.items():\n   23  # \t\tIsCallable = callable(val)\n   24: # \t\tIsFunctionType = isinstance(val, FunctionType)\n   25  # \t\tIsFunction = isfunction(val)\n   26  # \t\tif IsCallable:\n\nC:\\dev\\src\\pylive\\expreiments\\live_paint_qwidget.py:\n   38  if __name__ == \"__live__\":\n   39  \tfrom pylive.preview_widget import PreviewWidget\n   40: \tpreview = PreviewWidget.instance()\n   41  \tpreview.display(MyWidget())\n   42  \n\nC:\\dev\\src\\pylive\\expreiments\\livepreview_qwidget.py:\n   28  \t\tself.setWindowOpacity(0.5)\n   29  \n   30: \t\tif isinstance(err, SyntaxError):\n   31  \t\t\tself.setText( str(err) )\n   32  \t\telse:\n   ..\n  146  \t\twidget_classes = []\n  147  \t\tfor node in tree:\n  148: \t\t\tif isinstance(node, ast.ClassDef):\n  149  \t\t\t\tprint(ctx[node.name])\n  150  \t\t\t\tif issubclass(ctx[node.name], QWidget):\n\nC:\\dev\\src\\pylive\\expreiments\\QT_from_notebook.ipynb:\n   19      \"from PySide6.QtWidgets import *\\n\",\n   20      \"%gui qt\\n\",\n   21:     \"app = QApplication.instance()  # Reuse the existing instance if available\\n\",\n   22:     \"if app is None:  # If no instance exists, create one\\n\",\n   23      \"    app = QApplication([])\\n\",\n   24      \"\\n\",\n\nC:\\dev\\src\\pylive\\expreiments\\set_scriptedit_highlighter.py:\n  137  \teditor = ScriptEdit()\n  138  \tfrom pylive.preview_widget import PreviewWidget\n  139: \tpreview = PreviewWidget.instance()\n  140  \tpreview.display(editor)\n  141  \t\n\nC:\\dev\\src\\pylive\\expreiments\\standalone_preview_widget.py:\n   19  if __name__ == \"__main__\":\n   20  \timport sys\n   21: \tapp = QApplication.instance() or QApplication(sys.argv)\t\n   22  \n   23  \t# initalize your widgets here\n   ..\n   25  \tfrom pylive.preview_widget import PreviewWidget\n   26  \twidget = MyWidget()\n   27: \tpreview = PreviewWidget.instance()\n   28  \tpreview.display(widget)\n   29  \tpreview.show()\n\nC:\\dev\\src\\pylive\\expreiments\\testing_dangling_timer.py:\n   26  if __name__ == \"__live__\":\n   27  \tfrom pylive.preview_widget import PreviewWidget\n   28: \tpreview = PreviewWidget.instance()\n   29  \tpreview.display(MyWidget())\n\nC:\\dev\\src\\pylive\\expreiments\\visualize_function_dependencies.py:\n   13  \t# Traverse the AST\n   14  \tfor node in ast.walk(tree):\n   15: \t\tif isinstance(node, ast.FunctionDef):  # Find function definitions\n   16  \t\t\tfunction_name = node.name\n   17  \t\t\tfunction_dependencies[function_name] = []\n   ..\n   19  \t\t\t# Analyze the body of the function for function calls\n   20  \t\t\tfor subnode in ast.walk(node):\n   21: \t\t\t\tif isinstance(subnode, ast.Call) and isinstance(subnode.func, ast.Name):\n   22  \t\t\t\t\tcalled_function = subnode.func.id\n   23  \t\t\t\t\tfunction_dependencies[function_name].append(called_function)\n   ..\n   34  \t# Traverse the AST\n   35  \tfor node in ast.walk(tree):\n   36: \t\tif isinstance(node, ast.FunctionDef):  # Find function definitions\n   37  \t\t\tfunction_name = node.name\n   38  \t\t\t\n   39  \t\t\t# Analyze the body of the function for function calls\n   40  \t\t\tfor subnode in ast.walk(node):\n   41: \t\t\t\tif isinstance(subnode, ast.Call) and isinstance(subnode.func, ast.Name):\n   42  \t\t\t\t\tcalled_function = subnode.func.id\n   43  \t\t\t\t\tG.add_edge(function_name, called_function)\n   ..\n  141  \n  142  \t# set nodes orientation\n  143: \t# for node in (item for item in graphscene.items() if isinstance(item, NodeWidget)):\n  144  \t# \tnode.setOrientation(Qt.Orientation.Vertical)\n  145  \n\nC:\\dev\\src\\pylive\\expreiments\\3d_rendering\\default.vert:\n    4  layout (location = 2) in vec3 aNormal;\n    5  layout (location = 3) in vec3 aColor;\n    6: layout (location = 4) in mat4 instanceMatrix;\n    7  \n    8  uniform mat4 projection;\n    9  uniform mat4 view;\n   10  uniform mat4 model;\n   11: uniform bool useInstanceMatrix;\n   12  \n   13  out vec2 vUV;\n   ..\n   30  \n   31  \tmat4 viewModel = view*model;\n   32: \tif(useInstanceMatrix){\n   33: \t\tviewModel *= instanceMatrix;\n   34  \t}\n   35  \n\nC:\\dev\\src\\pylive\\expreiments\\3d_rendering\\falling-collada-cube-bullet-physics-opengl33-pyside6-master\\assets\\cube.dae:\n   48    <library_materials>\n   49      <material id=\"Material-material\" name=\"Material\">\n   50:       <instance_effect url=\"#Material-effect\"/>\n   51      </material>\n   52    </library_materials>\n   ..\n  102        <node id=\"Cube\" name=\"Cube\" type=\"NODE\">\n  103          <matrix sid=\"transform\">1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1</matrix>\n  104:         <instance_geometry url=\"#Cube-mesh\">\n  105            <bind_material>\n  106              <technique_common>\n  107:               <instance_material symbol=\"Material-material\" target=\"#Material-material\"/>\n  108              </technique_common>\n  109            </bind_material>\n  110:         </instance_geometry>\n  111        </node>\n  112      </visual_scene>\n  113    </library_visual_scenes>\n  114    <scene>\n  115:     <instance_visual_scene url=\"#Scene\"/>\n  116    </scene>\n  117  </COLLADA>\n\nC:\\dev\\src\\pylive\\expreiments\\ipython\\ipython_kernel.py:\n    9          super().__init__(parent)\n   10  \n   11:         # Initialize an InteractiveShell instance\n   12:         self.shell = InteractiveShell.instance()\n   13  \n   14          # Layout for the widget\n\nC:\\dev\\src\\pylive\\expreiments\\ipython\\notbook_with_chatgpt.py:\n   36  \n   37          # Initialize IPython shell for code execution\n   38:         self.shell = InteractiveShell.instance()\n   39  \n   40      def run_code(self):\n\nC:\\dev\\src\\pylive\\expreiments\\ipython\\notebook_with_ipython.py:\n   41              # Use IPython to execute the code\n   42              from IPython.core.interactiveshell import InteractiveShell\n   43:             shell = InteractiveShell.instance()\n   44              result = shell.run_cell(code)\n   45              \n\nC:\\dev\\src\\pylive\\expreiments\\live_coding\\livecoding_with_qtgui\\evaluate_a_chain_of_expressions.py:\n   18  \tfor lineno, (name, expr) in enumerate(chain.items()):\n   19  \t\tresult = eval(expr, global_vars, local_vars)\n   20: \t\tif isinstance(name, str):\n   21  \t\t\tlocal_vars[name] = result\n   22  \t\tprint(f\"{lineno+1:3}. {expr:20.20} {result}\")\n\nC:\\dev\\src\\pylive\\expreiments\\live_coding\\livecoding_with_qtgui\\QLiveCoding.py:\n   54  \tmain_fn = None\n   55  \tfor name, value in reversed(local_vars.items()):\n   56: \t\tif name==\"main\" and isinstance(value, FunctionType):\n   57  \t\t\tmain_fn = value\n   58  \treturn main_fn\n\nC:\\dev\\src\\pylive\\pylive\\declerative_qt\\__init__.py:\n   22  \tif children:\n   23  \t\tfor child in children:\n   24: \t\t\tif isinstance(layout, (QVBoxLayout, QHBoxLayout)):\n   25  \t\t\t\tchild_widget, child_stretch = child[:2]\n   26  \t\t\t\tlayout.addWidget(child_widget, child_stretch)\n   27: \t\t\telif isinstance(widget, QTabWidget):\n   28  \t\t\t\tchild_widget, tab_name = child\n   29  \t\t\t\twidget.addTab(child_widget, tab_name)\n\nC:\\dev\\src\\pylive\\pylive\\examples\\livenotebook.py:\n   14  \t\t# self.setObjectName(\"NotebookPreview\")\n   15  \n   16: \t\t# Initialize an InteractiveShell instance\n   17: \t\tself.shell = InteractiveShell.instance()\n   18  \n   19  \t\t# Layout for the widget\n   ..\n   69  \n   70  \n   71: \tshell = InteractiveShell.instance()\n   72  \n   73  \t# Main Layout\n   ..\n  150  \tcells.dataChanged.connect(onDataChanged)\n  151  \n  152: \tprev = QApplication.instance().findChild(QWidget, \"NotebookPreview\")\n  153  \tprint(prev)\n  154  \n\nC:\\dev\\src\\pylive\\pylive\\examples\\livescript.py:\n   44  if __name__ == \"__live__\":\n   45  \tfrom pylive.preview_widget import PreviewWidget\n   46: \tpreview = PreviewWidget.instance()\n   47  \tpreview.display(MyWidget())\n   48  \n   ..\n   76  \t\tself.script_edit.textChanged.connect(lambda: self.evaluate())\n   77  \n   78: \t\tself.preview_widget = PreviewWidget.instance()\n   79  \n   80  \t\tself.log_window = LogWindow()\n   ..\n  162  \n  163  \tdef display_exception(self, e, prefix=\"\", postfix=\"\"):\n  164: \t\tif isinstance(e, SyntaxError):\n  165  \t\t\ttext = \" \".join([prefix, str(e.msg), postfix])\n  166  \t\t\tif e.lineno:\n  ...\n  415  \n  416  \tdef saveFile(self, filepath:str|None=None):\n  417: \t\tassert filepath is None or isinstance(filepath, str), f\"got:, {filepath}\"\n  418  \t\tDoSaveAs = self.filepath!=filepath\n  419  \t\tif DoSaveAs:\n\nC:\\dev\\src\\pylive\\pylive\\examples\\visual_coding.py:\n  359  \t\t\t\t\tresult = e\n  360  \n  361: \t\t\t\tif isinstance(result, Exception):\n  362  \t\t\t\t\t#update_inlets\n  363  \t\t\t\t\tself.graph.removeInlets( list(self.graph.getNodeInlets(node) ))\n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\dag_graph_graphics_scene.py:\n   84  \t\t\t\tself.main_layout.removeItem(self.text_widget)\n   85  \t\t\t\tself.text_widget.hide()\n   86: \t\t\t\tif isinstance(self, OutletWidget):\n   87  \t\t\t\t\tself.text_widget.moveBy(3,+10)\n   88  \t\t\t\telse:\n   ..\n   93  \t\t\tcase Qt.Orientation.Horizontal:\n   94  \t\t\t\tself.main_layout.setOrientation(orientation)\n   95: \t\t\t\tif isinstance(self, OutletWidget):\n   96  \t\t\t\t\tself.main_layout.insertItem(0, self.text_widget)\n   97  \t\t\t\telse:\n   ..\n  362  \tdef __init__(self, source_outlet:OutletWidget|None, target_inlet:InletWidget|None):\n  363  \t\tsuper().__init__(parent=None)\n  364: \t\tassert source_outlet is None or isinstance(source_outlet, OutletWidget), f\"got: {source_outlet}\"\n  365: \t\tassert target_inlet is None or isinstance(target_inlet, InletWidget), f\"got: {target_inlet}\"\n  366  \t\tself._source_outlet = source_outlet\n  367  \t\tself._target_inlet = target_inlet\n  ...\n  391  \n  392  \tdef setSourceOutlet(self, pin: OutletWidget|None):\n  393: \t\tassert pin is None or isinstance(pin, OutletWidget), f\"got: {pin}\"\n  394  \n  395  \t\t# add or remove edge to pin edges for position update\n  ...\n  406  \n  407  \tdef setTargetInlet(self, pin: InletWidget|None):\n  408: \t\tassert pin is None or isinstance(pin, InletWidget), f\"got: {pin}\"\n  409  \n  410  \t\t# add or remove edge to pin edges for position update\n  ...\n  536  \tdef pinAt(self, pos:QPoint|QPointF)->PinWidget|None:\n  537  \t\tfor item in self.items(pos, deviceTransform=QTransform()):\n  538: \t\t\tif isinstance(item, PinWidget):\n  539  \t\t\t\treturn item\n  540  \t\treturn None\n  ...\n  542  \tdef nodeAt(self, pos:QPoint|QPointF)->NodeWidget|None:\n  543  \t\tfor item in self.items(pos, deviceTransform=QTransform()):\n  544: \t\t\tif isinstance(item, NodeWidget):\n  545  \t\t\t\treturn item\n  546  \t\treturn None\n  ...\n  548  \tdef edgeAt(self, pos:QPoint|QPointF)->EdgeWidget|None:\n  549  \t\tfor item in self.items(pos, deviceTransform=QTransform()):\n  550: \t\t\tif isinstance(item, EdgeWidget):\n  551  \t\t\t\treturn item\n  552  \t\treturn None\n  ...\n  611  \t\t\n  612  \tdef initiateConnection(self, pin):\n  613: \t\tif isinstance(pin, OutletWidget):\n  614  \t\t\tself.interactive_edge = EdgeWidget(source_outlet=pin, target_inlet=None)\n  615  \t\t\tself.interactive_edge_fixed_pin = pin\n  616: \t\telif isinstance(pin, InletWidget):\n  617  \t\t\tself.interactive_edge = EdgeWidget(source_outlet=None, target_inlet=pin)\n  618  \t\t\tself.interactive_edge_fixed_pin = pin\n  ...\n  623  \n  624  \tdef moveConnection(self, scenepos:QPointF):\n  625: \t\tassert isinstance(scenepos, QPointF), f\"got: {scenepos}\"\n  626  \t\tassert self.interactive_edge\n  627  \n  628  \t\t# move free endpoint\n  629  \t\tline = self.interactive_edge.line()\n  630: \t\tif isinstance(self.interactive_edge_fixed_pin, OutletWidget):\n  631  \t\t\tline.setP2(scenepos)\n  632: \t\telif isinstance(self.interactive_edge_fixed_pin, InletWidget):\n  633  \t\t\tline.setP1(scenepos)\n  634  \t\tself.interactive_edge.setLine(line)\n  ...\n  642  \t\t\tcurrent_outlet.setHighlight(False)\n  643  \n  644: \t\tif isinstance(self.interactive_edge_fixed_pin, OutletWidget) and isinstance(pinUnderMouse, InletWidget):\n  645  \t\t\tself.interactive_edge.setTargetInlet(pinUnderMouse)\n  646  \t\t\tpinUnderMouse.setHighlight(True)\n  647  \t\t\tself.interactive_edge.updatePosition()\n  648: \t\telif isinstance(self.interactive_edge_fixed_pin, InletWidget) and isinstance(pinUnderMouse, OutletWidget):\n  649  \t\t\tself.interactive_edge.sourceOutlet().setHighlight(False)\n  650  \t\t\tself.interactive_edge.setSourceOutlet(pinUnderMouse)\n  ...\n  657  \t\tif self.interactive_edge_moving_pin:\n  658  \t\t\t# restore edge pin connections\n  659: \t\t\tif isinstance(self.interactive_edge_moving_pin, InletWidget):\n  660  \t\t\t\tself.interactive_edge.setTargetInlet(self.interactive_edge_moving_pin)\n  661: \t\t\tif isinstance(self.interactive_edge_moving_pin, OutletWidget):\n  662  \t\t\t\tself.interactive_edge.setSourceOutlet(self.interactive_edge_moving_pin)\n  663  \t\telse:\n  ...\n  667  \tdef canConnect(self, start_pin: PinWidget, end_pin: PinWidget) -> bool:\n  668  \t\t# Check if start_pin is an OutletWidget and end_pin is an InletWidget, or vice versa\n  669: \t\tif isinstance(start_pin, OutletWidget) and isinstance(end_pin, InletWidget):\n  670  \t\t\treturn True\n  671: \t\telif isinstance(start_pin, InletWidget) and isinstance(end_pin, OutletWidget):\n  672  \t\t\treturn True\n  673  \n  ...\n  685  \t\tif pin and self.canConnect(start_pin, pin):\n  686  \t\t\t\"\"\"establish connection\"\"\"\n  687: \t\t\tif isinstance(self.interactive_edge_fixed_pin, InletWidget):\n  688  \t\t\t\toutlet = cast(OutletWidget, pin)\n  689  \t\t\t\tself.interactive_edge.setSourceOutlet(outlet)\n  690  \n  691: \t\t\telif isinstance(self.interactive_edge_fixed_pin, OutletWidget):\n  692  \t\t\t\tinlet = cast(InletWidget, pin)\n  693  \t\t\t\tself.interactive_edge.setTargetInlet(inlet)\n  ...\n  736  \t\t\tgraphscene = cast(DAGScene, self.scene())\n  737  \t\t\tfor item in graphscene.items():\n  738: \t\t\t\tif isinstance(item, NodeWidget):\n  739  \t\t\t\t\tnode = cast(NodeWidget, item)\n  740  \t\t\t\t\tif node.orientation() == Qt.Orientation.Vertical:\n  ...\n  746  \t\t\tgraphscene = cast(DAGScene, self.scene())\n  747  \t\t\tfor item in graphscene.items():\n  748: \t\t\t\tif isinstance(item, NodeWidget):\n  749  \t\t\t\t\tnode = cast(NodeWidget, item)\n  750  \t\t\t\t\tif node.orientation() == Qt.Orientation.Vertical:\n  ...\n  762  \n  763  \t\tdef deleteSelectedNodes(self):\n  764: \t\t\tfor node in (item for item in self.scene().selectedItems() if isinstance(item, NodeWidget)):\n  765  \t\t\t\tnode.destroy()\n  766  \n  ...\n  807  \n  808  \t# set nodes orientation\n  809: \tfor node in (item for item in graphscene.items() if isinstance(item, NodeWidget)):\n  810  \t\tnode.setOrientation(Qt.Orientation.Vertical)\n  811  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_columnbased.py:\n   45  \n   46  \tdef __eq__(self, value: object, /) -> bool:\n   47: \t\tif isinstance(value, NodeRef):\n   48  \t\t\treturn self._index == value._index\n   49  \t\telse:\n   ..\n   71  \n   72  \tdef __eq__(self, value: object, /) -> bool:\n   73: \t\tif isinstance(value, EdgeRef):\n   74  \t\t\treturn self._index == value._index\n   75  \t\telse:\n   ..\n  100  \n  101  \tdef __eq__(self, value: object, /) -> bool:\n  102: \t\tif isinstance(value, InletRef):\n  103  \t\t\treturn (\n  104  \t\t\t\tself._index.row() == value._index.row()\n  ...\n  130  \n  131  \tdef __eq__(self, value: object, /) -> bool:\n  132: \t\tif isinstance(value, OutletRef):\n  133  \t\t\treturn self._index == value._index\n  134  \t\telse:\n  ...\n  284  \n  285  \tdef addNode(self, name:str, posx:int, posy:int)->NodeRef:\n  286: \t\tif not isinstance(name, str):\n  287  \t\t\traise TypeError(f\"'name' must be s tring, got: '{name}'\")\n  288: \t\tif not isinstance(posx, int) or not isinstance(posy, int):\n  289  \t\t\traise TypeError(f\"'posx and posy' must be s tring, got: '{posx}', '{posy}\")\n  290  \n  ...\n  336  \t\toutlet_id = self._outletTable.data(outlet._index, Qt.ItemDataRole.DisplayRole)\n  337  \t\tinlet_id = self._inletTable.data(inlet._index, Qt.ItemDataRole.DisplayRole)\n  338: \t\tassert isinstance(outlet_id, str)\n  339: \t\tassert isinstance(inlet_id, str)\n  340: \t\tassert isinstance(unique_id, str)\n  341  \n  342  \t\tid_item =        QStandardItem()\n  ...\n  352  \n  353  \tdef removeNodes(self, nodes_to_remove:List[NodeRef]):\n  354: \t\tassert all( isinstance(node, NodeRef) for node in nodes_to_remove )\n  355  \t\tassert all( node.isValid() for node in nodes_to_remove )\n  356  \n  ...\n  374  \tdef removeOutlets(self, outlets_to_remove:List[OutletRef]):\n  375  \t\t# collect edges to be removed\n  376: \t\tassert all( isinstance(outlet, OutletRef) for outlet in outlets_to_remove )\n  377  \n  378  \t\tedges_to_remove = []\n  ...\n  386  \n  387  \tdef getOutletEdges(self, outlet:OutletRef)->List[EdgeRef]:\n  388: \t\tassert isinstance(outlet, OutletRef) and outlet.isValid()\n  389  \t\t\n  390  \t\toutlet_id = self._outletTable.data(outlet._index)\n  ...\n  395  \n  396  \tdef getInletEdges(self, inlet:InletRef)->List[EdgeRef]:\n  397: \t\tassert isinstance(inlet, InletRef) and inlet.isValid()\n  398  \n  399  \t\tinlet_id = self._inletTable.data(inlet._index)\n  ...\n  404  \n  405  \tdef getOutletOwner(self, outlet: OutletRef)->NodeRef:\n  406: \t\tassert isinstance(outlet, OutletRef) and outlet.isValid()\n  407  \n  408  \t\tnode_id:str = self._outletTable.data(outlet._index.sibling(outlet._index.row(), GraphModel.OutletDataColumn.Owner), Qt.ItemDataRole.DisplayRole)\n  ...\n  415  \tdef removeInlets(self, inlets_to_remove:List[InletRef]):\n  416  \t\t# collect edges to be removed\n  417: \t\tassert all( isinstance(inlet, InletRef) for inlet in inlets_to_remove ), f\"got: {inlets_to_remove}\"\n  418  \t\tassert all( inlet.isValid() for inlet in inlets_to_remove)\n  419  \n  ...\n  429  \tdef removeEdges(self, edges_to_remove:List[EdgeRef]):\n  430  \t\t# Remove the rows from the GraphModel (starting from the last one, to avoid shifting indices)\n  431: \t\tassert all( isinstance(edge, EdgeRef) for edge in edges_to_remove )\n  432  \n  433  \t\tfor edge in sorted(edges_to_remove, key=lambda edge: edge._index.row(), reverse=True):\n  ...\n  435  \n  436  \tdef getNodeData(self, node:NodeRef, attr:NodeAttribute|str):\n  437: \t\tassert isinstance(node, NodeRef) and node.isValid(), f\"got: {node}\"\n  438  \n  439  \t\tdef findColumn(label)->int:\n  ...\n  459  \n  460  \tdef setNodeData(self, node:NodeRef, value, attr:NodeAttribute|str):\n  461: \t\tassert isinstance(node, NodeRef) and node.isValid(), f\"got: {node}\"\n  462  \n  463  \t\tdef findColumn(label)->int:\n  ...\n  471  \t\tmatch attr:\n  472  \t\t\tcase NodeAttribute.Id: #id\n  473: \t\t\t\tassert isinstance(value, str)\n  474  \t\t\t\tself._nodeTable.setData(node._index.sibling(node._index.row(), findColumn(NodeAttribute.Id)), value, Qt.ItemDataRole.DisplayRole)\n  475  \t\t\tcase NodeAttribute.Name: #name\n  476: \t\t\t\tassert isinstance(value, str)\n  477  \t\t\t\tself._nodeTable.setData(node._index.sibling(node._index.row(), findColumn(NodeAttribute.Name)), value, Qt.ItemDataRole.DisplayRole)\n  478  \t\t\tcase NodeAttribute.LocationX: #\"posx\":\n  479: \t\t\t\tassert isinstance(value, int)\n  480  \t\t\t\tself._nodeTable.setData(node._index.sibling(node._index.row(), findColumn(NodeAttribute.LocationX)), value, Qt.ItemDataRole.DisplayRole)\n  481  \t\t\tcase NodeAttribute.LocationY: #\"posy\":\n  482: \t\t\t\tassert isinstance(value, int)\n  483  \t\t\t\tself._nodeTable.setData(node._index.sibling(node._index.row(), findColumn(NodeAttribute.LocationY)), value, Qt.ItemDataRole.DisplayRole)\n  484  \t\t\tcase _:\n  ...\n  492  \n  493  \tdef getInletData(self, inlet:InletRef, attr:InletAttribute):\n  494: \t\tassert isinstance(inlet, InletRef) and inlet.isValid()\n  495  \n  496  \t\tmatch attr:\n  ...\n  503  \n  504  \tdef setInletData(self, inlet: InletRef, value, attr:InletAttribute):\n  505: \t\tassert isinstance(inlet, InletRef) and inlet.isValid()\n  506  \n  507  \t\tmatch attr:\n  ...\n  514  \n  515  \tdef getOutletData(self, outlet:OutletRef, attr:OutletAttribute):\n  516: \t\tassert isinstance(outlet, OutletRef) and outlet.isValid()\n  517  \n  518  \t\tmatch attr:\n  ...\n  525  \n  526  \tdef setOutletData(self, outlet: OutletRef, value, attr:OutletAttribute):\n  527: \t\tassert isinstance(outlet, OutletRef) and outlet.isValid()\n  528  \n  529  \t\tmatch attr:\n  ...\n  536  \n  537  \tdef getEdgeData(self, edge:EdgeRef, attr:EdgeAttribute):\n  538: \t\tassert isinstance(edge, EdgeRef)\n  539  \n  540  \t\tmatch attr:\n  ...\n  545  \n  546  \tdef setEdgeData(self, edge:EdgeRef, value, attr:EdgeAttribute):\n  547: \t\tassert isinstance(edge, EdgeRef)\n  548  \n  549  \t\tmatch attr:\n  550  \t\t\tcase EdgeAttribute.Id: #Id\n  551: \t\t\t\tif not isinstance(value, str):\n  552  \t\t\t\t\traise ValueError(f\"id must be a string, got: {value}\")\n  553  \t\t\t\treturn self._edgeTable.setData(edge._index.sibling(edge._index.row(), GraphModel.EdgeDataColumn.Id), value, Qt.ItemDataRole.DisplayRole)\n  ...\n  556  \n  557  \tdef getNodeInlets(self, node:NodeRef)->List[InletRef]:\n  558: \t\tassert isinstance(node, NodeRef)\n  559  \n  560  \t\tnode_id = self._nodeTable.data(node._index.sibling(node._index.row(), GraphModel.NodeDataColumn.Id))\n  ...\n  565  \n  566  \tdef getNodeOutlets(self, node:NodeRef)->List[OutletRef]:\n  567: \t\tassert isinstance(node, NodeRef)\n  568  \n  569  \t\tnode_id = self._nodeTable.data(node._index.sibling(node._index.row(), GraphModel.NodeDataColumn.Id))\n  ...\n  574  \n  575  \tdef getInletOwner(self, inlet:InletRef)->NodeRef:\n  576: \t\tassert isinstance(inlet, InletRef) and inlet.isValid()\n  577  \n  578  \t\tnode_id:str = self._inletTable.data(inlet._index.sibling(inlet._index.row(), GraphModel.InletDataColumn.Owner), Qt.ItemDataRole.DisplayRole)\n  ...\n  584  \n  585  \tdef getEdgeSource(self, edge: EdgeRef)->OutletRef:\n  586: \t\tassert isinstance(edge, EdgeRef)\n  587  \n  588  \t\toutlet_id:str = self._edgeTable.data(edge._index.sibling(edge._index.row(), GraphModel.EdgeDataColumn.SourceOutlet))\n  ...\n  594  \n  595  \tdef getEdgeTarget(self, edge:EdgeRef)->InletRef:\n  596: \t\tassert isinstance(edge, EdgeRef)\n  597  \n  598  \t\tinlet_id:str = self._edgeTable.data(edge._index.sibling(edge._index.row(), GraphModel.EdgeDataColumn.TargetInlet), Qt.ItemDataRole.DisplayRole)\n  599: \t\tassert isinstance(inlet_id, str), f\"got: {inlet_id}\"\n  600  \t\ttarget_inlets = [InletRef(idx.siblingAtColumn(GraphModel.InletDataColumn.Id), self) for idx in self._inletTable.match(\n  601  \t\t\tself._inletTable.index(0, GraphModel.InletDataColumn.Id), Qt.ItemDataRole.DisplayRole, inlet_id, 1, Qt.MatchFlag.MatchExactly\n  ...\n  605  \n  606  \tdef getSourceNodes(self, node:NodeRef):\n  607: \t\tassert isinstance(node, NodeRef)\n  608  \t\tassert node._index.model() == self._nodeTable\n  609  \t\tassert node._index.column() == 0\n  ...\n  616  \n  617  \tdef getTargetNodes(self, node:NodeRef):\n  618: \t\tassert isinstance(node, NodeRef)\n  619  \t\tassert node._index.model() == self._nodeTable\n  620  \t\tassert node._index.column() == GraphModel.NodeDataColumn.Id\n  ...\n  629  \t\t\"\"\"Yield all root nodes (nodes without outlets) in the graph.\"\"\"\n  630  \t\tdef hasTargets(node:NodeRef):\n  631: \t\t\tassert isinstance(node, NodeRef)\n  632  \t\t\tassert node.isValid()\n  633  \t\t\treturn len(list(self.getTargetNodes(node))) > 0\n  ...\n  642  \t\tdef dfs_visit(node:NodeRef):\n  643  \t\t\t\"\"\"Recursive helper function to perform DFS.\"\"\"\n  644: \t\t\tassert isinstance(node, NodeRef)\n  645  \t\t\tassert node.isValid()\n  646  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_databased.py:\n   19  \n   20  \tdef __eq__(self, other: object, /) -> bool:\n   21: \t\tif isinstance(other, NodeRef):\n   22  \t\t\treturn self._graph == other._graph and self._index == other._index\n   23  \t\telse:\n   ..\n   43  \n   44  \tdef __eq__(self, other: object, /) -> bool:\n   45: \t\tif isinstance(other, EdgeRef):\n   46  \t\t\treturn self._graph == other._graph and self._index == other._index\n   47  \t\telse:\n   ..\n   67  \n   68  \tdef __eq__(self, other: object, /) -> bool:\n   69: \t\tif isinstance(other, InletRef):\n   70  \t\t\treturn self._graph == other._graph and self._index == other._index\n   71  \t\telse:\n   ..\n   91  \n   92  \tdef __eq__(self, other: object, /) -> bool:\n   93: \t\tif isinstance(other, OutletRef):\n   94  \t\t\treturn self._graph == other._graph and self._index == other._index\n   95  \t\telse:\n   ..\n  255  \n  256  \tdef addEdge(self, outlet:OutletRef, inlet:InletRef, /, **props)->EdgeRef:\n  257: \t\tassert isinstance(outlet, OutletRef)\n  258: \t\tassert isinstance(inlet, InletRef)\n  259  \t\tassert inlet.isValid()\n  260  \t\tassert outlet.isValid()\n  ...\n  281  \t# DELETE\n  282  \tdef removeNodes(self, nodes_to_remove:List[NodeRef]):\n  283: \t\tassert all( isinstance(node, NodeRef) for node in nodes_to_remove )\n  284  \t\tassert all( node.isValid() for node in nodes_to_remove )\n  285  \n  ...\n  305  \tdef removeOutlets(self, outlets_to_remove:List[OutletRef]):\n  306  \t\t# collect edges to be removed\n  307: \t\tassert all( isinstance(outlet, OutletRef) for outlet in outlets_to_remove )\n  308  \n  309  \t\tedges_to_remove = []\n  ...\n  322  \tdef removeInlets(self, inlets_to_remove:List[InletRef]):\n  323  \t\t# collect edges to be removed\n  324: \t\tassert all( isinstance(inlet, InletRef) for inlet in inlets_to_remove ), f\"got: {inlets_to_remove}\"\n  325  \t\tassert all( inlet.isValid() for inlet in inlets_to_remove)\n  326  \n  ...\n  340  \tdef removeEdges(self, edges_to_remove:List[EdgeRef]):\n  341  \t\t# Remove the rows from the GraphModel (starting from the last one, to avoid shifting indices)\n  342: \t\tassert all( isinstance(edge, EdgeRef) for edge in edges_to_remove )\n  343  \n  344  \t\tself.edgesAboutToBeRemoved.emit(edges_to_remove)\n  ...\n  353  \t# RELATIONS\n  354  \tdef getNodeInlets(self, node:NodeRef)->Iterable[InletRef]:\n  355: \t\tassert isinstance(node, NodeRef)\n  356  \t\tassert node.isValid()\n  357  \n  ...\n  360  \n  361  \tdef getNodeOutlets(self, node:NodeRef)->Iterable[OutletRef]:\n  362: \t\tassert isinstance(node, NodeRef)\n  363  \t\tassert node.isValid()\n  364  \n  ...\n  367  \n  368  \tdef getOutletEdges(self, outlet:OutletRef)->Iterable[EdgeRef]:\n  369: \t\tassert isinstance(outlet, OutletRef)\n  370  \t\tassert outlet.isValid()\n  371  \t\t\n  ...\n  374  \n  375  \tdef getInletEdges(self, inlet:InletRef)->Iterable[EdgeRef]:\n  376: \t\tassert isinstance(inlet, InletRef)\n  377  \t\tassert inlet.isValid()\n  378  \n  ...\n  381  \n  382  \tdef getOutletOwner(self, outlet: OutletRef)->NodeRef:\n  383: \t\tassert isinstance(outlet, OutletRef)\n  384  \t\tassert outlet.isValid()\n  385  \n  ...\n  387  \n  388  \tdef getInletOwner(self, inlet:InletRef)->NodeRef:\n  389: \t\tassert isinstance(inlet, InletRef)\n  390  \t\tassert inlet.isValid()\n  391  \n  ...\n  393  \n  394  \tdef getEdgeSource(self, edge: EdgeRef)->OutletRef:\n  395: \t\tassert isinstance(edge, EdgeRef)\n  396  \t\tassert edge.isValid()\n  397  \n  ...\n  399  \n  400  \tdef getEdgeTarget(self, edge:EdgeRef)->InletRef:\n  401: \t\tassert isinstance(edge, EdgeRef)\n  402  \t\tassert edge.isValid()\n  403  \n  ...\n  405  \n  406  \tdef getSourceNodes(self, node:NodeRef):\n  407: \t\tassert isinstance(node, NodeRef)\n  408  \t\tassert node.isValid()\n  409  \n  ...\n  415  \n  416  \tdef getTargetNodes(self, node:NodeRef):\n  417: \t\tassert isinstance(node, NodeRef)\n  418  \t\tassert node.isValid()\n  419  \n  ...\n  428  \t\t\"\"\"Yield all root nodes (nodes without outlets) in the graph.\"\"\"\n  429  \t\tdef hasTargets(node:NodeRef):\n  430: \t\t\tassert isinstance(node, NodeRef)\n  431  \t\t\tassert node.isValid()\n  432  \t\t\treturn len(list(self.getTargetNodes(node))) > 0\n  ...\n  441  \t\tdef dfs_visit(node:NodeRef):\n  442  \t\t\t\"\"\"Recursive helper function to perform DFS.\"\"\"\n  443: \t\t\tassert isinstance(node, NodeRef)\n  444  \t\t\tassert node.isValid()\n  445  \n  ...\n  458  \t# PROPERTIES\n  459  \tdef getNodeProperty(self, node:NodeRef, /, prop:str)->Any:\n  460: \t\tassert isinstance(node, NodeRef)\n  461  \t\tassert node.isValid()\n  462  \n  ...\n  464  \n  465  \tdef setNodeProperty(self, node:NodeRef, /, **props)->None:\n  466: \t\tassert isinstance(node, NodeRef)\n  467  \t\tassert node.isValid()\n  468  \n  ...\n  478  \n  479  \tdef getInletProperty(self, inlet:InletRef, /, prop:str)->Any:\n  480: \t\tassert isinstance(inlet, InletRef)\n  481  \t\tassert inlet.isValid()\n  482  \n  ...\n  484  \n  485  \tdef setInletProperty(self, inlet: InletRef, /, **props)->None:\n  486: \t\tassert isinstance(inlet, InletRef)\n  487  \t\tassert inlet.isValid()\n  488  \n  ...\n  498  \n  499  \tdef getOutletProperty(self, outlet:OutletRef, /, prop:str)->Any:\n  500: \t\tassert isinstance(outlet, OutletRef)\n  501  \t\tassert outlet.isValid()\n  502  \n  ...\n  504  \n  505  \tdef setOutletProperty(self, outlet: OutletRef, /, **props)->None:\n  506: \t\tassert isinstance(outlet, OutletRef)\n  507  \t\tassert outlet.isValid()\n  508  \n  ...\n  518  \n  519  \tdef getEdgeProperty(self, edge:EdgeRef, /, prop:str)->Any:\n  520: \t\tassert isinstance(edge, EdgeRef)\n  521  \t\tassert edge.isValid()\n  522  \n  ...\n  524  \n  525  \tdef setEdgeProperty(self, edge:EdgeRef, /, **props)->None:\n  526: \t\tassert isinstance(edge, EdgeRef)\n  527  \t\tassert edge.isValid()\n  528  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphmodel_rolebased.py:\n  185  \n  186  \tdef addNode(self, name:str, posx:int, posy:int)->NodeIndex:\n  187: \t\tif not isinstance(name, str):\n  188  \t\t\traise TypeError(f\"'name' must be s tring, got: '{name}'\")\n  189: \t\tif not isinstance(posx, int) or not isinstance(posy, int):\n  190  \t\t\traise TypeError(f\"'posx and posy' must be s tring, got: '{posx}', '{posy}\")\n  191  \n  ...\n  241  \n  242  \tdef removeNodes(self, nodes_to_remove:List[NodeIndex]):\n  243: \t\tassert all( isinstance(node, NodeIndex) for node in nodes_to_remove )\n  244  \t\tassert all( node.column() == 0 for node in nodes_to_remove)\n  245  \n  ...\n  262  \tdef removeOutlets(self, outlets_to_remove:List[OutletIndex]):\n  263  \t\t# collect edges to be removed\n  264: \t\tassert all( isinstance(outlet, OutletIndex) for outlet in outlets_to_remove )\n  265  \t\tassert all( outlet.column()==0 for outlet in outlets_to_remove )\n  266  \n  ...\n  276  \tdef removeInlets(self, inlets_to_remove:List[InletIndex]):\n  277  \t\t# collect edges to be removed\n  278: \t\tassert all( isinstance(inlet, InletIndex) for inlet in inlets_to_remove ), f\"got: {inlets_to_remove}\"\n  279  \t\tassert all( inlet.column()==0 for inlet in inlets_to_remove)\n  280  \n  ...\n  290  \tdef removeEdges(self, edges_to_remove:List[EdgeIndex]):\n  291  \t\t# Remove the rows from the GraphModel (starting from the last one, to avoid shifting indices)\n  292: \t\tassert all( isinstance(edge, EdgeIndex) for edge in edges_to_remove )\n  293  \t\tassert all( edge.column()==0 for edge in edges_to_remove )\n  294  \n  ...\n  297  \n  298  \tdef getNodeData(self, node:NodeIndex, role:NodeDataRole):\n  299: \t\tassert isinstance(node, NodeIndex) and node.isValid(), f\"got: {node}\"\n  300  \t\tassert node.column() == 0\n  301  \n  ...\n  311  \n  312  \tdef setNodeData(self, node:NodeIndex, value, role:NodeDataRole):\n  313: \t\tassert isinstance(node, NodeIndex) and node.isValid(), f\"got: {node}\"\n  314  \t\tassert node.column() == 0\n  315  \n  316  \t\tmatch role:\n  317  \t\t\tcase NodeDataRole.IdRole:\n  318: \t\t\t\tassert isinstance(value, str)\n  319  \t\t\t\tself.nodeList.setData(node, value, NodeDataRole.IdRole)\n  320  \t\t\tcase NodeDataRole.NameRole:\n  321: \t\t\t\tassert isinstance(value, str)\n  322  \t\t\t\tself.nodeList.setData(node, value, NodeDataRole.NameRole)\n  323  \t\t\tcase NodeDataRole.LocationRole:\n  324: \t\t\t\tassert isinstance(value, tuple)\n  325  \t\t\t\tself.nodeList.setData(node, value, NodeDataRole.LocationRole)\n  326  \t\t\tcase _:\n  ...\n  328  \n  329  \tdef getInletData(self, inlet:InletIndex, role:InletDataRole):\n  330: \t\tassert isinstance(inlet, InletIndex) and inlet.isValid()\n  331  \t\tassert inlet.model() == self.inletList\n  332  \t\tassert inlet.column() == 0\n  ...\n  341  \n  342  \tdef setInletData(self, inlet: InletIndex, value, role:InletDataRole):\n  343: \t\tassert isinstance(inlet, InletIndex) and inlet.isValid()\n  344  \t\tassert inlet.model() == self.inletList\n  345  \t\tassert inlet.column() == 0\n  ...\n  354  \n  355  \tdef getOutletData(self, outlet:OutletIndex, role:OutletDataRole):\n  356: \t\tassert isinstance(outlet, OutletIndex) and outlet.isValid()\n  357  \t\tassert outlet.model() == self.outletList\n  358  \t\tassert outlet.column() == 0\n  ...\n  367  \n  368  \tdef setOutletData(self, outlet: OutletIndex, value, role:OutletDataRole):\n  369: \t\tassert isinstance(outlet, OutletIndex) and outlet.isValid()\n  370  \t\tassert outlet.model() == self.outletList\n  371  \t\tassert outlet.column() == 0\n  ...\n  380  \n  381  \tdef getEdgeData(self, edge:EdgeIndex, role:EdgeDataRole):\n  382: \t\tassert isinstance(edge, EdgeIndex)\n  383  \t\tassert edge.model() == self.edgeList\n  384  \t\tassert edge.column() == 0\n  ...\n  391  \n  392  \tdef setEdgeData(self, edge:EdgeIndex, value, role:EdgeDataRole):\n  393: \t\tassert isinstance(edge, EdgeIndex)\n  394  \t\tassert edge.model() == self.edgeList\n  395  \t\tassert edge.column() == 0\n  ...\n  397  \t\tmatch role:\n  398  \t\t\tcase EdgeDataRole.IdRole:\n  399: \t\t\t\tif not isinstance(value, str):\n  400  \t\t\t\t\traise ValueError(f\"id must be a string, got: {value}\")\n  401  \t\t\t\treturn self.edgeList.setData(edge, value, EdgeDataRole.IdRole)\n  ...\n  404  \n  405  \tdef getNodeInlets(self, node:NodeIndex)->List[InletIndex]:\n  406: \t\tassert isinstance(node, NodeIndex)\n  407  \t\tassert node.model() == self.nodeList\n  408  \t\tassert node.column() == 0\n  ...\n  415  \n  416  \tdef getNodeOutlets(self, node:NodeIndex)->List[OutletIndex]:\n  417: \t\tassert isinstance(node, NodeIndex)\n  418  \t\tassert node.model() == self.nodeList\n  419  \t\tassert node.column() == 0\n  ...\n  426  \n  427  \tdef getInletOwner(self, inlet:InletIndex)->NodeIndex:\n  428: \t\tassert isinstance(inlet, InletIndex) and inlet.isValid()\n  429  \t\tassert inlet.model() == self.inletList\n  430  \t\tassert inlet.column() == 0\n  ...\n  438  \n  439  \tdef setInletOwner(self, inlet:InletIndex, node:NodeIndex):\n  440: \t\tassert isinstance(inlet, InletIndex) and inlet.isValid()\n  441  \t\tassert inlet.model() == self.inletList\n  442  \t\tassert inlet.column() == 0\n  443  \n  444: \t\tif not isinstance(node, NodeIndex):\n  445  \t\t\traise ValueError(f\"Value must be a node, got: {node}\")\n  446  \n  ...\n  449  \n  450  \tdef getInletEdges(self, inlet:InletIndex)->List[EdgeIndex]:\n  451: \t\tassert isinstance(inlet, InletIndex) and inlet.isValid()\n  452  \t\tassert inlet.model() == self.inletList\n  453  \t\tassert inlet.column() == 0\n  ...\n  460  \n  461  \tdef getOutletOwner(self, outlet: OutletIndex)->NodeIndex:\n  462: \t\tassert isinstance(outlet, OutletIndex) and outlet.isValid()\n  463  \t\tassert outlet.model() == self.outletList\n  464  \t\tassert outlet.column() == 0\n  ...\n  472  \n  473  \tdef setOutletOwner(self, outlet:OutletIndex, node:NodeIndex):\n  474: \t\tassert isinstance(outlet, OutletIndex) and outlet.isValid()\n  475  \t\tassert outlet.model() == self.outletList\n  476  \t\tassert outlet.column() == 0\n  477  \n  478: \t\tif not isinstance(node, NodeIndex):\n  479  \t\t\traise ValueError(f\"Value must be a node, got: {node}\")\n  480  \n  ...\n  483  \n  484  \tdef getOutletEdges(self, outlet:OutletIndex)->List[EdgeIndex]:\n  485: \t\tassert isinstance(outlet, OutletIndex) and outlet.isValid()\n  486  \t\tassert outlet.model() == self.outletList\n  487  \t\tassert outlet.column() == 0\n  ...\n  494  \n  495  \tdef getEdgeSource(self, edge: EdgeIndex)->OutletIndex:\n  496: \t\tassert isinstance(edge, EdgeIndex)\n  497  \t\tassert edge.model() == self.edgeList\n  498  \t\tassert edge.column() == 0\n  ...\n  506  \n  507  \tdef setEdgeSource(self, edge:EdgeIndex, outlet:OutletIndex):\n  508: \t\tassert isinstance(edge, EdgeIndex) and edge.isValid()\n  509  \t\tassert edge.model() == self.edgeList\n  510  \t\tassert edge.column() == 0\n  511  \n  512: \t\tif not isinstance(outlet, OutletIndex):\n  513  \t\t\traise ValueError(f\"Value must be an outlet, got: {value}\")\n  514  \n  ...\n  517  \n  518  \tdef getEdgeTarget(self, edge:EdgeIndex)->InletIndex:\n  519: \t\tassert isinstance(edge, EdgeIndex)\n  520  \t\tassert edge.model() == self.edgeList\n  521  \t\tassert edge.column() == 0\n  522  \n  523  \t\tinlet_id:str = self.edgeList.data(edge, EdgeDataRole.TargetInletIdRole)\n  524: \t\tassert isinstance(inlet_id, str)\n  525  \t\ttarget_inlets = [InletIndex(idx) for idx in self.inletList.match(\n  526  \t\t\tself.inletList.index(0,0), InletDataRole.IdRole, inlet_id, 1, Qt.MatchFlag.MatchExactly\n  ...\n  530  \n  531  \tdef setEdgeTarget(self, edge:EdgeIndex, inlet:InletIndex):\n  532: \t\tassert isinstance(edge, EdgeIndex) and edge.isValid()\n  533  \t\tassert edge.model() == self.edgeList\n  534  \t\tassert edge.column() == 0\n  535  \n  536: \t\tif not isinstance(inlet, InletIndex):\n  537  \t\t\traise ValueError(f\"Value must be an inlet, got: {value}\")\n  538  \n  539  \t\tinlet_id:str = self.inletList.data(inlet, InletDataRole.IdRole)\n  540: \t\tassert isinstance(inlet_id, str)\n  541  \t\tself.edgeList.setData(edge, inlet_id, EdgeDataRole.TargetInletIdRole)\n  542  \n  543  \tdef getSourceNodes(self, node:NodeIndex):\n  544: \t\tassert isinstance(node, NodeIndex)\n  545  \t\tassert node.model() == self.nodeList\n  546  \t\tassert node.column() == 0\n  ...\n  553  \n  554  \tdef getTargetNodes(self, node:NodeIndex):\n  555: \t\tassert isinstance(node, NodeIndex)\n  556  \t\tassert node.model() == self.nodeList\n  557  \t\tassert node.column() == 0\n  ...\n  566  \t\t\"\"\"Yield all root nodes (nodes without outlets) in the graph.\"\"\"\n  567  \t\tdef hasTargets(node:NodeIndex):\n  568: \t\t\tassert isinstance(node, NodeIndex)\n  569  \t\t\tassert node.model() == self.nodeList\n  570  \t\t\tassert node.column() == 0\n  ...\n  581  \t\tdef dfs_visit(node:NodeIndex):\n  582  \t\t\t\"\"\"Recursive helper function to perform DFS.\"\"\"\n  583: \t\t\tassert isinstance(node, NodeIndex)\n  584  \t\t\tassert node.model() == self.nodeList\n  585  \t\t\tassert node.column() == 0\n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphview_columnbased.py:\n  301  \tdef __init__(self, source_pin_item:OutletItem|None, target_pin_item:InletItem|None, parent_graph:\"GraphView\"):\n  302  \t\tsuper().__init__(parent=None)\n  303: \t\tassert source_pin_item is None or isinstance(source_pin_item, OutletItem)\n  304: \t\tassert target_pin_item is None or isinstance(target_pin_item, InletItem)\n  305  \t\tself._source_pin_item = source_pin_item\n  306  \t\tself._target_pin_item = target_pin_item\n  ...\n  336  \n  337  \tdef setSourcePin(self, pin: OutletItem|None):\n  338: \t\tassert pin is None or isinstance(pin, OutletItem)\n  339  \n  340  \t\t# add or remove edge to pin edges for position update\n  ...\n  351  \n  352  \tdef setTargetPin(self, pin: InletItem|None):\n  353: \t\tassert pin is None or isinstance(pin, InletItem)\n  354  \n  355  \t\t# add or remove edge to pin edges for position update\n  ...\n  465  \t\t# \tedge_selection = []\n  466  \t\t# \tfor item in self.scene().selectedItems():\n  467: \t\t# \t\tif isinstance(item, NodeView):\n  468  \t\t# \t\t\tif item.persistent_node_index:\n  469  \t\t# \t\t\t\tnode = item.persistent_node_index\n  470  \t\t# \t\t\t\tif node:\n  471  \t\t# \t\t\t\t\tnode_selection.append(node)\n  472: \t\t# \t\tif isinstance(item, EdgeItem):\n  473  \t\t# \t\t\tif item.persistent_edge_index:\n  474  \t\t# \t\t\t\tedge = item.persistent_edge_index\n  ...\n  501  \t\t\"\"\"Returns the topmost pin at position pos, which is in viewport coordinates.\"\"\"\n  502  \t\tfor item in self.items(pos):\n  503: \t\t\tif isinstance(item, PinItem):\n  504  \t\t\t\treturn item\n  505  \t\treturn None\n  506  \n  507  \tdef initiateConnection(self, pin):\n  508: \t\tif isinstance(pin, OutletItem):\n  509  \t\t\tself.interactive_edge = EdgeItem(source_pin_item=pin, target_pin_item=None, parent_graph=self)\n  510  \t\t\tself.interactive_edge_start_pin = pin\n  511: \t\telif isinstance(pin, InletItem):\n  512  \t\t\tself.interactive_edge = EdgeItem(source_pin_item=None, target_pin_item=pin, parent_graph=self)\n  513  \t\t\tself.interactive_edge_start_pin = pin\n  ...\n  527  \n  528  \tdef moveConnection(self, pos:QPoint):\n  529: \t\tassert isinstance(pos, QPoint), f\"got: {pos}\"\n  530  \t\t# move free endpoint\n  531  \t\tline = self.interactive_edge.line()\n  532: \t\tif isinstance(self.interactive_edge_start_pin, OutletItem):\n  533  \t\t\tline.setP2(self.mapToScene(pos))\n  534: \t\telif isinstance(self.interactive_edge_start_pin, InletItem):\n  535  \t\t\tline.setP1(self.mapToScene(pos))\n  536  \t\tself.interactive_edge.setLine(line)\n  ...\n  538  \t\t# attach free endpoint to closeby pin\n  539  \t\tpinUnderMouse = self.pinAt(pos)\n  540: \t\tif isinstance(self.interactive_edge_start_pin, OutletItem) and isinstance(pinUnderMouse, InletItem):\n  541  \t\t\tself.interactive_edge.setTargetPin(pinUnderMouse)\n  542  \t\t\tself.interactive_edge.updatePosition()\n  543: \t\telif isinstance(self.interactive_edge_start_pin, InletItem) and isinstance(pinUnderMouse, OutletItem):\n  544  \t\t\tself.interactive_edge.setSourcePin(pinUnderMouse)\n  545  \t\t\tself.interactive_edge.updatePosition()\n  ...\n  552  \n  553  \t\tCanConnectPins = (\n  554: \t\t\tisinstance(start_pin, InletItem) \n  555: \t\t\tand isinstance(end_pin, OutletItem)\n  556  \t\t) or (\n  557: \t\t\tisinstance(start_pin, OutletItem) \n  558: \t\t\tand isinstance(end_pin, InletItem)\n  559  \t\t)\n  560  \n  ...\n  569  \t\t\t\t\"\"\"modify edge\"\"\"\n  570  \t\t\t\tedge_index:EdgeRef = persistent_edge_index\n  571: \t\t\t\tif isinstance(end_pin, OutletItem) and self.item_to_index_map[end_pin]:\n  572  \t\t\t\t\toutlet = cast(OutletRef, self.item_to_index_map[end_pin])\n  573  \t\t\t\t\tself.graph_model.setEdgeSource(edge_index, outlet)\n  574: \t\t\t\telif isinstance(end_pin, InletItem) and self.item_to_index_map[end_pin]:\n  575  \t\t\t\t\tinlet = cast(InletRef, self.item_to_index_map[end_pin])\n  576  \t\t\t\t\tself.graph_model.setEdgeTarget(edge_index, inlet)\n  ...\n  579  \t\t\t\tinlet_item = cast(InletItem, end_pin)\n  580  \t\t\t\toutlet_item = cast(OutletItem, start_pin)\n  581: \t\t\t\tif isinstance(end_pin, OutletItem) and isinstance(start_pin, InletItem):\n  582  \t\t\t\t\toutlet_item, inlet_item = inlet_item, outlet_item\n  583  \n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphview_databased.py:\n  302  \tdef __init__(self, source_pin_item:OutletGraphicsItem|None, target_pin_item:InletGraphicsItem|None, parent_graph:\"GraphView\"):\n  303  \t\tsuper().__init__(parent=None)\n  304: \t\tassert source_pin_item is None or isinstance(source_pin_item, OutletGraphicsItem)\n  305: \t\tassert target_pin_item is None or isinstance(target_pin_item, InletGraphicsItem)\n  306  \t\tself._source_pin_item = source_pin_item\n  307  \t\tself._target_pin_item = target_pin_item\n  ...\n  353  \n  354  \tdef setSourcePin(self, pin: OutletGraphicsItem|None):\n  355: \t\tassert pin is None or isinstance(pin, OutletGraphicsItem)\n  356  \n  357  \t\t# add or remove edge to pin edges for position update\n  ...\n  368  \n  369  \tdef setTargetPin(self, pin: InletGraphicsItem|None):\n  370: \t\tassert pin is None or isinstance(pin, InletGraphicsItem)\n  371  \n  372  \t\t# add or remove edge to pin edges for position update\n  ...\n  482  \t\t# \tedge_selection = []\n  483  \t\t# \tfor item in self.scene().selectedItems():\n  484: \t\t# \t\tif isinstance(item, NodeView):\n  485  \t\t# \t\t\tif item.persistent_node_index:\n  486  \t\t# \t\t\t\tnode = item.persistent_node_index\n  487  \t\t# \t\t\t\tif node:\n  488  \t\t# \t\t\t\t\tnode_selection.append(node)\n  489: \t\t# \t\tif isinstance(item, EdgeGraphicsItem):\n  490  \t\t# \t\t\tif item.persistent_edge_index:\n  491  \t\t# \t\t\t\tedge = item.persistent_edge_index\n  ...\n  518  \t\t\"\"\"Returns the topmost pin at position pos, which is in viewport coordinates.\"\"\"\n  519  \t\tfor item in self.items(pos):\n  520: \t\t\tif isinstance(item, PinGraphicsItem):\n  521  \t\t\t\treturn item\n  522  \t\treturn None\n  523  \n  524  \tdef initiateConnection(self, pin):\n  525: \t\tif isinstance(pin, OutletGraphicsItem):\n  526  \t\t\tself.interactive_edge = EdgeGraphicsItem(source_pin_item=pin, target_pin_item=None, parent_graph=self)\n  527  \t\t\tself.interactive_edge_start_pin = pin\n  528: \t\telif isinstance(pin, InletGraphicsItem):\n  529  \t\t\tself.interactive_edge = EdgeGraphicsItem(source_pin_item=None, target_pin_item=pin, parent_graph=self)\n  530  \t\t\tself.interactive_edge_start_pin = pin\n  ...\n  544  \n  545  \tdef moveConnection(self, pos:QPoint):\n  546: \t\tassert isinstance(pos, QPoint), f\"got: {pos}\"\n  547  \t\t# move free endpoint\n  548  \t\tline = self.interactive_edge.line()\n  549: \t\tif isinstance(self.interactive_edge_start_pin, OutletGraphicsItem):\n  550  \t\t\tline.setP2(self.mapToScene(pos))\n  551: \t\telif isinstance(self.interactive_edge_start_pin, InletGraphicsItem):\n  552  \t\t\tline.setP1(self.mapToScene(pos))\n  553  \t\tself.interactive_edge.setLine(line)\n  ...\n  555  \t\t# attach free endpoint to closeby pin\n  556  \t\tpinUnderMouse = self.pinAt(pos)\n  557: \t\tif isinstance(self.interactive_edge_start_pin, OutletGraphicsItem) and isinstance(pinUnderMouse, InletGraphicsItem):\n  558  \t\t\tself.interactive_edge.setTargetPin(pinUnderMouse)\n  559  \t\t\tself.interactive_edge.updatePosition()\n  560: \t\telif isinstance(self.interactive_edge_start_pin, InletGraphicsItem) and isinstance(pinUnderMouse, OutletGraphicsItem):\n  561  \t\t\tself.interactive_edge.setSourcePin(pinUnderMouse)\n  562  \t\t\tself.interactive_edge.updatePosition()\n  ...\n  569  \n  570  \t\tCanConnectPins = (\n  571: \t\t\tisinstance(start_pin, InletGraphicsItem) \n  572: \t\t\tand isinstance(end_pin, OutletGraphicsItem)\n  573  \t\t) or (\n  574: \t\t\tisinstance(start_pin, OutletGraphicsItem) \n  575: \t\t\tand isinstance(end_pin, InletGraphicsItem)\n  576  \t\t)\n  577  \n  ...\n  588  \t\t\t\tself.graph_model.removeEdges([edge_index])\n  589  \n  590: \t\t\t\tif isinstance(end_pin, OutletGraphicsItem) and isinstance(start_pin, InletGraphicsItem):\n  591  \t\t\t\t\toutlet = cast(OutletRef, self.item_to_index_map[end_pin])\n  592  \t\t\t\t\tinlet = cast(InletRef, self.item_to_index_map[start_pin])\n  593  \t\t\t\t\tself.graph_model.addEdge(outlet, inlet)\n  594  \n  595: \t\t\t\telif isinstance(end_pin, InletGraphicsItem) and isinstance(start_pin, OutletGraphicsItem):\n  596  \t\t\t\t\toutlet = cast(OutletRef, self.item_to_index_map[start_pin])\n  597  \t\t\t\t\tinlet = cast(InletRef, self.item_to_index_map[end_pin])\n  ...\n  605  \t\t\t\tinlet_item = cast(InletGraphicsItem, end_pin)\n  606  \t\t\t\toutlet_item = cast(OutletGraphicsItem, start_pin)\n  607: \t\t\t\tif isinstance(end_pin, OutletGraphicsItem) and isinstance(start_pin, InletGraphicsItem):\n  608  \t\t\t\t\toutlet_item, inlet_item = inlet_item, outlet_item\n  609  \n  ...\n  717  \n  718  \tdef handleEdgesRemoved(self, edges:Iterable[EdgeRef]):\n  719: \t\tassert all(isinstance(edge, EdgeRef) for edge in edges), f\"got: {edges}\"\n  720  \t\tfor edge in edges:\n  721  \t\t\tedge_item = cast(EdgeGraphicsItem, self.index_to_item_map[edge])\n\nC:\\dev\\src\\pylive\\pylive\\QtGraphEditor\\graphview_rolebased.py:\n   53  \tdef __init__(self, parent_node):\n   54  \t\tsuper().__init__(parent=parent_node)\n   55: \t\tassert isinstance(parent_node, NodeItem)\n   56  \t\tself.parent_node = parent_node\n   57  \t\tself.persistent_index:Optional[QModelIndex]=None\n   ..\n  330  \tdef __init__(self, source_pin_item:OutletItem|None, target_pin_item:InletItem|None, parent_graph:\"GraphView\"):\n  331  \t\tsuper().__init__(parent=None)\n  332: \t\tassert source_pin_item is None or isinstance(source_pin_item, OutletItem)\n  333: \t\tassert target_pin_item is None or isinstance(target_pin_item, InletItem)\n  334  \t\tself._source_pin_item = source_pin_item\n  335  \t\tself._target_pin_item = target_pin_item\n  ...\n  365  \n  366  \tdef setSourcePin(self, pin: OutletItem|None):\n  367: \t\tassert pin is None or isinstance(pin, OutletItem)\n  368  \n  369  \t\t# add or remove edge to pin edges for position update\n  ...\n  380  \n  381  \tdef setTargetPin(self, pin: InletItem|None):\n  382: \t\tassert pin is None or isinstance(pin, InletItem)\n  383  \n  384  \t\t# add or remove edge to pin edges for position update\n  ...\n  432  \t\t\t\t\tgraph:GraphModel = self.parent_graph.graph_model\n  433  \t\t\t\t\tedge_index = self.persistent_edge_index\n  434: \t\t\t\t\tassert isinstance(edge_index, EdgeIndex)\n  435  \t\t\t\t\tif value == 1:\n  436  \t\t\t\t\t\tedges_selectionmodel.select(edge_index, QItemSelectionModel.SelectionFlag.Select)\n  ...\n  517  \t\t\tedge_selection = []\n  518  \t\t\tfor item in self.scene().selectedItems():\n  519: \t\t\t\tif isinstance(item, NodeItem):\n  520  \t\t\t\t\tif item.persistent_node_index:\n  521  \t\t\t\t\t\tnode = item.persistent_node_index\n  522: \t\t\t\t\t\tassert isinstance(node, NodeIndex)\n  523  \t\t\t\t\t\tif node:\n  524  \t\t\t\t\t\t\tnode_selection.append(node)\n  525: \t\t\t\tif isinstance(item, EdgeItem):\n  526  \t\t\t\t\tif item.persistent_edge_index:\n  527  \t\t\t\t\t\tedge = item.persistent_edge_index\n  528: \t\t\t\t\t\tassert isinstance(edge, EdgeIndex)\n  529  \t\t\t\t\t\tif edge:\n  530  \t\t\t\t\t\t\tedge_selection.append(edge)\n  ...\n  556  \t\t\"\"\"Returns the topmost pin at position pos, which is in viewport coordinates.\"\"\"\n  557  \t\tfor item in self.items(pos):\n  558: \t\t\tif isinstance(item, PinItem):\n  559  \t\t\t\treturn item\n  560  \t\treturn None\n  561  \n  562  \tdef initiateConnection(self, pin):\n  563: \t\tif isinstance(pin, OutletItem):\n  564  \t\t\tself.interactive_edge = EdgeItem(source_pin_item=pin, target_pin_item=None, parent_graph=self)\n  565  \t\t\tself.interactive_edge_start_pin = pin\n  566: \t\telif isinstance(pin, InletItem):\n  567  \t\t\tself.interactive_edge = EdgeItem(source_pin_item=None, target_pin_item=pin, parent_graph=self)\n  568  \t\t\tself.interactive_edge_start_pin = pin\n  ...\n  582  \n  583  \tdef moveConnection(self, pos:QPoint):\n  584: \t\tassert isinstance(pos, QPoint), f\"got: {pos}\"\n  585  \t\t# move free endpoint\n  586  \t\tline = self.interactive_edge.line()\n  587: \t\tif isinstance(self.interactive_edge_start_pin, OutletItem):\n  588  \t\t\tline.setP2(self.mapToScene(pos))\n  589: \t\telif isinstance(self.interactive_edge_start_pin, InletItem):\n  590  \t\t\tline.setP1(self.mapToScene(pos))\n  591  \t\tself.interactive_edge.setLine(line)\n  ...\n  593  \t\t# attach free endpoint to closeby pin\n  594  \t\tpinUnderMouse = self.pinAt(pos)\n  595: \t\tif isinstance(self.interactive_edge_start_pin, OutletItem) and isinstance(pinUnderMouse, InletItem):\n  596  \t\t\tself.interactive_edge.setTargetPin(pinUnderMouse)\n  597  \t\t\tself.interactive_edge.updatePosition()\n  598: \t\telif isinstance(self.interactive_edge_start_pin, InletItem) and isinstance(pinUnderMouse, OutletItem):\n  599  \t\t\tself.interactive_edge.setSourcePin(pinUnderMouse)\n  600  \t\t\tself.interactive_edge.updatePosition()\n  ...\n  607  \n  608  \t\tCanConnectPins = (\n  609: \t\t\tisinstance(start_pin, InletItem) \n  610: \t\t\tand isinstance(end_pin, OutletItem)\n  611  \t\t) or (\n  612: \t\t\tisinstance(start_pin, OutletItem) \n  613: \t\t\tand isinstance(end_pin, InletItem)\n  614  \t\t)\n  615  \n  ...\n  624  \t\t\t\t\"\"\"modify edge\"\"\"\n  625  \t\t\t\tedge_index = persistent_edge_index\n  626: \t\t\t\tif isinstance(end_pin, OutletItem) and end_pin.persistent_index:\n  627  \t\t\t\t\toutlet = end_pin.persistent_index\n  628  \t\t\t\t\tself.graph_model.setEdgeSource(edge_index, outlet)\n  629: \t\t\t\telif isinstance(end_pin, InletItem) and end_pin.persistent_index:\n  630  \t\t\t\t\tinlet = end_pin.persistent_index\n  631  \t\t\t\t\tself.graph_model.setEdgeTarget(edge_index, inlet)\n  ...\n  634  \t\t\t\tinlet_item = end_pin\n  635  \t\t\t\toutlet_item = start_pin\n  636: \t\t\t\tif isinstance(end_pin, OutletItem) and isinstance(start_pin, InletItem):\n  637  \t\t\t\t\toutlet_item, inlet_item = inlet_item, outlet_item\n  638  \n\nC:\\dev\\src\\pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py:\n   86  \t...\n   87  \t# get current framework\n   88: \twindow = FrameworkWindow.instance()\n   89  \twindow.display(obj)\n   90  \n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\async_jedi_completer.py:\n   32  \t\t# Check and print the thread details\n   33  \t\t# make sure the current \n   34: \t\tapp = QCoreApplication.instance()\n   35  \t\tIsSeperateThread = app and QThread.currentThread() != app.thread()\n   36  \t\tif not IsSeperateThread:\n   ..\n   48  \tdef __init__(self, textedit: QTextEdit | QPlainTextEdit):\n   49  \t\tsuper().__init__(textedit)\n   50: \t\tself._thread_pool = QThreadPool.globalInstance()\n   51  \t\tself._active_tasks:List[JediWorkerTask] = []\n   52  \t\tself.destroyed.connect(self.cancellAllTasks())\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\async_rope_completer_for_textedit.py:\n   24  \t\t# Check and print the thread details\n   25  \t\t# make sure the current \n   26: \t\tapp = QCoreApplication.instance()\n   27  \t\tIsSeperateThread = app and QThread.currentThread() != app.thread()\n   28  \t\tif not IsSeperateThread:\n   ..\n   47  \t\tsuper().__init__(textedit)\n   48  \t\tself.rope_project = rope_project\n   49: \t\tself._thread_pool = QThreadPool.globalInstance()\n   50  \t\tself._active_tasks: List[RopeWorkerTask] = []\n   51  \n   ..\n   75  \tdef _update_completion_model(self, new_proposals):\n   76  \t\t\"\"\"Update completion model with new proposals.\"\"\"\n   77: \t\tif not isinstance(self.model(), QStringListModel):\n   78  \t\t\tprint(\"Error: Completion model is not of type QStringListModel\")\n   79  \t\t\treturn\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py:\n  119  \t\t# Check and print the thread details\n  120  \t\t# make sure the current \n  121: \t\tapp = QCoreApplication.instance()\n  122  \t\tIsSeperateThread = app and QThread.currentThread() != app.thread()\n  123  \t\tif not IsSeperateThread:\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py:\n  134      def lintException(self, e:Exception, mode:Literal['underline', 'label']):\n  135          import traceback\n  136:         if isinstance(e, SyntaxError):\n  137              text = str(e.msg)\n  138              if e.lineno:\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py:\n   44  class PygmentsSyntaxHighlighter(QSyntaxHighlighter):\n   45  \tdef __init__(self, document, color_scheme:str|Style=\"dracula\"):\n   46: \t\tif not isinstance(document, QTextDocument):\n   47  \t\t\traise ValueError(\"Document must be a QTextDocument, got:{document}\")\n   48  \t\t\t\n   49  \t\tsuper().__init__(document)\n   50  \n   51: \t\tif isinstance(color_scheme, str):\n   52  \t\t\tcolor_scheme = get_style_by_name(color_scheme)\n   53  \t\tself.lexer = PythonLexer()\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py:\n   18  \t\tself.activated.connect(self.insertCompletion)\n   19  \n   20: \t\tif isinstance(self.widget(), QLineEdit):\n   21  \t\t\t\"\"\"\n   22  \t\t\tthe QComleter behaviour will insert text into a QLineEdit, before pressing Enter\n   ..\n  229  \t\t\t\"getattr\", \"globals\",\n  230  \t\t\t\"hasattr\", \"hash\", \"help\", \"hex\",\n  231: \t\t\t\"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\",\n  232  \t\t\t\"len\", \"list\", \"locals\",\n  233  \t\t\t\"map\", \"max\", \"memoryview\", \"min\",\n\nC:\\dev\\src\\pylive\\pylive\\QtScriptEditor\\old_architecture\\script_editor_simple.py:\n  196  \tdef showException(self, e:Exception, prefix=\"\", postfix=\"\"):\n  197  \t\timport traceback\n  198: \t\tif isinstance(e, SyntaxError):\n  199  \t\t\ttext = \" \".join([prefix, str(e.msg), postfix])\n  200  \t\t\tif e.lineno:\n\nC:\\dev\\src\\pylive\\pylive\\QtTerminal\\preview_widget.py:\n   10  \n   11  class PreviewWidget(QWidget):\n   12: \t_instance: Optional['PreviewWidget'] = None\n   13  \tcontentChanged = Signal()\n   14  \n   15  \t@staticmethod\n   16: \tdef instance() -> 'PreviewWidget':\n   17  \t\t\"\"\"\n   18: \t\tFactory method to get the singleton instance of PreviewWidget.\n   19  \t\t\"\"\"\n   20: \t\tif PreviewWidget._instance is None:\n   21: \t\t\t# Create the instance if it doesn't exist\n   22: \t\t\tPreviewWidget._instance = PreviewWidget.__new__(PreviewWidget)\n   23: \t\t\tPreviewWidget._instance._setupUI()\n   24: \t\treturn PreviewWidget._instance\n   25  \n   26  \tdef __init__(self, parent: Optional[QWidget] = None) -> None:\n   27  \t\t\"\"\"\n   28: \t\tDisable direct instantiation. Use instance() method instead.\n   29  \t\t\"\"\"\n   30: \t\traise SingletonException(\"Singleon can cannot be instantiated directly. Use the 'instance()' static method!\")\n   31  \n   32  \tdef _setupUI(self) -> None:\n   33  \t\t\"\"\"\n   34: \t\tInitialize the instance. Called only once by the factory method.\n   35  \t\t\"\"\"\n   36  \t\tQWidget.__init__(self, parent=None)\n   ..\n   89  \tapp = QApplication(sys.argv)\n   90  \twindow = QWidget()\n   91: \twindow.setWindowTitle(\"demonstrate PreviewWidget.instance()\")\n   92  \tlayout = QHBoxLayout()\n   93  \twindow.setLayout(layout)\n   94  \tlayout.addWidget(QLabel(\"left pane\"))\n   95: \tlayout.addWidget( PreviewWidget.instance() )\n   96  \twindow.show()\n   97  \tsys.exit(app.exec())\n\nC:\\dev\\src\\pylive\\pylive\\QtTerminal\\thread_pool_tracker.py:\n    9  class ThreadPoolWatcher(QObject):\n   10      \"\"\"\n   11:     A QObject-based model to monitor QThreadPool.globalInstance()\n   12      and emit signals when the active thread count changes.\n   13      \"\"\"\n   ..\n   17      def __init__(self, parent=None, poll_intervall_ms=10):\n   18          super().__init__(parent)\n   19:         self.thread_pool = QThreadPool.globalInstance()\n   20          self.poll_timer = QTimer(self)\n   21          self.poll_timer.timeout.connect(self.check_thread_pool)\n   ..\n   93      for i in range(10):\n   94          task = Task(f\"Task-{i+1}\")\n   95:         QThreadPool.globalInstance().start(task)\n   96  \n   97      window = QWidget()\n   ..\n   99      window.layout().addWidget(ThreadPoolCounterWidget())\n  100      btn = QPushButton(\"add new thread\")\n  101:     btn.pressed.connect(lambda: QThreadPool.globalInstance().start( Task(f\"Task-{i+1}\") ))\n  102      window.layout().addWidget(btn)\n  103      window.show()\n\nC:\\dev\\src\\pylive\\pylive\\render_engine\\regl\\regl.py:\n   69  \n   70  \tdef validate_attributes(self):\n   71: \t\tif not all(isinstance(buffer, np.ndarray) or isinstance(buffer, list) for buffer in self.attributes.values()):\n   72  \t\t\traise ValueError(f\"All buffer must be np.ndarray or a List, got:{self.attributes.values()}\")\n   73  \n\nC:\\dev\\src\\pylive\\pylive\\utils\\__init__.py:\n    1  from PySide6.QtWidgets import QApplication\n    2  def getWidgetByName(name:str):\n    3: \tapp = QApplication.instance()\n    4  \tif not app:\n    5: \t\traise Exception(\"No QApplication instance!\")\n    6  \n    7  \t# find widget\n\nC:\\dev\\src\\pylive\\script_examples_to_run_live\\glcanvas_widget_with_moderngl.py:\n    8  import sys\n    9  ### create the app ###\n   10: app = QApplication.instance() or QApplication(sys.argv)\n   11  glcanvas = GLCanvasWidget()\n   12  glcanvas.show()\n\nC:\\dev\\src\\pylive\\tests\\test_preview_widget.py:\n    4  \n    5  class TestPreviewWidget(unittest.TestCase):\n    6: \tdef test_create_with_instance(self):\n    7: \t\twidget = PreviewWidget.instance()\n    8  \t\t\n    9  \tdef test_throw_using_init(self):\n\n303 matches across 42 files\n\n\nSearching 159 files for \"def instance\"\n\nC:\\dev\\src\\pylive\\pylive\\QtTerminal\\preview_widget.py:\n   14  \n   15  \t@staticmethod\n   16: \tdef instance() -> 'PreviewWidget':\n   17  \t\t\"\"\"\n   18  \t\tFactory method to get the singleton instance of PreviewWidget.\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 57639,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "pylive/QtTerminal/preview_widget.py",
			"settings":
			{
				"buffer_size": 2782,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "TODOs.md",
			"settings":
			{
				"buffer_size": 1207,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAiAQAAAAAAAAAAAAAgwQAAAAAAACDBAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAggQAAAAAAACCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAAIQEAAAAAAAAhAQAAAAAAAACAAAAICCDBAAAAAAAAIMEAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAhgQAAAAAAACGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB4AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgIAAAAAAAB2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAHcCAAAAAAAAeAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwIAAAAAAAB3AgAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " FIX"
					},
					"BAAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAB6AgAAAAAAAHsCAAAAAAAAAAAAAHsCAAAAAAAAfAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAIAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " JediComplet"
					},
					"DAAAAHwCAAAAAAAAfQIAAAAAAAAAAAAAfQIAAAAAAAB+AgAAAAAAAAAAAAB+AgAAAAAAAH8CAAAAAAAAAAAAAH8CAAAAAAAAgAIAAAAAAAAAAAAAgAIAAAAAAACBAgAAAAAAAAAAAACBAgAAAAAAAIICAAAAAAAAAAAAAIICAAAAAAAAgwIAAAAAAAAAAAAAgwIAAAAAAACEAgAAAAAAAAAAAACEAgAAAAAAAIUCAAAAAAAAAAAAAIUCAAAAAAAAhgIAAAAAAAAAAAAAhgIAAAAAAACHAgAAAAAAAAAAAACHAgAAAAAAAIgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAIgCAAAAAAAAiQIAAAAAAAAAAAAAiQIAAAAAAACKAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAIAAAAAAACIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AgAAAIoCAAAAAAAAiwIAAAAAAAAAAAAAiwIAAAAAAACMAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "Asyn"
					},
					"BAAAAI0CAAAAAAAAjgIAAAAAAAAAAAAAjgIAAAAAAACPAgAAAAAAAAAAAACPAgAAAAAAAJACAAAAAAAAAAAAAJACAAAAAAAAkQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					7,
					"left_delete",
					null,
					"BwAAAJACAAAAAAAAkAIAAAAAAAABAAAAbo8CAAAAAAAAjwIAAAAAAAABAAAAeY4CAAAAAAAAjgIAAAAAAAABAAAAc40CAAAAAAAAjQIAAAAAAAABAAAAQYwCAAAAAAAAjAIAAAAAAAABAAAAIIsCAAAAAAAAiwIAAAAAAAABAAAALYoCAAAAAAAAigIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkQIAAAAAAACRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAIoCAAAAAAAAiwIAAAAAAAAAAAAAiwIAAAAAAACMAgAAAAAAAAAAAACMAgAAAAAAAI0CAAAAAAAAAAAAAI0CAAAAAAAAjgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " compatible"
					},
					"CwAAAI4CAAAAAAAAjwIAAAAAAAAAAAAAjwIAAAAAAACQAgAAAAAAAAAAAACQAgAAAAAAAJECAAAAAAAAAAAAAJECAAAAAAAAkgIAAAAAAAAAAAAAkgIAAAAAAACTAgAAAAAAAAAAAACTAgAAAAAAAJQCAAAAAAAAAAAAAJQCAAAAAAAAlQIAAAAAAAAAAAAAlQIAAAAAAACWAgAAAAAAAAAAAACWAgAAAAAAAJcCAAAAAAAAAAAAAJcCAAAAAAAAmAIAAAAAAAAAAAAAmAIAAAAAAACZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgIAAAAAAACOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAAJkCAAAAAAAAmgIAAAAAAAAAAAAAmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQIAAAAAAACZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " QLineEd"
					},
					"CAAAAJ4CAAAAAAAAnwIAAAAAAAAAAAAAnwIAAAAAAACgAgAAAAAAAAAAAACgAgAAAAAAAKECAAAAAAAAAAAAAKECAAAAAAAAogIAAAAAAAAAAAAAogIAAAAAAACjAgAAAAAAAAAAAACjAgAAAAAAAKQCAAAAAAAAAAAAAKQCAAAAAAAApQIAAAAAAAAAAAAApQIAAAAAAACmAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "it"
					},
					"AgAAAKYCAAAAAAAApwIAAAAAAAAAAAAApwIAAAAAAACoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAHUCAAAAAAAAdQIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdgIAAAAAAAB2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAKoCAAAAAAAAqwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALkCAAAAAAAAugIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQIAAAAAAAC5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAADEDAAAAAAAAMQMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMgMAAAAAAAAyAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABUAAAAAAAAAFgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pyrigth",
				"Preferences: LSP-pyright Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"termin",
				"Terminus: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Close All"
			],
			[
				"instl",
				"Package Control: Install Package"
			],
			[
				"REMOE",
				"Package Control: Remove Package"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"packa",
				"View Package File"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/dev/src/pylive",
		"/C/dev/src/pylive/pylive",
		"/C/dev/src/pylive/pylive/QtLiveFramework",
		"/C/dev/src/pylive/script_examples_to_run_live"
	],
	"file_history":
	[
		"/E/__ANDRIS__/ART/_Applications_/Cynthia Lopez 7000 - 2024/Cynthia Lopez 7000.xlsx",
		"/C/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/jedi_completer.py",
		"/C/dev/src/pylive/expreiments/glcanvas.py",
		"/C/dev/src/pylive/pylive/render_engine/regl/regl.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_skeleton.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/glcanvas.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLWindow_with_qopengl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget_with_request_animation.py",
		"/C/dev/src/pylive/pylive/render_engine/utils/__init__.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/GLCanvasWidget-with_painting_signal.py",
		"/C/dev/src/pylive/pylive/render_engine/glwidget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/GLCanvasWindow.py",
		"/C/Users/andris/AppData/Local/Temp/2ea7c807-5541-48c5-9e23-9d4d4826a0ed_Microsoft Office 2021 Pro Plus.zip.0ed/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/Users/andris/Downloads/Microsoft Office 2021 Pro Plus (365 ) + Patch/Microsoft Office 2021 Pro Plus/Microsoft Office 2021 Pro Plus (365 + Patch/readme.txt",
		"/C/dev/src/pylive/expreiments/opengl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pygame_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/opengl_outside_window.py",
		"/C/dev/src/pylive/pylive/render_engine/orbit_control.py",
		"/C/dev/src/pylive/pylive/render_engine/lookAt_standalone.vert",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_edit.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/linter_widget.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
		"/C/dev/src/pylive/pylive/logwindow.py",
		"/C/dev/src/pylive/pylive/render_engine/render_layers.py",
		"/C/dev/src/pylive/pylive/shaders/billboard.vert",
		"/C/dev/src/pylive/pylive/render_engine/resource_manager.py",
		"/C/dev/src/pylive/pylive/render_engine/examples/1 render layers.py",
		"/C/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/unified_titlebar.py",
		"/C/dev/src/pylive/pylive/render_engine/camera.py",
		"/C/dev/src/pylive/pylive/shaders/default_vertex_shader.vert",
		"/C/dev/src/pylive/pylive/shaders/flat_fragment_shader.frag",
		"/C/dev/src/pylive/pylive/examples/livescript.py",
		"/C/dev/src/pylive/gloo/render_layers.py",
		"/C/dev/src/pylive/gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/camera.py",
		"/C/dev/src/pylive/my_gloo/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/orbit_control.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_window_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/rendering_with_qt.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/qpygletwidget.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_1.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget (Not Working).py",
		"/C/dev/src/pylive/expreiments/3d_rendering/vispy_and_pyside_2.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_canvas_with_moderngl.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyglet_on_QWidget.py",
		"/C/dev/src/pylive/pyproject.toml",
		"/C/dev/src/pylive/expreiments/ipython/ipython_kernel.py",
		"/C/dev/src/pylive/expreiments/ipython/qtconsole_inprocess1.py",
		"/C/dev/src/pylive/expreiments/ipython/simple_console.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_ipython.py",
		"/C/dev/src/pylive/expreiments/simple_console.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/gl_widget_gpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notbook_with_chatgpt.py",
		"/C/dev/src/pylive/expreiments/ipython/notebook_with_qtconsole.py",
		"/C/dev/src/pylive/expreiments/live_framework.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_number_editor.py",
		"/C/dev/src/pylive/expreiments/ipython_kernel.py",
		"/C/dev/src/pylive/pylive/examples/livenotebook.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/dag_graph_graphics_scene.py",
		"/C/Users/andris/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0/LocalCache/local-packages/Python312/site-packages/PySide6/QtGui.pyi",
		"/C/dev/src/pylive/expreiments/visualize_function_dependencies.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/pygments_syntax_highlighter_OLD.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/textedit_completer.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/WhitespaceHighlighter.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/highlighters.py",
		"/C/dev/src/pylive/expreiments/jedi_test.py",
		"/C/dev/src/pylive/expreiments/live_colorscheme.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/async_rope_completer_for_textedit.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_editor_with_async_rope_completion.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/simple_script_editor.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/completer_for_textedit.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/number_editor.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/KeywordsCompleter_OLD.py",
		"/C/dev/src/pylive/pylive/thread_pool_tracker.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/script_editor_with_async_rope_completer.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/ScriptEdit.py",
		"/C/dev/src/pylive/.venv/Lib/site-packages/IPython/utils/capture.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/mindmap_example.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_databased.py",
		"/C/dev/src/pylive/pylive/examples/live_paint_qwidget.py",
		"/C/dev/src/pylive/pylive/preview_widget.py",
		"/C/dev/src/pylive/expreiments/GraphScene.py",
		"/C/dev/src/pylive/pylive/examples/visual_coding.py",
		"/C/dev/src/pylive/expreiments/live_graphics_scene.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/PanAndZoomGraphicsView.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graph_scene.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/test_function_signatures.py",
		"/C/dev/src/pylive/expreiments/layout_with_qgraphics_items.py",
		"/C/dev/src/pylive/LiveScript.lnk",
		"/C/dev/src/pylive/pylive/QtGraphEditor/detailsview_columnbased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/option_dialog.py",
		"/C/dev/src/pylive/expreiments/inspect_available_functions.py",
		"/C/dev/src/pylive/pylive/QtScriptEditor/components/PygmentsSyntaxHighlighter.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_databased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/OptionDialog.py",
		"/C/dev/src/pylive/expreiments/print_exception_traceback.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/pyside_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/camera.py",
		"/C/dev/src/pylive/expreiments/3d_rendering/flat.frag",
		"/C/dev/src/pylive/expreiments/3d_rendering/flat.vert",
		"/C/dev/src/pylive/expreiments/pyside_moderngl_boilerplate.py",
		"/C/dev/src/pylive/expreiments/moderngl_pygame_boilerplate.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/tableview_columnbased.py",
		"/C/dev/src/pylive/expreiments/inspect_functions_experiment.py",
		"/C/dev/src/pylive/pylive/livescript.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/test_graphmodel_databased.py",
		"/C/dev/src/pylive/examples/livescript.py",
		"/C/dev/src/pylive/examples/visual_coding.py",
		"/C/dev/src/pylive/pylive/utils.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_columnbased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphview_columnbased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/test_graphmodel_columnbased.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/graphmodel_abc.py",
		"/C/dev/src/pylive/pylive/livegraph.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/GraphView.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/GraphModel.py",
		"/C/dev/src/pylive/pylive/__init__.py",
		"/C/dev/src/pylive/pylive/LiveScript.py",
		"/C/dev/src/pylive/pylive/test_script.py",
		"/C/dev/src/pylive/pylive/test_exec.py",
		"/C/dev/src/pylive/pylive/test_ipython.py",
		"/C/dev/src/pylive/pylive/QtGraphEditor/GraphDetailsView.py"
	],
	"find":
	{
		"height": 23.3333333333
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"def instance",
			"instance",
			"setAttribute(",
			"setAttribute",
			"get_context",
			"QOpenGLWindow",
			"import QOpenGLWindow",
			"Literal",
			"literal",
			"Searching",
			"Lityeral",
			"dtype",
			"\t\t'",
			"internal_format",
			"dtype",
			"mode",
			"varyings_capture_mode",
			"internal_format",
			"dtype",
			"internal_format",
			"dtype",
			"internal_format",
			"varyings_capture_mode",
			"self",
			"for",
			"framebuffers",
			"placeholder",
			"find",
			"fin",
			"clearNo",
			"showException",
			"evalu",
			"completer",
			"RopeC",
			"lineNumberArea",
			"completer",
			"print",
			"new file",
			"setWindowTitle",
			"modifie",
			"setPreviewCollapse",
			"contentChang",
			"setupMenui",
			"NodeW",
			"self.palette",
			"threshold",
			"cancel",
			"interactive_edge_end_pin",
			"interactive_edge_start_pin",
			"interactive_edge_end_pin",
			"interactive_edge_moving_pin",
			"interactive_edge_start_pin",
			"self._pare",
			".parent_node",
			"_edges",
			"GrabThreshold",
			"center",
			"HeaderWidget",
			"palette",
			"updatePosition",
			"pinAt",
			"onNodeEditorChange",
			"onnodePropertyChange",
			"updatePin",
			"EdgeItem",
			"InletItem",
			"OutletItem",
			"PinItem",
			"inlet",
			"handleInletsADDED",
			"handleNodesProp",
			"doubleClick",
			"editable",
			"evaluate",
			"inspect",
			"MiniTable",
			"from",
			"pyg",
			"setNodeProperty",
			"index",
			"html",
			"self.outpu",
			"setHtml",
			"onNodeProper",
			"NodeGraphicsItem",
			"Data",
			"NodeProp",
			"Data",
			"getEdgeSource",
			"NodeDataColumn",
			"handleNodesData",
			"emit",
			"setNodeData",
			"handleNodesData",
			"setEditorData",
			"handleNodesAdded",
			"Ref(",
			"getNodes",
			"data(",
			"EdgeIndex",
			"OutletIndex",
			"InletIndex",
			"NodeIndex",
			"EdgeIndex",
			"OutletIndex",
			"InletIndex",
			"NodeIndex",
			"OutletIndex",
			"InletIndex",
			"EdgeIndex",
			"NodeIndex",
			"EdgeDataColumn",
			"addInlet",
			"addOut",
			"Property",
			"EdgeProperty",
			"OutletProperty",
			"InletProperty",
			"NodeProperty",
			"addOutlet(",
			"addOutlet",
			"OutletView(",
			"addInlet",
			"EdgeItem",
			"InletItem",
			"OutletItem",
			"action",
			"removeOut"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"interactive_edge_moving_pin",
			"interactive_edge_fixed_pin",
			"interactive_edge_moving_pin",
			"EdgeGraphicsItem",
			"InletGraphicsItem",
			"OutletGraphicsItem",
			"PinGraphicsItem",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"EdgeRef",
			"OutletRef",
			"InletRef",
			"NodeRef",
			"OutletRef",
			"InletRef",
			"EdgeRef",
			"NodeRef",
			"EdgeDataColumn",
			"OutletDataColumn",
			"InletDataColumn",
			"NodeDataColumn",
			"EdgeView",
			"InletView",
			"OutletView",
			"self._edgeTable",
			"self._outletTable",
			"self._inletTable",
			"self._nodeTable"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "expreiments/file_textdocument_link.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4369,
						"regions":
						{
						},
						"selection":
						[
							[
								1652,
								1652
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/expreiments/file_textdocument_link.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pylive/render_engine/GLCanvasWidget_with_painting_signal.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2709,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								2709
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/render_engine/GLCanvasWidget_with_painting_signal.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 579.333333333,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1330,
						"regions":
						{
						},
						"selection":
						[
							[
								1330,
								1330
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 3,
					"file": "pylive/QtLiveFramework/live_framework_with_exec.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4433,
						"regions":
						{
						},
						"selection":
						[
							[
								1176,
								1176
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtLiveFramework/live_framework_with_exec.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 448.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57639,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								57440,
								57440
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"line_numbers": false,
							"lsp_uri": "buffer:176",
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 20384.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "pylive/QtTerminal/preview_widget.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2782,
						"regions":
						{
						},
						"selection":
						[
							[
								1004,
								969
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/pylive/QtTerminal/preview_widget.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1330,
						"regions":
						{
						},
						"selection":
						[
							[
								644,
								644
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[\"'",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_uri": "file:///C:/dev/src/pylive/script_examples_to_run_live/glcanvas_widget_with_moderngl.py",
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "TODOs.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1207,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								47
							]
						],
						"settings":
						{
							"lsp_uri": "file:///C:/dev/src/pylive/TODOs.md",
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.3333333333
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.376111817027,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 412.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 337.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Python: Run File (CrossPlatform)",
	"project": "pylive.sublime-project",
	"replace":
	{
		"height": 42.6666666667
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"live_framewo",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"link file",
				"pylive\\expreiments\\file_textdocument_link.py"
			],
			[
				"jedi",
				"pylive\\pylive\\QtScriptEditor\\components\\jedi_completer.py"
			],
			[
				"with_exec",
				"pylive\\pylive\\QtLiveFramework\\live_framework_with_exec.py"
			],
			[
				"framew",
				"pylive\\pylive\\QtLiveFramework\\live_framework_skeleton.py"
			],
			[
				"moderngl",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"modenr",
				"pylive\\expreiments\\3d_rendering\\pygame_moderngl_boilerplate.py"
			],
			[
				"regl",
				"pylive\\pylive\\render_engine\\regl\\regl.py"
			],
			[
				"logwind",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"resou",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"render",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"main",
				"pylive\\pylive\\render_engine\\regl\\main.py"
			],
			[
				"resource",
				"pylive\\pylive\\render_engine\\resource_manager.py"
			],
			[
				"modern",
				"pylive\\pylive\\render_engine\\glwidget_with_moderngl.py"
			],
			[
				"unifie",
				"pylive\\expreiments\\unified_titlebar.py"
			],
			[
				"camer",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"linter",
				"pylive\\pylive\\QtScriptEditor\\components\\linter_widget.py"
			],
			[
				"Script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"camera",
				"pylive\\pylive\\render_engine\\camera.py"
			],
			[
				"orbit",
				"pylive\\pylive\\render_engine\\orbit_control.py"
			],
			[
				"renderl",
				"pylive\\pylive\\render_engine\\render_layers.py"
			],
			[
				"live",
				"pylive\\pylive\\examples\\livescript.py"
			],
			[
				"orbitcon",
				"pylive\\expreiments\\3d_rendering\\orbit_control.py"
			],
			[
				"script",
				"pylive\\pylive\\QtScriptEditor\\script_edit.py"
			],
			[
				"number editor",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_number_editor.py"
			],
			[
				"whitespace",
				"pylive\\pylive\\QtScriptEditor\\components\\WhitespaceHighlighter.py"
			],
			[
				"pygme",
				"pylive\\pylive\\QtScriptEditor\\components\\pygments_syntax_highlighter.py"
			],
			[
				"highlighte",
				"pylive\\pylive\\QtScriptEditor\\highlighters.py"
			],
			[
				"textedito",
				"pylive\\pylive\\QtScriptEditor\\components\\textedit_completer.py"
			],
			[
				"keywo",
				"pylive\\pylive\\QtScriptEditor\\components\\KeywordsCompleter.py"
			],
			[
				"scrip",
				"pylive\\pylive\\QtScriptEditor\\ScriptEdit.py"
			],
			[
				"logw",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"capture",
				"pylive\\.venv\\Lib\\site-packages\\IPython\\utils\\capture.py"
			],
			[
				"preview",
				"pylive\\pylive\\preview_widget.py"
			],
			[
				"pan",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"panand",
				"pylive\\pylive\\QtGraphEditor\\PanAndZoomGraphicsView.py"
			],
			[
				"visu",
				"pylive\\pylive\\examples\\visual_coding.py"
			],
			[
				"log",
				"pylive\\pylive\\logwindow.py"
			],
			[
				"livescript",
				"pylive\\pylive\\LiveScript.py"
			],
			[
				"mind",
				"pylive\\pylive\\QtGraphEditor\\mindmap_example.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 59.3333333333,
		"last_filter": "circle",
		"selected_items":
		[
			[
				"circle",
				"CircleWidget"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 346.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
